// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SnowManMessage.proto

#ifndef PROTOBUF_SnowManMessage_2eproto__INCLUDED
#define PROTOBUF_SnowManMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "InnerMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SnowManMessage_2eproto();
void protobuf_AssignDesc_SnowManMessage_2eproto();
void protobuf_ShutdownFile_SnowManMessage_2eproto();

class CGEnterSnowInstance;
class GCRefreshSnowBossActitivy;
class CGRefreshSnowActivityData;
class FightRankInfo;
class GCRefreshFightRankList;
class RankRewardsInfo;
class GCRefreshRankRewardsList;
class CGOperSnowBoss;

// ===================================================================

class CGEnterSnowInstance : public ::google::protobuf::Message {
 public:
  CGEnterSnowInstance();
  virtual ~CGEnterSnowInstance();

  CGEnterSnowInstance(const CGEnterSnowInstance& from);

  inline CGEnterSnowInstance& operator=(const CGEnterSnowInstance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGEnterSnowInstance& default_instance();

  void Swap(CGEnterSnowInstance* other);

  // implements Message ----------------------------------------------

  CGEnterSnowInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGEnterSnowInstance& from);
  void MergeFrom(const CGEnterSnowInstance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 snowManGuid = 1;
  inline bool has_snowmanguid() const;
  inline void clear_snowmanguid();
  static const int kSnowManGuidFieldNumber = 1;
  inline ::google::protobuf::int64 snowmanguid() const;
  inline void set_snowmanguid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGEnterSnowInstance)
 private:
  inline void set_has_snowmanguid();
  inline void clear_has_snowmanguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 snowmanguid_;
  friend void  protobuf_AddDesc_SnowManMessage_2eproto();
  friend void protobuf_AssignDesc_SnowManMessage_2eproto();
  friend void protobuf_ShutdownFile_SnowManMessage_2eproto();

  void InitAsDefaultInstance();
  static CGEnterSnowInstance* default_instance_;
};
// -------------------------------------------------------------------

class GCRefreshSnowBossActitivy : public ::google::protobuf::Message {
 public:
  GCRefreshSnowBossActitivy();
  virtual ~GCRefreshSnowBossActitivy();

  GCRefreshSnowBossActitivy(const GCRefreshSnowBossActitivy& from);

  inline GCRefreshSnowBossActitivy& operator=(const GCRefreshSnowBossActitivy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCRefreshSnowBossActitivy& default_instance();

  void Swap(GCRefreshSnowBossActitivy* other);

  // implements Message ----------------------------------------------

  GCRefreshSnowBossActitivy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCRefreshSnowBossActitivy& from);
  void MergeFrom(const GCRefreshSnowBossActitivy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string ruleExplain = 2;
  inline bool has_ruleexplain() const;
  inline void clear_ruleexplain();
  static const int kRuleExplainFieldNumber = 2;
  inline const ::std::string& ruleexplain() const;
  inline void set_ruleexplain(const ::std::string& value);
  inline void set_ruleexplain(const char* value);
  inline void set_ruleexplain(const char* value, size_t size);
  inline ::std::string* mutable_ruleexplain();
  inline ::std::string* release_ruleexplain();
  inline void set_allocated_ruleexplain(::std::string* ruleexplain);

  // optional string icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional string buttonName = 4;
  inline bool has_buttonname() const;
  inline void clear_buttonname();
  static const int kButtonNameFieldNumber = 4;
  inline const ::std::string& buttonname() const;
  inline void set_buttonname(const ::std::string& value);
  inline void set_buttonname(const char* value);
  inline void set_buttonname(const char* value, size_t size);
  inline ::std::string* mutable_buttonname();
  inline ::std::string* release_buttonname();
  inline void set_allocated_buttonname(::std::string* buttonname);

  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 playerStatus = 6;
  inline bool has_playerstatus() const;
  inline void clear_playerstatus();
  static const int kPlayerStatusFieldNumber = 6;
  inline ::google::protobuf::int32 playerstatus() const;
  inline void set_playerstatus(::google::protobuf::int32 value);

  // optional int32 needClearCache = 7;
  inline bool has_needclearcache() const;
  inline void clear_needclearcache();
  static const int kNeedClearCacheFieldNumber = 7;
  inline ::google::protobuf::int32 needclearcache() const;
  inline void set_needclearcache(::google::protobuf::int32 value);

  // optional int64 canEnterTime = 8;
  inline bool has_canentertime() const;
  inline void clear_canentertime();
  static const int kCanEnterTimeFieldNumber = 8;
  inline ::google::protobuf::int64 canentertime() const;
  inline void set_canentertime(::google::protobuf::int64 value);

  // optional int32 bossid = 9;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossidFieldNumber = 9;
  inline ::google::protobuf::int32 bossid() const;
  inline void set_bossid(::google::protobuf::int32 value);

  // optional string position = 10;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 10;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const char* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // optional string rotation = 11;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 11;
  inline const ::std::string& rotation() const;
  inline void set_rotation(const ::std::string& value);
  inline void set_rotation(const char* value);
  inline void set_rotation(const char* value, size_t size);
  inline ::std::string* mutable_rotation();
  inline ::std::string* release_rotation();
  inline void set_allocated_rotation(::std::string* rotation);

  // optional string scale = 12;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 12;
  inline const ::std::string& scale() const;
  inline void set_scale(const ::std::string& value);
  inline void set_scale(const char* value);
  inline void set_scale(const char* value, size_t size);
  inline ::std::string* mutable_scale();
  inline ::std::string* release_scale();
  inline void set_allocated_scale(::std::string* scale);

  // @@protoc_insertion_point(class_scope:GCRefreshSnowBossActitivy)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ruleexplain();
  inline void clear_has_ruleexplain();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_buttonname();
  inline void clear_has_buttonname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_playerstatus();
  inline void clear_has_playerstatus();
  inline void set_has_needclearcache();
  inline void clear_has_needclearcache();
  inline void set_has_canentertime();
  inline void clear_has_canentertime();
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* ruleexplain_;
  ::std::string* icon_;
  ::std::string* buttonname_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 playerstatus_;
  ::google::protobuf::int64 canentertime_;
  ::google::protobuf::int32 needclearcache_;
  ::google::protobuf::int32 bossid_;
  ::std::string* position_;
  ::std::string* rotation_;
  ::std::string* scale_;
  friend void  protobuf_AddDesc_SnowManMessage_2eproto();
  friend void protobuf_AssignDesc_SnowManMessage_2eproto();
  friend void protobuf_ShutdownFile_SnowManMessage_2eproto();

  void InitAsDefaultInstance();
  static GCRefreshSnowBossActitivy* default_instance_;
};
// -------------------------------------------------------------------

class CGRefreshSnowActivityData : public ::google::protobuf::Message {
 public:
  CGRefreshSnowActivityData();
  virtual ~CGRefreshSnowActivityData();

  CGRefreshSnowActivityData(const CGRefreshSnowActivityData& from);

  inline CGRefreshSnowActivityData& operator=(const CGRefreshSnowActivityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGRefreshSnowActivityData& default_instance();

  void Swap(CGRefreshSnowActivityData* other);

  // implements Message ----------------------------------------------

  CGRefreshSnowActivityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGRefreshSnowActivityData& from);
  void MergeFrom(const CGRefreshSnowActivityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGRefreshSnowActivityData)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_SnowManMessage_2eproto();
  friend void protobuf_AssignDesc_SnowManMessage_2eproto();
  friend void protobuf_ShutdownFile_SnowManMessage_2eproto();

  void InitAsDefaultInstance();
  static CGRefreshSnowActivityData* default_instance_;
};
// -------------------------------------------------------------------

class FightRankInfo : public ::google::protobuf::Message {
 public:
  FightRankInfo();
  virtual ~FightRankInfo();

  FightRankInfo(const FightRankInfo& from);

  inline FightRankInfo& operator=(const FightRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRankInfo& default_instance();

  void Swap(FightRankInfo* other);

  // implements Message ----------------------------------------------

  FightRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightRankInfo& from);
  void MergeFrom(const FightRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional string playerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional int32 damage = 3;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 3;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightRankInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* playername_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 damage_;
  friend void  protobuf_AddDesc_SnowManMessage_2eproto();
  friend void protobuf_AssignDesc_SnowManMessage_2eproto();
  friend void protobuf_ShutdownFile_SnowManMessage_2eproto();

  void InitAsDefaultInstance();
  static FightRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCRefreshFightRankList : public ::google::protobuf::Message {
 public:
  GCRefreshFightRankList();
  virtual ~GCRefreshFightRankList();

  GCRefreshFightRankList(const GCRefreshFightRankList& from);

  inline GCRefreshFightRankList& operator=(const GCRefreshFightRankList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCRefreshFightRankList& default_instance();

  void Swap(GCRefreshFightRankList* other);

  // implements Message ----------------------------------------------

  GCRefreshFightRankList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCRefreshFightRankList& from);
  void MergeFrom(const GCRefreshFightRankList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 myRank = 1;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 1;
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // optional int32 myDamage = 2;
  inline bool has_mydamage() const;
  inline void clear_mydamage();
  static const int kMyDamageFieldNumber = 2;
  inline ::google::protobuf::int32 mydamage() const;
  inline void set_mydamage(::google::protobuf::int32 value);

  // repeated .FightRankInfo rankList = 3;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRankListFieldNumber = 3;
  inline const ::FightRankInfo& ranklist(int index) const;
  inline ::FightRankInfo* mutable_ranklist(int index);
  inline ::FightRankInfo* add_ranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::FightRankInfo >&
      ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::FightRankInfo >*
      mutable_ranklist();

  // @@protoc_insertion_point(class_scope:GCRefreshFightRankList)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();
  inline void set_has_mydamage();
  inline void clear_has_mydamage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 myrank_;
  ::google::protobuf::int32 mydamage_;
  ::google::protobuf::RepeatedPtrField< ::FightRankInfo > ranklist_;
  friend void  protobuf_AddDesc_SnowManMessage_2eproto();
  friend void protobuf_AssignDesc_SnowManMessage_2eproto();
  friend void protobuf_ShutdownFile_SnowManMessage_2eproto();

  void InitAsDefaultInstance();
  static GCRefreshFightRankList* default_instance_;
};
// -------------------------------------------------------------------

class RankRewardsInfo : public ::google::protobuf::Message {
 public:
  RankRewardsInfo();
  virtual ~RankRewardsInfo();

  RankRewardsInfo(const RankRewardsInfo& from);

  inline RankRewardsInfo& operator=(const RankRewardsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankRewardsInfo& default_instance();

  void Swap(RankRewardsInfo* other);

  // implements Message ----------------------------------------------

  RankRewardsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankRewardsInfo& from);
  void MergeFrom(const RankRewardsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ranks = 1;
  inline bool has_ranks() const;
  inline void clear_ranks();
  static const int kRanksFieldNumber = 1;
  inline const ::std::string& ranks() const;
  inline void set_ranks(const ::std::string& value);
  inline void set_ranks(const char* value);
  inline void set_ranks(const char* value, size_t size);
  inline ::std::string* mutable_ranks();
  inline ::std::string* release_ranks();
  inline void set_allocated_ranks(::std::string* ranks);

  // repeated .Iteminfo rewards = 2;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 2;
  inline const ::Iteminfo& rewards(int index) const;
  inline ::Iteminfo* mutable_rewards(int index);
  inline ::Iteminfo* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::Iteminfo >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::Iteminfo >*
      mutable_rewards();

  // @@protoc_insertion_point(class_scope:RankRewardsInfo)
 private:
  inline void set_has_ranks();
  inline void clear_has_ranks();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ranks_;
  ::google::protobuf::RepeatedPtrField< ::Iteminfo > rewards_;
  friend void  protobuf_AddDesc_SnowManMessage_2eproto();
  friend void protobuf_AssignDesc_SnowManMessage_2eproto();
  friend void protobuf_ShutdownFile_SnowManMessage_2eproto();

  void InitAsDefaultInstance();
  static RankRewardsInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCRefreshRankRewardsList : public ::google::protobuf::Message {
 public:
  GCRefreshRankRewardsList();
  virtual ~GCRefreshRankRewardsList();

  GCRefreshRankRewardsList(const GCRefreshRankRewardsList& from);

  inline GCRefreshRankRewardsList& operator=(const GCRefreshRankRewardsList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCRefreshRankRewardsList& default_instance();

  void Swap(GCRefreshRankRewardsList* other);

  // implements Message ----------------------------------------------

  GCRefreshRankRewardsList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCRefreshRankRewardsList& from);
  void MergeFrom(const GCRefreshRankRewardsList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RankRewardsInfo rewardList = 1;
  inline int rewardlist_size() const;
  inline void clear_rewardlist();
  static const int kRewardListFieldNumber = 1;
  inline const ::RankRewardsInfo& rewardlist(int index) const;
  inline ::RankRewardsInfo* mutable_rewardlist(int index);
  inline ::RankRewardsInfo* add_rewardlist();
  inline const ::google::protobuf::RepeatedPtrField< ::RankRewardsInfo >&
      rewardlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::RankRewardsInfo >*
      mutable_rewardlist();

  // @@protoc_insertion_point(class_scope:GCRefreshRankRewardsList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RankRewardsInfo > rewardlist_;
  friend void  protobuf_AddDesc_SnowManMessage_2eproto();
  friend void protobuf_AssignDesc_SnowManMessage_2eproto();
  friend void protobuf_ShutdownFile_SnowManMessage_2eproto();

  void InitAsDefaultInstance();
  static GCRefreshRankRewardsList* default_instance_;
};
// -------------------------------------------------------------------

class CGOperSnowBoss : public ::google::protobuf::Message {
 public:
  CGOperSnowBoss();
  virtual ~CGOperSnowBoss();

  CGOperSnowBoss(const CGOperSnowBoss& from);

  inline CGOperSnowBoss& operator=(const CGOperSnowBoss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGOperSnowBoss& default_instance();

  void Swap(CGOperSnowBoss* other);

  // implements Message ----------------------------------------------

  CGOperSnowBoss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGOperSnowBoss& from);
  void MergeFrom(const CGOperSnowBoss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 oper = 1;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 1;
  inline ::google::protobuf::int32 oper() const;
  inline void set_oper(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGOperSnowBoss)
 private:
  inline void set_has_oper();
  inline void clear_has_oper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 oper_;
  friend void  protobuf_AddDesc_SnowManMessage_2eproto();
  friend void protobuf_AssignDesc_SnowManMessage_2eproto();
  friend void protobuf_ShutdownFile_SnowManMessage_2eproto();

  void InitAsDefaultInstance();
  static CGOperSnowBoss* default_instance_;
};
// ===================================================================


// ===================================================================

// CGEnterSnowInstance

// optional int64 snowManGuid = 1;
inline bool CGEnterSnowInstance::has_snowmanguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGEnterSnowInstance::set_has_snowmanguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGEnterSnowInstance::clear_has_snowmanguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGEnterSnowInstance::clear_snowmanguid() {
  snowmanguid_ = GOOGLE_LONGLONG(0);
  clear_has_snowmanguid();
}
inline ::google::protobuf::int64 CGEnterSnowInstance::snowmanguid() const {
  // @@protoc_insertion_point(field_get:CGEnterSnowInstance.snowManGuid)
  return snowmanguid_;
}
inline void CGEnterSnowInstance::set_snowmanguid(::google::protobuf::int64 value) {
  set_has_snowmanguid();
  snowmanguid_ = value;
  // @@protoc_insertion_point(field_set:CGEnterSnowInstance.snowManGuid)
}

// -------------------------------------------------------------------

// GCRefreshSnowBossActitivy

// optional string name = 1;
inline bool GCRefreshSnowBossActitivy::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCRefreshSnowBossActitivy::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCRefreshSnowBossActitivy::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCRefreshSnowBossActitivy::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GCRefreshSnowBossActitivy::name() const {
  // @@protoc_insertion_point(field_get:GCRefreshSnowBossActitivy.name)
  return *name_;
}
inline void GCRefreshSnowBossActitivy::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:GCRefreshSnowBossActitivy.name)
}
inline void GCRefreshSnowBossActitivy::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCRefreshSnowBossActitivy.name)
}
inline void GCRefreshSnowBossActitivy::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCRefreshSnowBossActitivy.name)
}
inline ::std::string* GCRefreshSnowBossActitivy::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCRefreshSnowBossActitivy.name)
  return name_;
}
inline ::std::string* GCRefreshSnowBossActitivy::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCRefreshSnowBossActitivy::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCRefreshSnowBossActitivy.name)
}

// optional string ruleExplain = 2;
inline bool GCRefreshSnowBossActitivy::has_ruleexplain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCRefreshSnowBossActitivy::set_has_ruleexplain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCRefreshSnowBossActitivy::clear_has_ruleexplain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCRefreshSnowBossActitivy::clear_ruleexplain() {
  if (ruleexplain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ruleexplain_->clear();
  }
  clear_has_ruleexplain();
}
inline const ::std::string& GCRefreshSnowBossActitivy::ruleexplain() const {
  // @@protoc_insertion_point(field_get:GCRefreshSnowBossActitivy.ruleExplain)
  return *ruleexplain_;
}
inline void GCRefreshSnowBossActitivy::set_ruleexplain(const ::std::string& value) {
  set_has_ruleexplain();
  if (ruleexplain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ruleexplain_ = new ::std::string;
  }
  ruleexplain_->assign(value);
  // @@protoc_insertion_point(field_set:GCRefreshSnowBossActitivy.ruleExplain)
}
inline void GCRefreshSnowBossActitivy::set_ruleexplain(const char* value) {
  set_has_ruleexplain();
  if (ruleexplain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ruleexplain_ = new ::std::string;
  }
  ruleexplain_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCRefreshSnowBossActitivy.ruleExplain)
}
inline void GCRefreshSnowBossActitivy::set_ruleexplain(const char* value, size_t size) {
  set_has_ruleexplain();
  if (ruleexplain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ruleexplain_ = new ::std::string;
  }
  ruleexplain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCRefreshSnowBossActitivy.ruleExplain)
}
inline ::std::string* GCRefreshSnowBossActitivy::mutable_ruleexplain() {
  set_has_ruleexplain();
  if (ruleexplain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ruleexplain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCRefreshSnowBossActitivy.ruleExplain)
  return ruleexplain_;
}
inline ::std::string* GCRefreshSnowBossActitivy::release_ruleexplain() {
  clear_has_ruleexplain();
  if (ruleexplain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ruleexplain_;
    ruleexplain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCRefreshSnowBossActitivy::set_allocated_ruleexplain(::std::string* ruleexplain) {
  if (ruleexplain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ruleexplain_;
  }
  if (ruleexplain) {
    set_has_ruleexplain();
    ruleexplain_ = ruleexplain;
  } else {
    clear_has_ruleexplain();
    ruleexplain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCRefreshSnowBossActitivy.ruleExplain)
}

// optional string icon = 3;
inline bool GCRefreshSnowBossActitivy::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCRefreshSnowBossActitivy::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCRefreshSnowBossActitivy::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCRefreshSnowBossActitivy::clear_icon() {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& GCRefreshSnowBossActitivy::icon() const {
  // @@protoc_insertion_point(field_get:GCRefreshSnowBossActitivy.icon)
  return *icon_;
}
inline void GCRefreshSnowBossActitivy::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
  // @@protoc_insertion_point(field_set:GCRefreshSnowBossActitivy.icon)
}
inline void GCRefreshSnowBossActitivy::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCRefreshSnowBossActitivy.icon)
}
inline void GCRefreshSnowBossActitivy::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCRefreshSnowBossActitivy.icon)
}
inline ::std::string* GCRefreshSnowBossActitivy::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCRefreshSnowBossActitivy.icon)
  return icon_;
}
inline ::std::string* GCRefreshSnowBossActitivy::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCRefreshSnowBossActitivy::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCRefreshSnowBossActitivy.icon)
}

// optional string buttonName = 4;
inline bool GCRefreshSnowBossActitivy::has_buttonname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCRefreshSnowBossActitivy::set_has_buttonname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCRefreshSnowBossActitivy::clear_has_buttonname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCRefreshSnowBossActitivy::clear_buttonname() {
  if (buttonname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buttonname_->clear();
  }
  clear_has_buttonname();
}
inline const ::std::string& GCRefreshSnowBossActitivy::buttonname() const {
  // @@protoc_insertion_point(field_get:GCRefreshSnowBossActitivy.buttonName)
  return *buttonname_;
}
inline void GCRefreshSnowBossActitivy::set_buttonname(const ::std::string& value) {
  set_has_buttonname();
  if (buttonname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buttonname_ = new ::std::string;
  }
  buttonname_->assign(value);
  // @@protoc_insertion_point(field_set:GCRefreshSnowBossActitivy.buttonName)
}
inline void GCRefreshSnowBossActitivy::set_buttonname(const char* value) {
  set_has_buttonname();
  if (buttonname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buttonname_ = new ::std::string;
  }
  buttonname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCRefreshSnowBossActitivy.buttonName)
}
inline void GCRefreshSnowBossActitivy::set_buttonname(const char* value, size_t size) {
  set_has_buttonname();
  if (buttonname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buttonname_ = new ::std::string;
  }
  buttonname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCRefreshSnowBossActitivy.buttonName)
}
inline ::std::string* GCRefreshSnowBossActitivy::mutable_buttonname() {
  set_has_buttonname();
  if (buttonname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buttonname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCRefreshSnowBossActitivy.buttonName)
  return buttonname_;
}
inline ::std::string* GCRefreshSnowBossActitivy::release_buttonname() {
  clear_has_buttonname();
  if (buttonname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = buttonname_;
    buttonname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCRefreshSnowBossActitivy::set_allocated_buttonname(::std::string* buttonname) {
  if (buttonname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buttonname_;
  }
  if (buttonname) {
    set_has_buttonname();
    buttonname_ = buttonname;
  } else {
    clear_has_buttonname();
    buttonname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCRefreshSnowBossActitivy.buttonName)
}

// optional int32 level = 5;
inline bool GCRefreshSnowBossActitivy::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCRefreshSnowBossActitivy::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCRefreshSnowBossActitivy::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCRefreshSnowBossActitivy::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 GCRefreshSnowBossActitivy::level() const {
  // @@protoc_insertion_point(field_get:GCRefreshSnowBossActitivy.level)
  return level_;
}
inline void GCRefreshSnowBossActitivy::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:GCRefreshSnowBossActitivy.level)
}

// optional int32 playerStatus = 6;
inline bool GCRefreshSnowBossActitivy::has_playerstatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCRefreshSnowBossActitivy::set_has_playerstatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCRefreshSnowBossActitivy::clear_has_playerstatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCRefreshSnowBossActitivy::clear_playerstatus() {
  playerstatus_ = 0;
  clear_has_playerstatus();
}
inline ::google::protobuf::int32 GCRefreshSnowBossActitivy::playerstatus() const {
  // @@protoc_insertion_point(field_get:GCRefreshSnowBossActitivy.playerStatus)
  return playerstatus_;
}
inline void GCRefreshSnowBossActitivy::set_playerstatus(::google::protobuf::int32 value) {
  set_has_playerstatus();
  playerstatus_ = value;
  // @@protoc_insertion_point(field_set:GCRefreshSnowBossActitivy.playerStatus)
}

// optional int32 needClearCache = 7;
inline bool GCRefreshSnowBossActitivy::has_needclearcache() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GCRefreshSnowBossActitivy::set_has_needclearcache() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GCRefreshSnowBossActitivy::clear_has_needclearcache() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GCRefreshSnowBossActitivy::clear_needclearcache() {
  needclearcache_ = 0;
  clear_has_needclearcache();
}
inline ::google::protobuf::int32 GCRefreshSnowBossActitivy::needclearcache() const {
  // @@protoc_insertion_point(field_get:GCRefreshSnowBossActitivy.needClearCache)
  return needclearcache_;
}
inline void GCRefreshSnowBossActitivy::set_needclearcache(::google::protobuf::int32 value) {
  set_has_needclearcache();
  needclearcache_ = value;
  // @@protoc_insertion_point(field_set:GCRefreshSnowBossActitivy.needClearCache)
}

// optional int64 canEnterTime = 8;
inline bool GCRefreshSnowBossActitivy::has_canentertime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GCRefreshSnowBossActitivy::set_has_canentertime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GCRefreshSnowBossActitivy::clear_has_canentertime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GCRefreshSnowBossActitivy::clear_canentertime() {
  canentertime_ = GOOGLE_LONGLONG(0);
  clear_has_canentertime();
}
inline ::google::protobuf::int64 GCRefreshSnowBossActitivy::canentertime() const {
  // @@protoc_insertion_point(field_get:GCRefreshSnowBossActitivy.canEnterTime)
  return canentertime_;
}
inline void GCRefreshSnowBossActitivy::set_canentertime(::google::protobuf::int64 value) {
  set_has_canentertime();
  canentertime_ = value;
  // @@protoc_insertion_point(field_set:GCRefreshSnowBossActitivy.canEnterTime)
}

// optional int32 bossid = 9;
inline bool GCRefreshSnowBossActitivy::has_bossid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GCRefreshSnowBossActitivy::set_has_bossid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GCRefreshSnowBossActitivy::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GCRefreshSnowBossActitivy::clear_bossid() {
  bossid_ = 0;
  clear_has_bossid();
}
inline ::google::protobuf::int32 GCRefreshSnowBossActitivy::bossid() const {
  // @@protoc_insertion_point(field_get:GCRefreshSnowBossActitivy.bossid)
  return bossid_;
}
inline void GCRefreshSnowBossActitivy::set_bossid(::google::protobuf::int32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:GCRefreshSnowBossActitivy.bossid)
}

// optional string position = 10;
inline bool GCRefreshSnowBossActitivy::has_position() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GCRefreshSnowBossActitivy::set_has_position() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GCRefreshSnowBossActitivy::clear_has_position() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GCRefreshSnowBossActitivy::clear_position() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& GCRefreshSnowBossActitivy::position() const {
  // @@protoc_insertion_point(field_get:GCRefreshSnowBossActitivy.position)
  return *position_;
}
inline void GCRefreshSnowBossActitivy::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set:GCRefreshSnowBossActitivy.position)
}
inline void GCRefreshSnowBossActitivy::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCRefreshSnowBossActitivy.position)
}
inline void GCRefreshSnowBossActitivy::set_position(const char* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCRefreshSnowBossActitivy.position)
}
inline ::std::string* GCRefreshSnowBossActitivy::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCRefreshSnowBossActitivy.position)
  return position_;
}
inline ::std::string* GCRefreshSnowBossActitivy::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCRefreshSnowBossActitivy::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCRefreshSnowBossActitivy.position)
}

// optional string rotation = 11;
inline bool GCRefreshSnowBossActitivy::has_rotation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GCRefreshSnowBossActitivy::set_has_rotation() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GCRefreshSnowBossActitivy::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GCRefreshSnowBossActitivy::clear_rotation() {
  if (rotation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotation_->clear();
  }
  clear_has_rotation();
}
inline const ::std::string& GCRefreshSnowBossActitivy::rotation() const {
  // @@protoc_insertion_point(field_get:GCRefreshSnowBossActitivy.rotation)
  return *rotation_;
}
inline void GCRefreshSnowBossActitivy::set_rotation(const ::std::string& value) {
  set_has_rotation();
  if (rotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotation_ = new ::std::string;
  }
  rotation_->assign(value);
  // @@protoc_insertion_point(field_set:GCRefreshSnowBossActitivy.rotation)
}
inline void GCRefreshSnowBossActitivy::set_rotation(const char* value) {
  set_has_rotation();
  if (rotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotation_ = new ::std::string;
  }
  rotation_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCRefreshSnowBossActitivy.rotation)
}
inline void GCRefreshSnowBossActitivy::set_rotation(const char* value, size_t size) {
  set_has_rotation();
  if (rotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotation_ = new ::std::string;
  }
  rotation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCRefreshSnowBossActitivy.rotation)
}
inline ::std::string* GCRefreshSnowBossActitivy::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCRefreshSnowBossActitivy.rotation)
  return rotation_;
}
inline ::std::string* GCRefreshSnowBossActitivy::release_rotation() {
  clear_has_rotation();
  if (rotation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rotation_;
    rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCRefreshSnowBossActitivy::set_allocated_rotation(::std::string* rotation) {
  if (rotation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rotation_;
  }
  if (rotation) {
    set_has_rotation();
    rotation_ = rotation;
  } else {
    clear_has_rotation();
    rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCRefreshSnowBossActitivy.rotation)
}

// optional string scale = 12;
inline bool GCRefreshSnowBossActitivy::has_scale() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GCRefreshSnowBossActitivy::set_has_scale() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GCRefreshSnowBossActitivy::clear_has_scale() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GCRefreshSnowBossActitivy::clear_scale() {
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_->clear();
  }
  clear_has_scale();
}
inline const ::std::string& GCRefreshSnowBossActitivy::scale() const {
  // @@protoc_insertion_point(field_get:GCRefreshSnowBossActitivy.scale)
  return *scale_;
}
inline void GCRefreshSnowBossActitivy::set_scale(const ::std::string& value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
  // @@protoc_insertion_point(field_set:GCRefreshSnowBossActitivy.scale)
}
inline void GCRefreshSnowBossActitivy::set_scale(const char* value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCRefreshSnowBossActitivy.scale)
}
inline void GCRefreshSnowBossActitivy::set_scale(const char* value, size_t size) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCRefreshSnowBossActitivy.scale)
}
inline ::std::string* GCRefreshSnowBossActitivy::mutable_scale() {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCRefreshSnowBossActitivy.scale)
  return scale_;
}
inline ::std::string* GCRefreshSnowBossActitivy::release_scale() {
  clear_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scale_;
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCRefreshSnowBossActitivy::set_allocated_scale(::std::string* scale) {
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scale_;
  }
  if (scale) {
    set_has_scale();
    scale_ = scale;
  } else {
    clear_has_scale();
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCRefreshSnowBossActitivy.scale)
}

// -------------------------------------------------------------------

// CGRefreshSnowActivityData

// optional int32 type = 1;
inline bool CGRefreshSnowActivityData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGRefreshSnowActivityData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGRefreshSnowActivityData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGRefreshSnowActivityData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGRefreshSnowActivityData::type() const {
  // @@protoc_insertion_point(field_get:CGRefreshSnowActivityData.type)
  return type_;
}
inline void CGRefreshSnowActivityData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGRefreshSnowActivityData.type)
}

// -------------------------------------------------------------------

// FightRankInfo

// optional int32 rank = 1;
inline bool FightRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightRankInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FightRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:FightRankInfo.rank)
  return rank_;
}
inline void FightRankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:FightRankInfo.rank)
}

// optional string playerName = 2;
inline bool FightRankInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightRankInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightRankInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightRankInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& FightRankInfo::playername() const {
  // @@protoc_insertion_point(field_get:FightRankInfo.playerName)
  return *playername_;
}
inline void FightRankInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:FightRankInfo.playerName)
}
inline void FightRankInfo::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:FightRankInfo.playerName)
}
inline void FightRankInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FightRankInfo.playerName)
}
inline ::std::string* FightRankInfo::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FightRankInfo.playerName)
  return playername_;
}
inline ::std::string* FightRankInfo::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FightRankInfo::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FightRankInfo.playerName)
}

// optional int32 damage = 3;
inline bool FightRankInfo::has_damage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightRankInfo::set_has_damage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightRankInfo::clear_has_damage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightRankInfo::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 FightRankInfo::damage() const {
  // @@protoc_insertion_point(field_get:FightRankInfo.damage)
  return damage_;
}
inline void FightRankInfo::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:FightRankInfo.damage)
}

// -------------------------------------------------------------------

// GCRefreshFightRankList

// optional int32 myRank = 1;
inline bool GCRefreshFightRankList::has_myrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCRefreshFightRankList::set_has_myrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCRefreshFightRankList::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCRefreshFightRankList::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 GCRefreshFightRankList::myrank() const {
  // @@protoc_insertion_point(field_get:GCRefreshFightRankList.myRank)
  return myrank_;
}
inline void GCRefreshFightRankList::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:GCRefreshFightRankList.myRank)
}

// optional int32 myDamage = 2;
inline bool GCRefreshFightRankList::has_mydamage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCRefreshFightRankList::set_has_mydamage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCRefreshFightRankList::clear_has_mydamage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCRefreshFightRankList::clear_mydamage() {
  mydamage_ = 0;
  clear_has_mydamage();
}
inline ::google::protobuf::int32 GCRefreshFightRankList::mydamage() const {
  // @@protoc_insertion_point(field_get:GCRefreshFightRankList.myDamage)
  return mydamage_;
}
inline void GCRefreshFightRankList::set_mydamage(::google::protobuf::int32 value) {
  set_has_mydamage();
  mydamage_ = value;
  // @@protoc_insertion_point(field_set:GCRefreshFightRankList.myDamage)
}

// repeated .FightRankInfo rankList = 3;
inline int GCRefreshFightRankList::ranklist_size() const {
  return ranklist_.size();
}
inline void GCRefreshFightRankList::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::FightRankInfo& GCRefreshFightRankList::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:GCRefreshFightRankList.rankList)
  return ranklist_.Get(index);
}
inline ::FightRankInfo* GCRefreshFightRankList::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:GCRefreshFightRankList.rankList)
  return ranklist_.Mutable(index);
}
inline ::FightRankInfo* GCRefreshFightRankList::add_ranklist() {
  // @@protoc_insertion_point(field_add:GCRefreshFightRankList.rankList)
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FightRankInfo >&
GCRefreshFightRankList::ranklist() const {
  // @@protoc_insertion_point(field_list:GCRefreshFightRankList.rankList)
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::FightRankInfo >*
GCRefreshFightRankList::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:GCRefreshFightRankList.rankList)
  return &ranklist_;
}

// -------------------------------------------------------------------

// RankRewardsInfo

// optional string ranks = 1;
inline bool RankRewardsInfo::has_ranks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankRewardsInfo::set_has_ranks() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankRewardsInfo::clear_has_ranks() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankRewardsInfo::clear_ranks() {
  if (ranks_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ranks_->clear();
  }
  clear_has_ranks();
}
inline const ::std::string& RankRewardsInfo::ranks() const {
  // @@protoc_insertion_point(field_get:RankRewardsInfo.ranks)
  return *ranks_;
}
inline void RankRewardsInfo::set_ranks(const ::std::string& value) {
  set_has_ranks();
  if (ranks_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ranks_ = new ::std::string;
  }
  ranks_->assign(value);
  // @@protoc_insertion_point(field_set:RankRewardsInfo.ranks)
}
inline void RankRewardsInfo::set_ranks(const char* value) {
  set_has_ranks();
  if (ranks_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ranks_ = new ::std::string;
  }
  ranks_->assign(value);
  // @@protoc_insertion_point(field_set_char:RankRewardsInfo.ranks)
}
inline void RankRewardsInfo::set_ranks(const char* value, size_t size) {
  set_has_ranks();
  if (ranks_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ranks_ = new ::std::string;
  }
  ranks_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RankRewardsInfo.ranks)
}
inline ::std::string* RankRewardsInfo::mutable_ranks() {
  set_has_ranks();
  if (ranks_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ranks_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RankRewardsInfo.ranks)
  return ranks_;
}
inline ::std::string* RankRewardsInfo::release_ranks() {
  clear_has_ranks();
  if (ranks_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ranks_;
    ranks_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RankRewardsInfo::set_allocated_ranks(::std::string* ranks) {
  if (ranks_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ranks_;
  }
  if (ranks) {
    set_has_ranks();
    ranks_ = ranks;
  } else {
    clear_has_ranks();
    ranks_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RankRewardsInfo.ranks)
}

// repeated .Iteminfo rewards = 2;
inline int RankRewardsInfo::rewards_size() const {
  return rewards_.size();
}
inline void RankRewardsInfo::clear_rewards() {
  rewards_.Clear();
}
inline const ::Iteminfo& RankRewardsInfo::rewards(int index) const {
  // @@protoc_insertion_point(field_get:RankRewardsInfo.rewards)
  return rewards_.Get(index);
}
inline ::Iteminfo* RankRewardsInfo::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:RankRewardsInfo.rewards)
  return rewards_.Mutable(index);
}
inline ::Iteminfo* RankRewardsInfo::add_rewards() {
  // @@protoc_insertion_point(field_add:RankRewardsInfo.rewards)
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Iteminfo >&
RankRewardsInfo::rewards() const {
  // @@protoc_insertion_point(field_list:RankRewardsInfo.rewards)
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::Iteminfo >*
RankRewardsInfo::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:RankRewardsInfo.rewards)
  return &rewards_;
}

// -------------------------------------------------------------------

// GCRefreshRankRewardsList

// repeated .RankRewardsInfo rewardList = 1;
inline int GCRefreshRankRewardsList::rewardlist_size() const {
  return rewardlist_.size();
}
inline void GCRefreshRankRewardsList::clear_rewardlist() {
  rewardlist_.Clear();
}
inline const ::RankRewardsInfo& GCRefreshRankRewardsList::rewardlist(int index) const {
  // @@protoc_insertion_point(field_get:GCRefreshRankRewardsList.rewardList)
  return rewardlist_.Get(index);
}
inline ::RankRewardsInfo* GCRefreshRankRewardsList::mutable_rewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:GCRefreshRankRewardsList.rewardList)
  return rewardlist_.Mutable(index);
}
inline ::RankRewardsInfo* GCRefreshRankRewardsList::add_rewardlist() {
  // @@protoc_insertion_point(field_add:GCRefreshRankRewardsList.rewardList)
  return rewardlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RankRewardsInfo >&
GCRefreshRankRewardsList::rewardlist() const {
  // @@protoc_insertion_point(field_list:GCRefreshRankRewardsList.rewardList)
  return rewardlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::RankRewardsInfo >*
GCRefreshRankRewardsList::mutable_rewardlist() {
  // @@protoc_insertion_point(field_mutable_list:GCRefreshRankRewardsList.rewardList)
  return &rewardlist_;
}

// -------------------------------------------------------------------

// CGOperSnowBoss

// optional int32 oper = 1;
inline bool CGOperSnowBoss::has_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGOperSnowBoss::set_has_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGOperSnowBoss::clear_has_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGOperSnowBoss::clear_oper() {
  oper_ = 0;
  clear_has_oper();
}
inline ::google::protobuf::int32 CGOperSnowBoss::oper() const {
  // @@protoc_insertion_point(field_get:CGOperSnowBoss.oper)
  return oper_;
}
inline void CGOperSnowBoss::set_oper(::google::protobuf::int32 value) {
  set_has_oper();
  oper_ = value;
  // @@protoc_insertion_point(field_set:CGOperSnowBoss.oper)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SnowManMessage_2eproto__INCLUDED
