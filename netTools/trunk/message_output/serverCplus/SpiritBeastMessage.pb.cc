// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SpiritBeastMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SpiritBeastMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SpiritBeastInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiritBeastInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpiritBeastAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiritBeastAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpiritBeastSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiritBeastSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpiritBeastShouLingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiritBeastShouLingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpiritBeastInUnite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiritBeastInUnite_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpiritBeastUniteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiritBeastUniteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSpiritBeastOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSpiritBeastOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSpiritBeastOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSpiritBeastOperateResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSpiritBeastInherit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSpiritBeastInherit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSpiritBeastInheritResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSpiritBeastInheritResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSpiritBeastLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSpiritBeastLevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSpiritBeastLevelUpResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSpiritBeastLevelUpResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSpiritBeastOperateSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSpiritBeastOperateSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSpiritBeastOperateSkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSpiritBeastOperateSkillResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSpiritBeastUniteOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSpiritBeastUniteOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSpiritBeastUniteOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSpiritBeastUniteOperateResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSpiritBeastFree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSpiritBeastFree_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSpiritBeastFreeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSpiritBeastFreeResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSpiritBeastBreed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSpiritBeastBreed_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSpiritBeastBreedResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSpiritBeastBreedResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSpiritBeastHatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSpiritBeastHatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSpiritBeastHatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSpiritBeastHatchResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSpiritBeastRelive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSpiritBeastRelive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSpiritBeastCatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSpiritBeastCatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSpiritBeastCatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSpiritBeastCatchResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SpiritBeastMessage_2eproto() {
  protobuf_AddDesc_SpiritBeastMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SpiritBeastMessage.proto");
  GOOGLE_CHECK(file != NULL);
  SpiritBeastInfo_descriptor_ = file->message_type(0);
  static const int SpiritBeastInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInfo, growthlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInfo, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInfo, generations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInfo, nowexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInfo, savvylv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInfo, attlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInfo, skilllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInfo, relivetime_),
  };
  SpiritBeastInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpiritBeastInfo_descriptor_,
      SpiritBeastInfo::default_instance_,
      SpiritBeastInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpiritBeastInfo));
  SpiritBeastAttr_descriptor_ = file->message_type(1);
  static const int SpiritBeastAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastAttr, attrkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastAttr, growupvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastAttr, viewflag_),
  };
  SpiritBeastAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpiritBeastAttr_descriptor_,
      SpiritBeastAttr::default_instance_,
      SpiritBeastAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpiritBeastAttr));
  SpiritBeastSkillInfo_descriptor_ = file->message_type(2);
  static const int SpiritBeastSkillInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastSkillInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastSkillInfo, skilllevel_),
  };
  SpiritBeastSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpiritBeastSkillInfo_descriptor_,
      SpiritBeastSkillInfo::default_instance_,
      SpiritBeastSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpiritBeastSkillInfo));
  SpiritBeastShouLingInfo_descriptor_ = file->message_type(3);
  static const int SpiritBeastShouLingInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastShouLingInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastShouLingInfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastShouLingInfo, level_),
  };
  SpiritBeastShouLingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpiritBeastShouLingInfo_descriptor_,
      SpiritBeastShouLingInfo::default_instance_,
      SpiritBeastShouLingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastShouLingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastShouLingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpiritBeastShouLingInfo));
  SpiritBeastInUnite_descriptor_ = file->message_type(4);
  static const int SpiritBeastInUnite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInUnite, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInUnite, sbinfo_),
  };
  SpiritBeastInUnite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpiritBeastInUnite_descriptor_,
      SpiritBeastInUnite::default_instance_,
      SpiritBeastInUnite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInUnite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastInUnite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpiritBeastInUnite));
  SpiritBeastUniteInfo_descriptor_ = file->message_type(5);
  static const int SpiritBeastUniteInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastUniteInfo, zhenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastUniteInfo, sbinunite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastUniteInfo, sbshouling_),
  };
  SpiritBeastUniteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpiritBeastUniteInfo_descriptor_,
      SpiritBeastUniteInfo::default_instance_,
      SpiritBeastUniteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastUniteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritBeastUniteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpiritBeastUniteInfo));
  CGSpiritBeastOperate_descriptor_ = file->message_type(6);
  static const int CGSpiritBeastOperate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastOperate, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastOperate, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastOperate, offpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastOperate, developtype_),
  };
  CGSpiritBeastOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSpiritBeastOperate_descriptor_,
      CGSpiritBeastOperate::default_instance_,
      CGSpiritBeastOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSpiritBeastOperate));
  GCSpiritBeastOperateResult_descriptor_ = file->message_type(7);
  static const int GCSpiritBeastOperateResult_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateResult, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateResult, sbinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateResult, petfight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateResult, battlearray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateResult, sbunite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateResult, receivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateResult, remainnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateResult, lucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateResult, breedresult_),
  };
  GCSpiritBeastOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSpiritBeastOperateResult_descriptor_,
      GCSpiritBeastOperateResult::default_instance_,
      GCSpiritBeastOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSpiritBeastOperateResult));
  CGSpiritBeastInherit_descriptor_ = file->message_type(8);
  static const int CGSpiritBeastInherit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastInherit, targetpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastInherit, stuffpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastInherit, issavvy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastInherit, isskill_),
  };
  CGSpiritBeastInherit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSpiritBeastInherit_descriptor_,
      CGSpiritBeastInherit::default_instance_,
      CGSpiritBeastInherit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastInherit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastInherit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSpiritBeastInherit));
  GCSpiritBeastInheritResult_descriptor_ = file->message_type(9);
  static const int GCSpiritBeastInheritResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastInheritResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastInheritResult, stuffpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastInheritResult, sbinfo_),
  };
  GCSpiritBeastInheritResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSpiritBeastInheritResult_descriptor_,
      GCSpiritBeastInheritResult::default_instance_,
      GCSpiritBeastInheritResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastInheritResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastInheritResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSpiritBeastInheritResult));
  CGSpiritBeastLevelUp_descriptor_ = file->message_type(10);
  static const int CGSpiritBeastLevelUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastLevelUp, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastLevelUp, pelletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastLevelUp, pelletnum_),
  };
  CGSpiritBeastLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSpiritBeastLevelUp_descriptor_,
      CGSpiritBeastLevelUp::default_instance_,
      CGSpiritBeastLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSpiritBeastLevelUp));
  GCSpiritBeastLevelUpResult_descriptor_ = file->message_type(11);
  static const int GCSpiritBeastLevelUpResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastLevelUpResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastLevelUpResult, sbinfo_),
  };
  GCSpiritBeastLevelUpResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSpiritBeastLevelUpResult_descriptor_,
      GCSpiritBeastLevelUpResult::default_instance_,
      GCSpiritBeastLevelUpResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastLevelUpResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastLevelUpResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSpiritBeastLevelUpResult));
  CGSpiritBeastOperateSkill_descriptor_ = file->message_type(12);
  static const int CGSpiritBeastOperateSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastOperateSkill, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastOperateSkill, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastOperateSkill, targetid_),
  };
  CGSpiritBeastOperateSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSpiritBeastOperateSkill_descriptor_,
      CGSpiritBeastOperateSkill::default_instance_,
      CGSpiritBeastOperateSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastOperateSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastOperateSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSpiritBeastOperateSkill));
  GCSpiritBeastOperateSkillResult_descriptor_ = file->message_type(13);
  static const int GCSpiritBeastOperateSkillResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateSkillResult, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateSkillResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateSkillResult, sbinfo_),
  };
  GCSpiritBeastOperateSkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSpiritBeastOperateSkillResult_descriptor_,
      GCSpiritBeastOperateSkillResult::default_instance_,
      GCSpiritBeastOperateSkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateSkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastOperateSkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSpiritBeastOperateSkillResult));
  CGSpiritBeastUniteOperate_descriptor_ = file->message_type(14);
  static const int CGSpiritBeastUniteOperate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastUniteOperate, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastUniteOperate, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastUniteOperate, zhenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastUniteOperate, posid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastUniteOperate, pid_),
  };
  CGSpiritBeastUniteOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSpiritBeastUniteOperate_descriptor_,
      CGSpiritBeastUniteOperate::default_instance_,
      CGSpiritBeastUniteOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastUniteOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastUniteOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSpiritBeastUniteOperate));
  GCSpiritBeastUniteOperateResult_descriptor_ = file->message_type(15);
  static const int GCSpiritBeastUniteOperateResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastUniteOperateResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastUniteOperateResult, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastUniteOperateResult, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastUniteOperateResult, sbunite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastUniteOperateResult, sbinfo_),
  };
  GCSpiritBeastUniteOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSpiritBeastUniteOperateResult_descriptor_,
      GCSpiritBeastUniteOperateResult::default_instance_,
      GCSpiritBeastUniteOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastUniteOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastUniteOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSpiritBeastUniteOperateResult));
  CGSpiritBeastFree_descriptor_ = file->message_type(16);
  static const int CGSpiritBeastFree_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastFree, pid_),
  };
  CGSpiritBeastFree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSpiritBeastFree_descriptor_,
      CGSpiritBeastFree::default_instance_,
      CGSpiritBeastFree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastFree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastFree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSpiritBeastFree));
  GCSpiritBeastFreeResult_descriptor_ = file->message_type(17);
  static const int GCSpiritBeastFreeResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastFreeResult, pid_),
  };
  GCSpiritBeastFreeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSpiritBeastFreeResult_descriptor_,
      GCSpiritBeastFreeResult::default_instance_,
      GCSpiritBeastFreeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastFreeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastFreeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSpiritBeastFreeResult));
  CGSpiritBeastBreed_descriptor_ = file->message_type(18);
  static const int CGSpiritBeastBreed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastBreed, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastBreed, breedtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastBreed, pid_),
  };
  CGSpiritBeastBreed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSpiritBeastBreed_descriptor_,
      CGSpiritBeastBreed::default_instance_,
      CGSpiritBeastBreed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastBreed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastBreed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSpiritBeastBreed));
  GCSpiritBeastBreedResult_descriptor_ = file->message_type(19);
  static const int GCSpiritBeastBreedResult_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastBreedResult, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastBreedResult, breedtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastBreedResult, objecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastBreedResult, sbinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastBreedResult, receivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastBreedResult, objectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastBreedResult, lucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastBreedResult, breedresult_),
  };
  GCSpiritBeastBreedResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSpiritBeastBreedResult_descriptor_,
      GCSpiritBeastBreedResult::default_instance_,
      GCSpiritBeastBreedResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastBreedResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastBreedResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSpiritBeastBreedResult));
  CGSpiritBeastHatch_descriptor_ = file->message_type(20);
  static const int CGSpiritBeastHatch_offsets_[1] = {
  };
  CGSpiritBeastHatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSpiritBeastHatch_descriptor_,
      CGSpiritBeastHatch::default_instance_,
      CGSpiritBeastHatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastHatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastHatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSpiritBeastHatch));
  GCSpiritBeastHatchResult_descriptor_ = file->message_type(21);
  static const int GCSpiritBeastHatchResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastHatchResult, sbinfo_),
  };
  GCSpiritBeastHatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSpiritBeastHatchResult_descriptor_,
      GCSpiritBeastHatchResult::default_instance_,
      GCSpiritBeastHatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastHatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastHatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSpiritBeastHatchResult));
  GCSpiritBeastRelive_descriptor_ = file->message_type(22);
  static const int GCSpiritBeastRelive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastRelive, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastRelive, relivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastRelive, fightpid_),
  };
  GCSpiritBeastRelive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSpiritBeastRelive_descriptor_,
      GCSpiritBeastRelive::default_instance_,
      GCSpiritBeastRelive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastRelive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastRelive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSpiritBeastRelive));
  CGSpiritBeastCatch_descriptor_ = file->message_type(23);
  static const int CGSpiritBeastCatch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastCatch, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastCatch, pid_),
  };
  CGSpiritBeastCatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSpiritBeastCatch_descriptor_,
      CGSpiritBeastCatch::default_instance_,
      CGSpiritBeastCatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastCatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSpiritBeastCatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSpiritBeastCatch));
  GCSpiritBeastCatchResult_descriptor_ = file->message_type(24);
  static const int GCSpiritBeastCatchResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastCatchResult, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastCatchResult, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastCatchResult, playerpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastCatchResult, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastCatchResult, sbinfo_),
  };
  GCSpiritBeastCatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSpiritBeastCatchResult_descriptor_,
      GCSpiritBeastCatchResult::default_instance_,
      GCSpiritBeastCatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastCatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSpiritBeastCatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSpiritBeastCatchResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SpiritBeastMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpiritBeastInfo_descriptor_, &SpiritBeastInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpiritBeastAttr_descriptor_, &SpiritBeastAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpiritBeastSkillInfo_descriptor_, &SpiritBeastSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpiritBeastShouLingInfo_descriptor_, &SpiritBeastShouLingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpiritBeastInUnite_descriptor_, &SpiritBeastInUnite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpiritBeastUniteInfo_descriptor_, &SpiritBeastUniteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSpiritBeastOperate_descriptor_, &CGSpiritBeastOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSpiritBeastOperateResult_descriptor_, &GCSpiritBeastOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSpiritBeastInherit_descriptor_, &CGSpiritBeastInherit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSpiritBeastInheritResult_descriptor_, &GCSpiritBeastInheritResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSpiritBeastLevelUp_descriptor_, &CGSpiritBeastLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSpiritBeastLevelUpResult_descriptor_, &GCSpiritBeastLevelUpResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSpiritBeastOperateSkill_descriptor_, &CGSpiritBeastOperateSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSpiritBeastOperateSkillResult_descriptor_, &GCSpiritBeastOperateSkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSpiritBeastUniteOperate_descriptor_, &CGSpiritBeastUniteOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSpiritBeastUniteOperateResult_descriptor_, &GCSpiritBeastUniteOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSpiritBeastFree_descriptor_, &CGSpiritBeastFree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSpiritBeastFreeResult_descriptor_, &GCSpiritBeastFreeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSpiritBeastBreed_descriptor_, &CGSpiritBeastBreed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSpiritBeastBreedResult_descriptor_, &GCSpiritBeastBreedResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSpiritBeastHatch_descriptor_, &CGSpiritBeastHatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSpiritBeastHatchResult_descriptor_, &GCSpiritBeastHatchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSpiritBeastRelive_descriptor_, &GCSpiritBeastRelive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSpiritBeastCatch_descriptor_, &CGSpiritBeastCatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSpiritBeastCatchResult_descriptor_, &GCSpiritBeastCatchResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SpiritBeastMessage_2eproto() {
  delete SpiritBeastInfo::default_instance_;
  delete SpiritBeastInfo_reflection_;
  delete SpiritBeastAttr::default_instance_;
  delete SpiritBeastAttr_reflection_;
  delete SpiritBeastSkillInfo::default_instance_;
  delete SpiritBeastSkillInfo_reflection_;
  delete SpiritBeastShouLingInfo::default_instance_;
  delete SpiritBeastShouLingInfo_reflection_;
  delete SpiritBeastInUnite::default_instance_;
  delete SpiritBeastInUnite_reflection_;
  delete SpiritBeastUniteInfo::default_instance_;
  delete SpiritBeastUniteInfo_reflection_;
  delete CGSpiritBeastOperate::default_instance_;
  delete CGSpiritBeastOperate_reflection_;
  delete GCSpiritBeastOperateResult::default_instance_;
  delete GCSpiritBeastOperateResult_reflection_;
  delete CGSpiritBeastInherit::default_instance_;
  delete CGSpiritBeastInherit_reflection_;
  delete GCSpiritBeastInheritResult::default_instance_;
  delete GCSpiritBeastInheritResult_reflection_;
  delete CGSpiritBeastLevelUp::default_instance_;
  delete CGSpiritBeastLevelUp_reflection_;
  delete GCSpiritBeastLevelUpResult::default_instance_;
  delete GCSpiritBeastLevelUpResult_reflection_;
  delete CGSpiritBeastOperateSkill::default_instance_;
  delete CGSpiritBeastOperateSkill_reflection_;
  delete GCSpiritBeastOperateSkillResult::default_instance_;
  delete GCSpiritBeastOperateSkillResult_reflection_;
  delete CGSpiritBeastUniteOperate::default_instance_;
  delete CGSpiritBeastUniteOperate_reflection_;
  delete GCSpiritBeastUniteOperateResult::default_instance_;
  delete GCSpiritBeastUniteOperateResult_reflection_;
  delete CGSpiritBeastFree::default_instance_;
  delete CGSpiritBeastFree_reflection_;
  delete GCSpiritBeastFreeResult::default_instance_;
  delete GCSpiritBeastFreeResult_reflection_;
  delete CGSpiritBeastBreed::default_instance_;
  delete CGSpiritBeastBreed_reflection_;
  delete GCSpiritBeastBreedResult::default_instance_;
  delete GCSpiritBeastBreedResult_reflection_;
  delete CGSpiritBeastHatch::default_instance_;
  delete CGSpiritBeastHatch_reflection_;
  delete GCSpiritBeastHatchResult::default_instance_;
  delete GCSpiritBeastHatchResult_reflection_;
  delete GCSpiritBeastRelive::default_instance_;
  delete GCSpiritBeastRelive_reflection_;
  delete CGSpiritBeastCatch::default_instance_;
  delete CGSpiritBeastCatch_reflection_;
  delete GCSpiritBeastCatchResult::default_instance_;
  delete GCSpiritBeastCatchResult_reflection_;
}

void protobuf_AddDesc_SpiritBeastMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030SpiritBeastMessage.proto\"\363\001\n\017SpiritBea"
    "stInfo\022\013\n\003pid\030\001 \001(\003\022\013\n\003sid\030\002 \001(\005\022\020\n\010grow"
    "thLv\030\003 \001(\005\022\016\n\006starLv\030\004 \001(\005\022\r\n\005level\030\005 \001("
    "\005\022\023\n\013generations\030\006 \001(\005\022\016\n\006nowexp\030\007 \001(\003\022\017"
    "\n\007savvyLv\030\010 \001(\005\022!\n\007attlist\030\t \003(\0132\020.Spiri"
    "tBeastAttr\022(\n\tskilllist\030\n \003(\0132\025.SpiritBe"
    "astSkillInfo\022\022\n\nreliveTime\030\013 \001(\003\"I\n\017Spir"
    "itBeastAttr\022\017\n\007attrkey\030\001 \001(\005\022\023\n\013growupva"
    "lue\030\002 \001(\005\022\020\n\010viewflag\030\003 \001(\005\";\n\024SpiritBea"
    "stSkillInfo\022\017\n\007skillID\030\001 \001(\005\022\022\n\nskillLev"
    "el\030\002 \001(\005\"B\n\027SpiritBeastShouLingInfo\022\013\n\003p"
    "os\030\001 \001(\005\022\013\n\003sid\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\"C\n\022"
    "SpiritBeastInUnite\022\013\n\003pos\030\001 \001(\005\022 \n\006sbInf"
    "o\030\002 \001(\0132\020.SpiritBeastInfo\"|\n\024SpiritBeast"
    "UniteInfo\022\016\n\006zhenID\030\001 \001(\005\022&\n\tsbInUnite\030\002"
    " \003(\0132\023.SpiritBeastInUnite\022,\n\nsbShouling\030"
    "\003 \003(\0132\030.SpiritBeastShouLingInfo\"Y\n\024CGSpi"
    "ritBeastOperate\022\017\n\007operate\030\001 \001(\005\022\013\n\003pid\030"
    "\002 \001(\003\022\016\n\006offPid\030\003 \001(\003\022\023\n\013developType\030\004 \001"
    "(\005\"\372\001\n\032GCSpiritBeastOperateResult\022\017\n\007ope"
    "rate\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\022 \n\006sbInfo\030\003 \003"
    "(\0132\020.SpiritBeastInfo\022\020\n\010petFight\030\004 \001(\003\022\023"
    "\n\013battleArray\030\005 \003(\003\022&\n\007sbUnite\030\006 \003(\0132\025.S"
    "piritBeastUniteInfo\022\023\n\013receiveTime\030\007 \001(\003"
    "\022\021\n\tremainNum\030\010 \001(\005\022\r\n\005lucky\030\t \001(\005\022\023\n\013br"
    "eedResult\030\n \001(\t\"]\n\024CGSpiritBeastInherit\022"
    "\021\n\ttargetPid\030\001 \001(\003\022\020\n\010stuffPid\030\002 \001(\003\022\017\n\007"
    "isSavvy\030\003 \001(\005\022\017\n\007isSkill\030\004 \001(\005\"`\n\032GCSpir"
    "itBeastInheritResult\022\016\n\006result\030\001 \001(\005\022\020\n\010"
    "stuffPid\030\002 \001(\003\022 \n\006sbInfo\030\003 \001(\0132\020.SpiritB"
    "eastInfo\"H\n\024CGSpiritBeastLevelUp\022\013\n\003pid\030"
    "\001 \001(\003\022\020\n\010pelletID\030\002 \001(\005\022\021\n\tpelletNum\030\003 \001"
    "(\005\"N\n\032GCSpiritBeastLevelUpResult\022\016\n\006resu"
    "lt\030\001 \001(\005\022 \n\006sbInfo\030\002 \001(\0132\020.SpiritBeastIn"
    "fo\"K\n\031CGSpiritBeastOperateSkill\022\017\n\007opera"
    "te\030\001 \001(\005\022\013\n\003pid\030\002 \001(\003\022\020\n\010targetID\030\003 \001(\005\""
    "d\n\037GCSpiritBeastOperateSkillResult\022\017\n\007op"
    "erate\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\022 \n\006sbInfo\030\003 "
    "\001(\0132\020.SpiritBeastInfo\"h\n\031CGSpiritBeastUn"
    "iteOperate\022\017\n\007operate\030\001 \001(\005\022\016\n\006target\030\002 "
    "\001(\005\022\016\n\006zhenID\030\003 \001(\005\022\r\n\005posID\030\004 \001(\005\022\013\n\003pi"
    "d\030\005 \001(\003\"\234\001\n\037GCSpiritBeastUniteOperateRes"
    "ult\022\016\n\006result\030\001 \001(\005\022\017\n\007operate\030\002 \001(\005\022\016\n\006"
    "target\030\003 \001(\005\022&\n\007sbUnite\030\004 \001(\0132\025.SpiritBe"
    "astUniteInfo\022 \n\006sbInfo\030\005 \001(\0132\020.SpiritBea"
    "stInfo\" \n\021CGSpiritBeastFree\022\013\n\003pid\030\001 \001(\003"
    "\"&\n\027GCSpiritBeastFreeResult\022\013\n\003pid\030\001 \001(\003"
    "\"E\n\022CGSpiritBeastBreed\022\017\n\007operate\030\001 \001(\005\022"
    "\021\n\tbreedType\030\002 \001(\005\022\013\n\003pid\030\003 \001(\003\"\301\001\n\030GCSp"
    "iritBeastBreedResult\022\017\n\007operate\030\001 \001(\005\022\021\n"
    "\tbreedType\030\002 \001(\005\022\022\n\nobjectType\030\003 \001(\005\022 \n\006"
    "sbInfo\030\004 \003(\0132\020.SpiritBeastInfo\022\023\n\013receiv"
    "eTime\030\005 \001(\003\022\022\n\nobjectName\030\006 \001(\t\022\r\n\005lucky"
    "\030\007 \001(\005\022\023\n\013breedResult\030\010 \001(\t\"\024\n\022CGSpiritB"
    "eastHatch\"<\n\030GCSpiritBeastHatchResult\022 \n"
    "\006sbInfo\030\001 \001(\0132\020.SpiritBeastInfo\"H\n\023GCSpi"
    "ritBeastRelive\022\013\n\003pid\030\001 \001(\003\022\022\n\nreliveTim"
    "e\030\002 \001(\003\022\020\n\010fightPid\030\003 \001(\003\"2\n\022CGSpiritBea"
    "stCatch\022\017\n\007operate\030\001 \001(\005\022\013\n\003pid\030\002 \001(\003\"{\n"
    "\030GCSpiritBeastCatchResult\022\017\n\007operate\030\001 \001"
    "(\005\022\013\n\003pid\030\002 \001(\003\022\021\n\tplayerPid\030\003 \001(\003\022\014\n\004ti"
    "me\030\004 \001(\005\022 \n\006sbInfo\030\005 \001(\0132\020.SpiritBeastIn"
    "foB\031\n\027com.mile.common.message", 2509);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SpiritBeastMessage.proto", &protobuf_RegisterTypes);
  SpiritBeastInfo::default_instance_ = new SpiritBeastInfo();
  SpiritBeastAttr::default_instance_ = new SpiritBeastAttr();
  SpiritBeastSkillInfo::default_instance_ = new SpiritBeastSkillInfo();
  SpiritBeastShouLingInfo::default_instance_ = new SpiritBeastShouLingInfo();
  SpiritBeastInUnite::default_instance_ = new SpiritBeastInUnite();
  SpiritBeastUniteInfo::default_instance_ = new SpiritBeastUniteInfo();
  CGSpiritBeastOperate::default_instance_ = new CGSpiritBeastOperate();
  GCSpiritBeastOperateResult::default_instance_ = new GCSpiritBeastOperateResult();
  CGSpiritBeastInherit::default_instance_ = new CGSpiritBeastInherit();
  GCSpiritBeastInheritResult::default_instance_ = new GCSpiritBeastInheritResult();
  CGSpiritBeastLevelUp::default_instance_ = new CGSpiritBeastLevelUp();
  GCSpiritBeastLevelUpResult::default_instance_ = new GCSpiritBeastLevelUpResult();
  CGSpiritBeastOperateSkill::default_instance_ = new CGSpiritBeastOperateSkill();
  GCSpiritBeastOperateSkillResult::default_instance_ = new GCSpiritBeastOperateSkillResult();
  CGSpiritBeastUniteOperate::default_instance_ = new CGSpiritBeastUniteOperate();
  GCSpiritBeastUniteOperateResult::default_instance_ = new GCSpiritBeastUniteOperateResult();
  CGSpiritBeastFree::default_instance_ = new CGSpiritBeastFree();
  GCSpiritBeastFreeResult::default_instance_ = new GCSpiritBeastFreeResult();
  CGSpiritBeastBreed::default_instance_ = new CGSpiritBeastBreed();
  GCSpiritBeastBreedResult::default_instance_ = new GCSpiritBeastBreedResult();
  CGSpiritBeastHatch::default_instance_ = new CGSpiritBeastHatch();
  GCSpiritBeastHatchResult::default_instance_ = new GCSpiritBeastHatchResult();
  GCSpiritBeastRelive::default_instance_ = new GCSpiritBeastRelive();
  CGSpiritBeastCatch::default_instance_ = new CGSpiritBeastCatch();
  GCSpiritBeastCatchResult::default_instance_ = new GCSpiritBeastCatchResult();
  SpiritBeastInfo::default_instance_->InitAsDefaultInstance();
  SpiritBeastAttr::default_instance_->InitAsDefaultInstance();
  SpiritBeastSkillInfo::default_instance_->InitAsDefaultInstance();
  SpiritBeastShouLingInfo::default_instance_->InitAsDefaultInstance();
  SpiritBeastInUnite::default_instance_->InitAsDefaultInstance();
  SpiritBeastUniteInfo::default_instance_->InitAsDefaultInstance();
  CGSpiritBeastOperate::default_instance_->InitAsDefaultInstance();
  GCSpiritBeastOperateResult::default_instance_->InitAsDefaultInstance();
  CGSpiritBeastInherit::default_instance_->InitAsDefaultInstance();
  GCSpiritBeastInheritResult::default_instance_->InitAsDefaultInstance();
  CGSpiritBeastLevelUp::default_instance_->InitAsDefaultInstance();
  GCSpiritBeastLevelUpResult::default_instance_->InitAsDefaultInstance();
  CGSpiritBeastOperateSkill::default_instance_->InitAsDefaultInstance();
  GCSpiritBeastOperateSkillResult::default_instance_->InitAsDefaultInstance();
  CGSpiritBeastUniteOperate::default_instance_->InitAsDefaultInstance();
  GCSpiritBeastUniteOperateResult::default_instance_->InitAsDefaultInstance();
  CGSpiritBeastFree::default_instance_->InitAsDefaultInstance();
  GCSpiritBeastFreeResult::default_instance_->InitAsDefaultInstance();
  CGSpiritBeastBreed::default_instance_->InitAsDefaultInstance();
  GCSpiritBeastBreedResult::default_instance_->InitAsDefaultInstance();
  CGSpiritBeastHatch::default_instance_->InitAsDefaultInstance();
  GCSpiritBeastHatchResult::default_instance_->InitAsDefaultInstance();
  GCSpiritBeastRelive::default_instance_->InitAsDefaultInstance();
  CGSpiritBeastCatch::default_instance_->InitAsDefaultInstance();
  GCSpiritBeastCatchResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SpiritBeastMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SpiritBeastMessage_2eproto {
  StaticDescriptorInitializer_SpiritBeastMessage_2eproto() {
    protobuf_AddDesc_SpiritBeastMessage_2eproto();
  }
} static_descriptor_initializer_SpiritBeastMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SpiritBeastInfo::kPidFieldNumber;
const int SpiritBeastInfo::kSidFieldNumber;
const int SpiritBeastInfo::kGrowthLvFieldNumber;
const int SpiritBeastInfo::kStarLvFieldNumber;
const int SpiritBeastInfo::kLevelFieldNumber;
const int SpiritBeastInfo::kGenerationsFieldNumber;
const int SpiritBeastInfo::kNowexpFieldNumber;
const int SpiritBeastInfo::kSavvyLvFieldNumber;
const int SpiritBeastInfo::kAttlistFieldNumber;
const int SpiritBeastInfo::kSkilllistFieldNumber;
const int SpiritBeastInfo::kReliveTimeFieldNumber;
#endif  // !_MSC_VER

SpiritBeastInfo::SpiritBeastInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpiritBeastInfo)
}

void SpiritBeastInfo::InitAsDefaultInstance() {
}

SpiritBeastInfo::SpiritBeastInfo(const SpiritBeastInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SpiritBeastInfo)
}

void SpiritBeastInfo::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  sid_ = 0;
  growthlv_ = 0;
  starlv_ = 0;
  level_ = 0;
  generations_ = 0;
  nowexp_ = GOOGLE_LONGLONG(0);
  savvylv_ = 0;
  relivetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpiritBeastInfo::~SpiritBeastInfo() {
  // @@protoc_insertion_point(destructor:SpiritBeastInfo)
  SharedDtor();
}

void SpiritBeastInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpiritBeastInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiritBeastInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiritBeastInfo_descriptor_;
}

const SpiritBeastInfo& SpiritBeastInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

SpiritBeastInfo* SpiritBeastInfo::default_instance_ = NULL;

SpiritBeastInfo* SpiritBeastInfo::New() const {
  return new SpiritBeastInfo;
}

void SpiritBeastInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpiritBeastInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(pid_, savvylv_);
  }
  relivetime_ = GOOGLE_LONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attlist_.Clear();
  skilllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpiritBeastInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpiritBeastInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional int32 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_growthLv;
        break;
      }

      // optional int32 growthLv = 3;
      case 3: {
        if (tag == 24) {
         parse_growthLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &growthlv_)));
          set_has_growthlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_starLv;
        break;
      }

      // optional int32 starLv = 4;
      case 4: {
        if (tag == 32) {
         parse_starLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_generations;
        break;
      }

      // optional int32 generations = 6;
      case 6: {
        if (tag == 48) {
         parse_generations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &generations_)));
          set_has_generations();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nowexp;
        break;
      }

      // optional int64 nowexp = 7;
      case 7: {
        if (tag == 56) {
         parse_nowexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nowexp_)));
          set_has_nowexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_savvyLv;
        break;
      }

      // optional int32 savvyLv = 8;
      case 8: {
        if (tag == 64) {
         parse_savvyLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &savvylv_)));
          set_has_savvylv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_attlist;
        break;
      }

      // repeated .SpiritBeastAttr attlist = 9;
      case 9: {
        if (tag == 74) {
         parse_attlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_attlist;
        if (input->ExpectTag(82)) goto parse_skilllist;
        break;
      }

      // repeated .SpiritBeastSkillInfo skilllist = 10;
      case 10: {
        if (tag == 82) {
         parse_skilllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilllist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_skilllist;
        if (input->ExpectTag(88)) goto parse_reliveTime;
        break;
      }

      // optional int64 reliveTime = 11;
      case 11: {
        if (tag == 88) {
         parse_reliveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &relivetime_)));
          set_has_relivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpiritBeastInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpiritBeastInfo)
  return false;
#undef DO_
}

void SpiritBeastInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpiritBeastInfo)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // optional int32 growthLv = 3;
  if (has_growthlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->growthlv(), output);
  }

  // optional int32 starLv = 4;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->starlv(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 generations = 6;
  if (has_generations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->generations(), output);
  }

  // optional int64 nowexp = 7;
  if (has_nowexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->nowexp(), output);
  }

  // optional int32 savvyLv = 8;
  if (has_savvylv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->savvylv(), output);
  }

  // repeated .SpiritBeastAttr attlist = 9;
  for (int i = 0; i < this->attlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attlist(i), output);
  }

  // repeated .SpiritBeastSkillInfo skilllist = 10;
  for (int i = 0; i < this->skilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->skilllist(i), output);
  }

  // optional int64 reliveTime = 11;
  if (has_relivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->relivetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpiritBeastInfo)
}

::google::protobuf::uint8* SpiritBeastInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpiritBeastInfo)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // optional int32 growthLv = 3;
  if (has_growthlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->growthlv(), target);
  }

  // optional int32 starLv = 4;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->starlv(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int32 generations = 6;
  if (has_generations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->generations(), target);
  }

  // optional int64 nowexp = 7;
  if (has_nowexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->nowexp(), target);
  }

  // optional int32 savvyLv = 8;
  if (has_savvylv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->savvylv(), target);
  }

  // repeated .SpiritBeastAttr attlist = 9;
  for (int i = 0; i < this->attlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attlist(i), target);
  }

  // repeated .SpiritBeastSkillInfo skilllist = 10;
  for (int i = 0; i < this->skilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->skilllist(i), target);
  }

  // optional int64 reliveTime = 11;
  if (has_relivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->relivetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpiritBeastInfo)
  return target;
}

int SpiritBeastInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 growthLv = 3;
    if (has_growthlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->growthlv());
    }

    // optional int32 starLv = 4;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starlv());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 generations = 6;
    if (has_generations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->generations());
    }

    // optional int64 nowexp = 7;
    if (has_nowexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nowexp());
    }

    // optional int32 savvyLv = 8;
    if (has_savvylv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->savvylv());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int64 reliveTime = 11;
    if (has_relivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->relivetime());
    }

  }
  // repeated .SpiritBeastAttr attlist = 9;
  total_size += 1 * this->attlist_size();
  for (int i = 0; i < this->attlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attlist(i));
  }

  // repeated .SpiritBeastSkillInfo skilllist = 10;
  total_size += 1 * this->skilllist_size();
  for (int i = 0; i < this->skilllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilllist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiritBeastInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpiritBeastInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpiritBeastInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpiritBeastInfo::MergeFrom(const SpiritBeastInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attlist_.MergeFrom(from.attlist_);
  skilllist_.MergeFrom(from.skilllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_growthlv()) {
      set_growthlv(from.growthlv());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_generations()) {
      set_generations(from.generations());
    }
    if (from.has_nowexp()) {
      set_nowexp(from.nowexp());
    }
    if (from.has_savvylv()) {
      set_savvylv(from.savvylv());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_relivetime()) {
      set_relivetime(from.relivetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpiritBeastInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiritBeastInfo::CopyFrom(const SpiritBeastInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiritBeastInfo::IsInitialized() const {

  return true;
}

void SpiritBeastInfo::Swap(SpiritBeastInfo* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(sid_, other->sid_);
    std::swap(growthlv_, other->growthlv_);
    std::swap(starlv_, other->starlv_);
    std::swap(level_, other->level_);
    std::swap(generations_, other->generations_);
    std::swap(nowexp_, other->nowexp_);
    std::swap(savvylv_, other->savvylv_);
    attlist_.Swap(&other->attlist_);
    skilllist_.Swap(&other->skilllist_);
    std::swap(relivetime_, other->relivetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpiritBeastInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiritBeastInfo_descriptor_;
  metadata.reflection = SpiritBeastInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpiritBeastAttr::kAttrkeyFieldNumber;
const int SpiritBeastAttr::kGrowupvalueFieldNumber;
const int SpiritBeastAttr::kViewflagFieldNumber;
#endif  // !_MSC_VER

SpiritBeastAttr::SpiritBeastAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpiritBeastAttr)
}

void SpiritBeastAttr::InitAsDefaultInstance() {
}

SpiritBeastAttr::SpiritBeastAttr(const SpiritBeastAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SpiritBeastAttr)
}

void SpiritBeastAttr::SharedCtor() {
  _cached_size_ = 0;
  attrkey_ = 0;
  growupvalue_ = 0;
  viewflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpiritBeastAttr::~SpiritBeastAttr() {
  // @@protoc_insertion_point(destructor:SpiritBeastAttr)
  SharedDtor();
}

void SpiritBeastAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpiritBeastAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiritBeastAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiritBeastAttr_descriptor_;
}

const SpiritBeastAttr& SpiritBeastAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

SpiritBeastAttr* SpiritBeastAttr::default_instance_ = NULL;

SpiritBeastAttr* SpiritBeastAttr::New() const {
  return new SpiritBeastAttr;
}

void SpiritBeastAttr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpiritBeastAttr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(attrkey_, viewflag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpiritBeastAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpiritBeastAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attrkey = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attrkey_)));
          set_has_attrkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_growupvalue;
        break;
      }

      // optional int32 growupvalue = 2;
      case 2: {
        if (tag == 16) {
         parse_growupvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &growupvalue_)));
          set_has_growupvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_viewflag;
        break;
      }

      // optional int32 viewflag = 3;
      case 3: {
        if (tag == 24) {
         parse_viewflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewflag_)));
          set_has_viewflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpiritBeastAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpiritBeastAttr)
  return false;
#undef DO_
}

void SpiritBeastAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpiritBeastAttr)
  // optional int32 attrkey = 1;
  if (has_attrkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attrkey(), output);
  }

  // optional int32 growupvalue = 2;
  if (has_growupvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->growupvalue(), output);
  }

  // optional int32 viewflag = 3;
  if (has_viewflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->viewflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpiritBeastAttr)
}

::google::protobuf::uint8* SpiritBeastAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpiritBeastAttr)
  // optional int32 attrkey = 1;
  if (has_attrkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attrkey(), target);
  }

  // optional int32 growupvalue = 2;
  if (has_growupvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->growupvalue(), target);
  }

  // optional int32 viewflag = 3;
  if (has_viewflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->viewflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpiritBeastAttr)
  return target;
}

int SpiritBeastAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attrkey = 1;
    if (has_attrkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attrkey());
    }

    // optional int32 growupvalue = 2;
    if (has_growupvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->growupvalue());
    }

    // optional int32 viewflag = 3;
    if (has_viewflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiritBeastAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpiritBeastAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpiritBeastAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpiritBeastAttr::MergeFrom(const SpiritBeastAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrkey()) {
      set_attrkey(from.attrkey());
    }
    if (from.has_growupvalue()) {
      set_growupvalue(from.growupvalue());
    }
    if (from.has_viewflag()) {
      set_viewflag(from.viewflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpiritBeastAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiritBeastAttr::CopyFrom(const SpiritBeastAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiritBeastAttr::IsInitialized() const {

  return true;
}

void SpiritBeastAttr::Swap(SpiritBeastAttr* other) {
  if (other != this) {
    std::swap(attrkey_, other->attrkey_);
    std::swap(growupvalue_, other->growupvalue_);
    std::swap(viewflag_, other->viewflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpiritBeastAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiritBeastAttr_descriptor_;
  metadata.reflection = SpiritBeastAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpiritBeastSkillInfo::kSkillIDFieldNumber;
const int SpiritBeastSkillInfo::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

SpiritBeastSkillInfo::SpiritBeastSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpiritBeastSkillInfo)
}

void SpiritBeastSkillInfo::InitAsDefaultInstance() {
}

SpiritBeastSkillInfo::SpiritBeastSkillInfo(const SpiritBeastSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SpiritBeastSkillInfo)
}

void SpiritBeastSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  skilllevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpiritBeastSkillInfo::~SpiritBeastSkillInfo() {
  // @@protoc_insertion_point(destructor:SpiritBeastSkillInfo)
  SharedDtor();
}

void SpiritBeastSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpiritBeastSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiritBeastSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiritBeastSkillInfo_descriptor_;
}

const SpiritBeastSkillInfo& SpiritBeastSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

SpiritBeastSkillInfo* SpiritBeastSkillInfo::default_instance_ = NULL;

SpiritBeastSkillInfo* SpiritBeastSkillInfo::New() const {
  return new SpiritBeastSkillInfo;
}

void SpiritBeastSkillInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpiritBeastSkillInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skillid_, skilllevel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpiritBeastSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpiritBeastSkillInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skillID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skillLevel;
        break;
      }

      // optional int32 skillLevel = 2;
      case 2: {
        if (tag == 16) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpiritBeastSkillInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpiritBeastSkillInfo)
  return false;
#undef DO_
}

void SpiritBeastSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpiritBeastSkillInfo)
  // optional int32 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int32 skillLevel = 2;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skilllevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpiritBeastSkillInfo)
}

::google::protobuf::uint8* SpiritBeastSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpiritBeastSkillInfo)
  // optional int32 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int32 skillLevel = 2;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skilllevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpiritBeastSkillInfo)
  return target;
}

int SpiritBeastSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 skillLevel = 2;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiritBeastSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpiritBeastSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpiritBeastSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpiritBeastSkillInfo::MergeFrom(const SpiritBeastSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpiritBeastSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiritBeastSkillInfo::CopyFrom(const SpiritBeastSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiritBeastSkillInfo::IsInitialized() const {

  return true;
}

void SpiritBeastSkillInfo::Swap(SpiritBeastSkillInfo* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpiritBeastSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiritBeastSkillInfo_descriptor_;
  metadata.reflection = SpiritBeastSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpiritBeastShouLingInfo::kPosFieldNumber;
const int SpiritBeastShouLingInfo::kSidFieldNumber;
const int SpiritBeastShouLingInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

SpiritBeastShouLingInfo::SpiritBeastShouLingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpiritBeastShouLingInfo)
}

void SpiritBeastShouLingInfo::InitAsDefaultInstance() {
}

SpiritBeastShouLingInfo::SpiritBeastShouLingInfo(const SpiritBeastShouLingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SpiritBeastShouLingInfo)
}

void SpiritBeastShouLingInfo::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  sid_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpiritBeastShouLingInfo::~SpiritBeastShouLingInfo() {
  // @@protoc_insertion_point(destructor:SpiritBeastShouLingInfo)
  SharedDtor();
}

void SpiritBeastShouLingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpiritBeastShouLingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiritBeastShouLingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiritBeastShouLingInfo_descriptor_;
}

const SpiritBeastShouLingInfo& SpiritBeastShouLingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

SpiritBeastShouLingInfo* SpiritBeastShouLingInfo::default_instance_ = NULL;

SpiritBeastShouLingInfo* SpiritBeastShouLingInfo::New() const {
  return new SpiritBeastShouLingInfo;
}

void SpiritBeastShouLingInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpiritBeastShouLingInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pos_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpiritBeastShouLingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpiritBeastShouLingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional int32 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpiritBeastShouLingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpiritBeastShouLingInfo)
  return false;
#undef DO_
}

void SpiritBeastShouLingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpiritBeastShouLingInfo)
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpiritBeastShouLingInfo)
}

::google::protobuf::uint8* SpiritBeastShouLingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpiritBeastShouLingInfo)
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpiritBeastShouLingInfo)
  return target;
}

int SpiritBeastShouLingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiritBeastShouLingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpiritBeastShouLingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpiritBeastShouLingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpiritBeastShouLingInfo::MergeFrom(const SpiritBeastShouLingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpiritBeastShouLingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiritBeastShouLingInfo::CopyFrom(const SpiritBeastShouLingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiritBeastShouLingInfo::IsInitialized() const {

  return true;
}

void SpiritBeastShouLingInfo::Swap(SpiritBeastShouLingInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(sid_, other->sid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpiritBeastShouLingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiritBeastShouLingInfo_descriptor_;
  metadata.reflection = SpiritBeastShouLingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpiritBeastInUnite::kPosFieldNumber;
const int SpiritBeastInUnite::kSbInfoFieldNumber;
#endif  // !_MSC_VER

SpiritBeastInUnite::SpiritBeastInUnite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpiritBeastInUnite)
}

void SpiritBeastInUnite::InitAsDefaultInstance() {
  sbinfo_ = const_cast< ::SpiritBeastInfo*>(&::SpiritBeastInfo::default_instance());
}

SpiritBeastInUnite::SpiritBeastInUnite(const SpiritBeastInUnite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SpiritBeastInUnite)
}

void SpiritBeastInUnite::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  sbinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpiritBeastInUnite::~SpiritBeastInUnite() {
  // @@protoc_insertion_point(destructor:SpiritBeastInUnite)
  SharedDtor();
}

void SpiritBeastInUnite::SharedDtor() {
  if (this != default_instance_) {
    delete sbinfo_;
  }
}

void SpiritBeastInUnite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiritBeastInUnite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiritBeastInUnite_descriptor_;
}

const SpiritBeastInUnite& SpiritBeastInUnite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

SpiritBeastInUnite* SpiritBeastInUnite::default_instance_ = NULL;

SpiritBeastInUnite* SpiritBeastInUnite::New() const {
  return new SpiritBeastInUnite;
}

void SpiritBeastInUnite::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    pos_ = 0;
    if (has_sbinfo()) {
      if (sbinfo_ != NULL) sbinfo_->::SpiritBeastInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpiritBeastInUnite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpiritBeastInUnite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sbInfo;
        break;
      }

      // optional .SpiritBeastInfo sbInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_sbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sbinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpiritBeastInUnite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpiritBeastInUnite)
  return false;
#undef DO_
}

void SpiritBeastInUnite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpiritBeastInUnite)
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional .SpiritBeastInfo sbInfo = 2;
  if (has_sbinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sbinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpiritBeastInUnite)
}

::google::protobuf::uint8* SpiritBeastInUnite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpiritBeastInUnite)
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional .SpiritBeastInfo sbInfo = 2;
  if (has_sbinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sbinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpiritBeastInUnite)
  return target;
}

int SpiritBeastInUnite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional .SpiritBeastInfo sbInfo = 2;
    if (has_sbinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sbinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiritBeastInUnite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpiritBeastInUnite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpiritBeastInUnite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpiritBeastInUnite::MergeFrom(const SpiritBeastInUnite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_sbinfo()) {
      mutable_sbinfo()->::SpiritBeastInfo::MergeFrom(from.sbinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpiritBeastInUnite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiritBeastInUnite::CopyFrom(const SpiritBeastInUnite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiritBeastInUnite::IsInitialized() const {

  return true;
}

void SpiritBeastInUnite::Swap(SpiritBeastInUnite* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(sbinfo_, other->sbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpiritBeastInUnite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiritBeastInUnite_descriptor_;
  metadata.reflection = SpiritBeastInUnite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpiritBeastUniteInfo::kZhenIDFieldNumber;
const int SpiritBeastUniteInfo::kSbInUniteFieldNumber;
const int SpiritBeastUniteInfo::kSbShoulingFieldNumber;
#endif  // !_MSC_VER

SpiritBeastUniteInfo::SpiritBeastUniteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpiritBeastUniteInfo)
}

void SpiritBeastUniteInfo::InitAsDefaultInstance() {
}

SpiritBeastUniteInfo::SpiritBeastUniteInfo(const SpiritBeastUniteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SpiritBeastUniteInfo)
}

void SpiritBeastUniteInfo::SharedCtor() {
  _cached_size_ = 0;
  zhenid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpiritBeastUniteInfo::~SpiritBeastUniteInfo() {
  // @@protoc_insertion_point(destructor:SpiritBeastUniteInfo)
  SharedDtor();
}

void SpiritBeastUniteInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpiritBeastUniteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiritBeastUniteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiritBeastUniteInfo_descriptor_;
}

const SpiritBeastUniteInfo& SpiritBeastUniteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

SpiritBeastUniteInfo* SpiritBeastUniteInfo::default_instance_ = NULL;

SpiritBeastUniteInfo* SpiritBeastUniteInfo::New() const {
  return new SpiritBeastUniteInfo;
}

void SpiritBeastUniteInfo::Clear() {
  zhenid_ = 0;
  sbinunite_.Clear();
  sbshouling_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpiritBeastUniteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpiritBeastUniteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 zhenID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhenid_)));
          set_has_zhenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sbInUnite;
        break;
      }

      // repeated .SpiritBeastInUnite sbInUnite = 2;
      case 2: {
        if (tag == 18) {
         parse_sbInUnite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sbinunite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sbInUnite;
        if (input->ExpectTag(26)) goto parse_sbShouling;
        break;
      }

      // repeated .SpiritBeastShouLingInfo sbShouling = 3;
      case 3: {
        if (tag == 26) {
         parse_sbShouling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sbshouling()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sbShouling;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpiritBeastUniteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpiritBeastUniteInfo)
  return false;
#undef DO_
}

void SpiritBeastUniteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpiritBeastUniteInfo)
  // optional int32 zhenID = 1;
  if (has_zhenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zhenid(), output);
  }

  // repeated .SpiritBeastInUnite sbInUnite = 2;
  for (int i = 0; i < this->sbinunite_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sbinunite(i), output);
  }

  // repeated .SpiritBeastShouLingInfo sbShouling = 3;
  for (int i = 0; i < this->sbshouling_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sbshouling(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpiritBeastUniteInfo)
}

::google::protobuf::uint8* SpiritBeastUniteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpiritBeastUniteInfo)
  // optional int32 zhenID = 1;
  if (has_zhenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zhenid(), target);
  }

  // repeated .SpiritBeastInUnite sbInUnite = 2;
  for (int i = 0; i < this->sbinunite_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sbinunite(i), target);
  }

  // repeated .SpiritBeastShouLingInfo sbShouling = 3;
  for (int i = 0; i < this->sbshouling_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sbshouling(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpiritBeastUniteInfo)
  return target;
}

int SpiritBeastUniteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 zhenID = 1;
    if (has_zhenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhenid());
    }

  }
  // repeated .SpiritBeastInUnite sbInUnite = 2;
  total_size += 1 * this->sbinunite_size();
  for (int i = 0; i < this->sbinunite_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sbinunite(i));
  }

  // repeated .SpiritBeastShouLingInfo sbShouling = 3;
  total_size += 1 * this->sbshouling_size();
  for (int i = 0; i < this->sbshouling_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sbshouling(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiritBeastUniteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpiritBeastUniteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpiritBeastUniteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpiritBeastUniteInfo::MergeFrom(const SpiritBeastUniteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  sbinunite_.MergeFrom(from.sbinunite_);
  sbshouling_.MergeFrom(from.sbshouling_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zhenid()) {
      set_zhenid(from.zhenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpiritBeastUniteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiritBeastUniteInfo::CopyFrom(const SpiritBeastUniteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiritBeastUniteInfo::IsInitialized() const {

  return true;
}

void SpiritBeastUniteInfo::Swap(SpiritBeastUniteInfo* other) {
  if (other != this) {
    std::swap(zhenid_, other->zhenid_);
    sbinunite_.Swap(&other->sbinunite_);
    sbshouling_.Swap(&other->sbshouling_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpiritBeastUniteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiritBeastUniteInfo_descriptor_;
  metadata.reflection = SpiritBeastUniteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSpiritBeastOperate::kOperateFieldNumber;
const int CGSpiritBeastOperate::kPidFieldNumber;
const int CGSpiritBeastOperate::kOffPidFieldNumber;
const int CGSpiritBeastOperate::kDevelopTypeFieldNumber;
#endif  // !_MSC_VER

CGSpiritBeastOperate::CGSpiritBeastOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSpiritBeastOperate)
}

void CGSpiritBeastOperate::InitAsDefaultInstance() {
}

CGSpiritBeastOperate::CGSpiritBeastOperate(const CGSpiritBeastOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSpiritBeastOperate)
}

void CGSpiritBeastOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  offpid_ = GOOGLE_LONGLONG(0);
  developtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSpiritBeastOperate::~CGSpiritBeastOperate() {
  // @@protoc_insertion_point(destructor:CGSpiritBeastOperate)
  SharedDtor();
}

void CGSpiritBeastOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSpiritBeastOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSpiritBeastOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSpiritBeastOperate_descriptor_;
}

const CGSpiritBeastOperate& CGSpiritBeastOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

CGSpiritBeastOperate* CGSpiritBeastOperate::default_instance_ = NULL;

CGSpiritBeastOperate* CGSpiritBeastOperate::New() const {
  return new CGSpiritBeastOperate;
}

void CGSpiritBeastOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGSpiritBeastOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, offpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSpiritBeastOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSpiritBeastOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional int64 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offPid;
        break;
      }

      // optional int64 offPid = 3;
      case 3: {
        if (tag == 24) {
         parse_offPid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offpid_)));
          set_has_offpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_developType;
        break;
      }

      // optional int32 developType = 4;
      case 4: {
        if (tag == 32) {
         parse_developType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &developtype_)));
          set_has_developtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSpiritBeastOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSpiritBeastOperate)
  return false;
#undef DO_
}

void CGSpiritBeastOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSpiritBeastOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pid(), output);
  }

  // optional int64 offPid = 3;
  if (has_offpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->offpid(), output);
  }

  // optional int32 developType = 4;
  if (has_developtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->developtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSpiritBeastOperate)
}

::google::protobuf::uint8* CGSpiritBeastOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSpiritBeastOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pid(), target);
  }

  // optional int64 offPid = 3;
  if (has_offpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->offpid(), target);
  }

  // optional int32 developType = 4;
  if (has_developtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->developtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSpiritBeastOperate)
  return target;
}

int CGSpiritBeastOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int64 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int64 offPid = 3;
    if (has_offpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offpid());
    }

    // optional int32 developType = 4;
    if (has_developtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->developtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSpiritBeastOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSpiritBeastOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSpiritBeastOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSpiritBeastOperate::MergeFrom(const CGSpiritBeastOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_offpid()) {
      set_offpid(from.offpid());
    }
    if (from.has_developtype()) {
      set_developtype(from.developtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSpiritBeastOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSpiritBeastOperate::CopyFrom(const CGSpiritBeastOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSpiritBeastOperate::IsInitialized() const {

  return true;
}

void CGSpiritBeastOperate::Swap(CGSpiritBeastOperate* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(pid_, other->pid_);
    std::swap(offpid_, other->offpid_);
    std::swap(developtype_, other->developtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSpiritBeastOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSpiritBeastOperate_descriptor_;
  metadata.reflection = CGSpiritBeastOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSpiritBeastOperateResult::kOperateFieldNumber;
const int GCSpiritBeastOperateResult::kResultFieldNumber;
const int GCSpiritBeastOperateResult::kSbInfoFieldNumber;
const int GCSpiritBeastOperateResult::kPetFightFieldNumber;
const int GCSpiritBeastOperateResult::kBattleArrayFieldNumber;
const int GCSpiritBeastOperateResult::kSbUniteFieldNumber;
const int GCSpiritBeastOperateResult::kReceiveTimeFieldNumber;
const int GCSpiritBeastOperateResult::kRemainNumFieldNumber;
const int GCSpiritBeastOperateResult::kLuckyFieldNumber;
const int GCSpiritBeastOperateResult::kBreedResultFieldNumber;
#endif  // !_MSC_VER

GCSpiritBeastOperateResult::GCSpiritBeastOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSpiritBeastOperateResult)
}

void GCSpiritBeastOperateResult::InitAsDefaultInstance() {
}

GCSpiritBeastOperateResult::GCSpiritBeastOperateResult(const GCSpiritBeastOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSpiritBeastOperateResult)
}

void GCSpiritBeastOperateResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operate_ = 0;
  result_ = 0;
  petfight_ = GOOGLE_LONGLONG(0);
  receivetime_ = GOOGLE_LONGLONG(0);
  remainnum_ = 0;
  lucky_ = 0;
  breedresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSpiritBeastOperateResult::~GCSpiritBeastOperateResult() {
  // @@protoc_insertion_point(destructor:GCSpiritBeastOperateResult)
  SharedDtor();
}

void GCSpiritBeastOperateResult::SharedDtor() {
  if (breedresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete breedresult_;
  }
  if (this != default_instance_) {
  }
}

void GCSpiritBeastOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSpiritBeastOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSpiritBeastOperateResult_descriptor_;
}

const GCSpiritBeastOperateResult& GCSpiritBeastOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

GCSpiritBeastOperateResult* GCSpiritBeastOperateResult::default_instance_ = NULL;

GCSpiritBeastOperateResult* GCSpiritBeastOperateResult::New() const {
  return new GCSpiritBeastOperateResult;
}

void GCSpiritBeastOperateResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSpiritBeastOperateResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 203) {
    ZR_(operate_, result_);
    ZR_(receivetime_, remainnum_);
    petfight_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 768) {
    lucky_ = 0;
    if (has_breedresult()) {
      if (breedresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        breedresult_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  sbinfo_.Clear();
  battlearray_.Clear();
  sbunite_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSpiritBeastOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSpiritBeastOperateResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sbInfo;
        break;
      }

      // repeated .SpiritBeastInfo sbInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_sbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sbinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sbInfo;
        if (input->ExpectTag(32)) goto parse_petFight;
        break;
      }

      // optional int64 petFight = 4;
      case 4: {
        if (tag == 32) {
         parse_petFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petfight_)));
          set_has_petfight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_battleArray;
        break;
      }

      // repeated int64 battleArray = 5;
      case 5: {
        if (tag == 40) {
         parse_battleArray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_battlearray())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_battlearray())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_battleArray;
        if (input->ExpectTag(50)) goto parse_sbUnite;
        break;
      }

      // repeated .SpiritBeastUniteInfo sbUnite = 6;
      case 6: {
        if (tag == 50) {
         parse_sbUnite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sbunite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sbUnite;
        if (input->ExpectTag(56)) goto parse_receiveTime;
        break;
      }

      // optional int64 receiveTime = 7;
      case 7: {
        if (tag == 56) {
         parse_receiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivetime_)));
          set_has_receivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_remainNum;
        break;
      }

      // optional int32 remainNum = 8;
      case 8: {
        if (tag == 64) {
         parse_remainNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainnum_)));
          set_has_remainnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_lucky;
        break;
      }

      // optional int32 lucky = 9;
      case 9: {
        if (tag == 72) {
         parse_lucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucky_)));
          set_has_lucky();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_breedResult;
        break;
      }

      // optional string breedResult = 10;
      case 10: {
        if (tag == 82) {
         parse_breedResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_breedresult()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->breedresult().data(), this->breedresult().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "breedresult");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSpiritBeastOperateResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSpiritBeastOperateResult)
  return false;
#undef DO_
}

void GCSpiritBeastOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSpiritBeastOperateResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .SpiritBeastInfo sbInfo = 3;
  for (int i = 0; i < this->sbinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sbinfo(i), output);
  }

  // optional int64 petFight = 4;
  if (has_petfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->petfight(), output);
  }

  // repeated int64 battleArray = 5;
  for (int i = 0; i < this->battlearray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->battlearray(i), output);
  }

  // repeated .SpiritBeastUniteInfo sbUnite = 6;
  for (int i = 0; i < this->sbunite_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sbunite(i), output);
  }

  // optional int64 receiveTime = 7;
  if (has_receivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->receivetime(), output);
  }

  // optional int32 remainNum = 8;
  if (has_remainnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->remainnum(), output);
  }

  // optional int32 lucky = 9;
  if (has_lucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lucky(), output);
  }

  // optional string breedResult = 10;
  if (has_breedresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->breedresult().data(), this->breedresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "breedresult");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->breedresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSpiritBeastOperateResult)
}

::google::protobuf::uint8* GCSpiritBeastOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSpiritBeastOperateResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .SpiritBeastInfo sbInfo = 3;
  for (int i = 0; i < this->sbinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sbinfo(i), target);
  }

  // optional int64 petFight = 4;
  if (has_petfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->petfight(), target);
  }

  // repeated int64 battleArray = 5;
  for (int i = 0; i < this->battlearray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->battlearray(i), target);
  }

  // repeated .SpiritBeastUniteInfo sbUnite = 6;
  for (int i = 0; i < this->sbunite_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sbunite(i), target);
  }

  // optional int64 receiveTime = 7;
  if (has_receivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->receivetime(), target);
  }

  // optional int32 remainNum = 8;
  if (has_remainnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->remainnum(), target);
  }

  // optional int32 lucky = 9;
  if (has_lucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lucky(), target);
  }

  // optional string breedResult = 10;
  if (has_breedresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->breedresult().data(), this->breedresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "breedresult");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->breedresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSpiritBeastOperateResult)
  return target;
}

int GCSpiritBeastOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 petFight = 4;
    if (has_petfight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petfight());
    }

    // optional int64 receiveTime = 7;
    if (has_receivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receivetime());
    }

    // optional int32 remainNum = 8;
    if (has_remainnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remainnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 lucky = 9;
    if (has_lucky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucky());
    }

    // optional string breedResult = 10;
    if (has_breedresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->breedresult());
    }

  }
  // repeated .SpiritBeastInfo sbInfo = 3;
  total_size += 1 * this->sbinfo_size();
  for (int i = 0; i < this->sbinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sbinfo(i));
  }

  // repeated int64 battleArray = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->battlearray_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->battlearray(i));
    }
    total_size += 1 * this->battlearray_size() + data_size;
  }

  // repeated .SpiritBeastUniteInfo sbUnite = 6;
  total_size += 1 * this->sbunite_size();
  for (int i = 0; i < this->sbunite_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sbunite(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSpiritBeastOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSpiritBeastOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSpiritBeastOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSpiritBeastOperateResult::MergeFrom(const GCSpiritBeastOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  sbinfo_.MergeFrom(from.sbinfo_);
  battlearray_.MergeFrom(from.battlearray_);
  sbunite_.MergeFrom(from.sbunite_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_petfight()) {
      set_petfight(from.petfight());
    }
    if (from.has_receivetime()) {
      set_receivetime(from.receivetime());
    }
    if (from.has_remainnum()) {
      set_remainnum(from.remainnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lucky()) {
      set_lucky(from.lucky());
    }
    if (from.has_breedresult()) {
      set_breedresult(from.breedresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSpiritBeastOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSpiritBeastOperateResult::CopyFrom(const GCSpiritBeastOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSpiritBeastOperateResult::IsInitialized() const {

  return true;
}

void GCSpiritBeastOperateResult::Swap(GCSpiritBeastOperateResult* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(result_, other->result_);
    sbinfo_.Swap(&other->sbinfo_);
    std::swap(petfight_, other->petfight_);
    battlearray_.Swap(&other->battlearray_);
    sbunite_.Swap(&other->sbunite_);
    std::swap(receivetime_, other->receivetime_);
    std::swap(remainnum_, other->remainnum_);
    std::swap(lucky_, other->lucky_);
    std::swap(breedresult_, other->breedresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSpiritBeastOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSpiritBeastOperateResult_descriptor_;
  metadata.reflection = GCSpiritBeastOperateResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSpiritBeastInherit::kTargetPidFieldNumber;
const int CGSpiritBeastInherit::kStuffPidFieldNumber;
const int CGSpiritBeastInherit::kIsSavvyFieldNumber;
const int CGSpiritBeastInherit::kIsSkillFieldNumber;
#endif  // !_MSC_VER

CGSpiritBeastInherit::CGSpiritBeastInherit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSpiritBeastInherit)
}

void CGSpiritBeastInherit::InitAsDefaultInstance() {
}

CGSpiritBeastInherit::CGSpiritBeastInherit(const CGSpiritBeastInherit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSpiritBeastInherit)
}

void CGSpiritBeastInherit::SharedCtor() {
  _cached_size_ = 0;
  targetpid_ = GOOGLE_LONGLONG(0);
  stuffpid_ = GOOGLE_LONGLONG(0);
  issavvy_ = 0;
  isskill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSpiritBeastInherit::~CGSpiritBeastInherit() {
  // @@protoc_insertion_point(destructor:CGSpiritBeastInherit)
  SharedDtor();
}

void CGSpiritBeastInherit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSpiritBeastInherit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSpiritBeastInherit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSpiritBeastInherit_descriptor_;
}

const CGSpiritBeastInherit& CGSpiritBeastInherit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

CGSpiritBeastInherit* CGSpiritBeastInherit::default_instance_ = NULL;

CGSpiritBeastInherit* CGSpiritBeastInherit::New() const {
  return new CGSpiritBeastInherit;
}

void CGSpiritBeastInherit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGSpiritBeastInherit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(targetpid_, isskill_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSpiritBeastInherit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSpiritBeastInherit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 targetPid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetpid_)));
          set_has_targetpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stuffPid;
        break;
      }

      // optional int64 stuffPid = 2;
      case 2: {
        if (tag == 16) {
         parse_stuffPid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stuffpid_)));
          set_has_stuffpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isSavvy;
        break;
      }

      // optional int32 isSavvy = 3;
      case 3: {
        if (tag == 24) {
         parse_isSavvy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issavvy_)));
          set_has_issavvy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isSkill;
        break;
      }

      // optional int32 isSkill = 4;
      case 4: {
        if (tag == 32) {
         parse_isSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isskill_)));
          set_has_isskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSpiritBeastInherit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSpiritBeastInherit)
  return false;
#undef DO_
}

void CGSpiritBeastInherit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSpiritBeastInherit)
  // optional int64 targetPid = 1;
  if (has_targetpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->targetpid(), output);
  }

  // optional int64 stuffPid = 2;
  if (has_stuffpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->stuffpid(), output);
  }

  // optional int32 isSavvy = 3;
  if (has_issavvy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->issavvy(), output);
  }

  // optional int32 isSkill = 4;
  if (has_isskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isskill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSpiritBeastInherit)
}

::google::protobuf::uint8* CGSpiritBeastInherit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSpiritBeastInherit)
  // optional int64 targetPid = 1;
  if (has_targetpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->targetpid(), target);
  }

  // optional int64 stuffPid = 2;
  if (has_stuffpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->stuffpid(), target);
  }

  // optional int32 isSavvy = 3;
  if (has_issavvy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->issavvy(), target);
  }

  // optional int32 isSkill = 4;
  if (has_isskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isskill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSpiritBeastInherit)
  return target;
}

int CGSpiritBeastInherit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 targetPid = 1;
    if (has_targetpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetpid());
    }

    // optional int64 stuffPid = 2;
    if (has_stuffpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stuffpid());
    }

    // optional int32 isSavvy = 3;
    if (has_issavvy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issavvy());
    }

    // optional int32 isSkill = 4;
    if (has_isskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isskill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSpiritBeastInherit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSpiritBeastInherit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSpiritBeastInherit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSpiritBeastInherit::MergeFrom(const CGSpiritBeastInherit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetpid()) {
      set_targetpid(from.targetpid());
    }
    if (from.has_stuffpid()) {
      set_stuffpid(from.stuffpid());
    }
    if (from.has_issavvy()) {
      set_issavvy(from.issavvy());
    }
    if (from.has_isskill()) {
      set_isskill(from.isskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSpiritBeastInherit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSpiritBeastInherit::CopyFrom(const CGSpiritBeastInherit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSpiritBeastInherit::IsInitialized() const {

  return true;
}

void CGSpiritBeastInherit::Swap(CGSpiritBeastInherit* other) {
  if (other != this) {
    std::swap(targetpid_, other->targetpid_);
    std::swap(stuffpid_, other->stuffpid_);
    std::swap(issavvy_, other->issavvy_);
    std::swap(isskill_, other->isskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSpiritBeastInherit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSpiritBeastInherit_descriptor_;
  metadata.reflection = CGSpiritBeastInherit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSpiritBeastInheritResult::kResultFieldNumber;
const int GCSpiritBeastInheritResult::kStuffPidFieldNumber;
const int GCSpiritBeastInheritResult::kSbInfoFieldNumber;
#endif  // !_MSC_VER

GCSpiritBeastInheritResult::GCSpiritBeastInheritResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSpiritBeastInheritResult)
}

void GCSpiritBeastInheritResult::InitAsDefaultInstance() {
  sbinfo_ = const_cast< ::SpiritBeastInfo*>(&::SpiritBeastInfo::default_instance());
}

GCSpiritBeastInheritResult::GCSpiritBeastInheritResult(const GCSpiritBeastInheritResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSpiritBeastInheritResult)
}

void GCSpiritBeastInheritResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  stuffpid_ = GOOGLE_LONGLONG(0);
  sbinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSpiritBeastInheritResult::~GCSpiritBeastInheritResult() {
  // @@protoc_insertion_point(destructor:GCSpiritBeastInheritResult)
  SharedDtor();
}

void GCSpiritBeastInheritResult::SharedDtor() {
  if (this != default_instance_) {
    delete sbinfo_;
  }
}

void GCSpiritBeastInheritResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSpiritBeastInheritResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSpiritBeastInheritResult_descriptor_;
}

const GCSpiritBeastInheritResult& GCSpiritBeastInheritResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

GCSpiritBeastInheritResult* GCSpiritBeastInheritResult::default_instance_ = NULL;

GCSpiritBeastInheritResult* GCSpiritBeastInheritResult::New() const {
  return new GCSpiritBeastInheritResult;
}

void GCSpiritBeastInheritResult::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 0;
    stuffpid_ = GOOGLE_LONGLONG(0);
    if (has_sbinfo()) {
      if (sbinfo_ != NULL) sbinfo_->::SpiritBeastInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSpiritBeastInheritResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSpiritBeastInheritResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stuffPid;
        break;
      }

      // optional int64 stuffPid = 2;
      case 2: {
        if (tag == 16) {
         parse_stuffPid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stuffpid_)));
          set_has_stuffpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sbInfo;
        break;
      }

      // optional .SpiritBeastInfo sbInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_sbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sbinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSpiritBeastInheritResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSpiritBeastInheritResult)
  return false;
#undef DO_
}

void GCSpiritBeastInheritResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSpiritBeastInheritResult)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 stuffPid = 2;
  if (has_stuffpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->stuffpid(), output);
  }

  // optional .SpiritBeastInfo sbInfo = 3;
  if (has_sbinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sbinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSpiritBeastInheritResult)
}

::google::protobuf::uint8* GCSpiritBeastInheritResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSpiritBeastInheritResult)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 stuffPid = 2;
  if (has_stuffpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->stuffpid(), target);
  }

  // optional .SpiritBeastInfo sbInfo = 3;
  if (has_sbinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sbinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSpiritBeastInheritResult)
  return target;
}

int GCSpiritBeastInheritResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 stuffPid = 2;
    if (has_stuffpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stuffpid());
    }

    // optional .SpiritBeastInfo sbInfo = 3;
    if (has_sbinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sbinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSpiritBeastInheritResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSpiritBeastInheritResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSpiritBeastInheritResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSpiritBeastInheritResult::MergeFrom(const GCSpiritBeastInheritResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_stuffpid()) {
      set_stuffpid(from.stuffpid());
    }
    if (from.has_sbinfo()) {
      mutable_sbinfo()->::SpiritBeastInfo::MergeFrom(from.sbinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSpiritBeastInheritResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSpiritBeastInheritResult::CopyFrom(const GCSpiritBeastInheritResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSpiritBeastInheritResult::IsInitialized() const {

  return true;
}

void GCSpiritBeastInheritResult::Swap(GCSpiritBeastInheritResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(stuffpid_, other->stuffpid_);
    std::swap(sbinfo_, other->sbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSpiritBeastInheritResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSpiritBeastInheritResult_descriptor_;
  metadata.reflection = GCSpiritBeastInheritResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSpiritBeastLevelUp::kPidFieldNumber;
const int CGSpiritBeastLevelUp::kPelletIDFieldNumber;
const int CGSpiritBeastLevelUp::kPelletNumFieldNumber;
#endif  // !_MSC_VER

CGSpiritBeastLevelUp::CGSpiritBeastLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSpiritBeastLevelUp)
}

void CGSpiritBeastLevelUp::InitAsDefaultInstance() {
}

CGSpiritBeastLevelUp::CGSpiritBeastLevelUp(const CGSpiritBeastLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSpiritBeastLevelUp)
}

void CGSpiritBeastLevelUp::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  pelletid_ = 0;
  pelletnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSpiritBeastLevelUp::~CGSpiritBeastLevelUp() {
  // @@protoc_insertion_point(destructor:CGSpiritBeastLevelUp)
  SharedDtor();
}

void CGSpiritBeastLevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSpiritBeastLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSpiritBeastLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSpiritBeastLevelUp_descriptor_;
}

const CGSpiritBeastLevelUp& CGSpiritBeastLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

CGSpiritBeastLevelUp* CGSpiritBeastLevelUp::default_instance_ = NULL;

CGSpiritBeastLevelUp* CGSpiritBeastLevelUp::New() const {
  return new CGSpiritBeastLevelUp;
}

void CGSpiritBeastLevelUp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGSpiritBeastLevelUp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, pelletnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSpiritBeastLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSpiritBeastLevelUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pelletID;
        break;
      }

      // optional int32 pelletID = 2;
      case 2: {
        if (tag == 16) {
         parse_pelletID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pelletid_)));
          set_has_pelletid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pelletNum;
        break;
      }

      // optional int32 pelletNum = 3;
      case 3: {
        if (tag == 24) {
         parse_pelletNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pelletnum_)));
          set_has_pelletnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSpiritBeastLevelUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSpiritBeastLevelUp)
  return false;
#undef DO_
}

void CGSpiritBeastLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSpiritBeastLevelUp)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 pelletID = 2;
  if (has_pelletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pelletid(), output);
  }

  // optional int32 pelletNum = 3;
  if (has_pelletnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pelletnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSpiritBeastLevelUp)
}

::google::protobuf::uint8* CGSpiritBeastLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSpiritBeastLevelUp)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 pelletID = 2;
  if (has_pelletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pelletid(), target);
  }

  // optional int32 pelletNum = 3;
  if (has_pelletnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pelletnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSpiritBeastLevelUp)
  return target;
}

int CGSpiritBeastLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 pelletID = 2;
    if (has_pelletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pelletid());
    }

    // optional int32 pelletNum = 3;
    if (has_pelletnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pelletnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSpiritBeastLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSpiritBeastLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSpiritBeastLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSpiritBeastLevelUp::MergeFrom(const CGSpiritBeastLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_pelletid()) {
      set_pelletid(from.pelletid());
    }
    if (from.has_pelletnum()) {
      set_pelletnum(from.pelletnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSpiritBeastLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSpiritBeastLevelUp::CopyFrom(const CGSpiritBeastLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSpiritBeastLevelUp::IsInitialized() const {

  return true;
}

void CGSpiritBeastLevelUp::Swap(CGSpiritBeastLevelUp* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(pelletid_, other->pelletid_);
    std::swap(pelletnum_, other->pelletnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSpiritBeastLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSpiritBeastLevelUp_descriptor_;
  metadata.reflection = CGSpiritBeastLevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSpiritBeastLevelUpResult::kResultFieldNumber;
const int GCSpiritBeastLevelUpResult::kSbInfoFieldNumber;
#endif  // !_MSC_VER

GCSpiritBeastLevelUpResult::GCSpiritBeastLevelUpResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSpiritBeastLevelUpResult)
}

void GCSpiritBeastLevelUpResult::InitAsDefaultInstance() {
  sbinfo_ = const_cast< ::SpiritBeastInfo*>(&::SpiritBeastInfo::default_instance());
}

GCSpiritBeastLevelUpResult::GCSpiritBeastLevelUpResult(const GCSpiritBeastLevelUpResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSpiritBeastLevelUpResult)
}

void GCSpiritBeastLevelUpResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  sbinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSpiritBeastLevelUpResult::~GCSpiritBeastLevelUpResult() {
  // @@protoc_insertion_point(destructor:GCSpiritBeastLevelUpResult)
  SharedDtor();
}

void GCSpiritBeastLevelUpResult::SharedDtor() {
  if (this != default_instance_) {
    delete sbinfo_;
  }
}

void GCSpiritBeastLevelUpResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSpiritBeastLevelUpResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSpiritBeastLevelUpResult_descriptor_;
}

const GCSpiritBeastLevelUpResult& GCSpiritBeastLevelUpResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

GCSpiritBeastLevelUpResult* GCSpiritBeastLevelUpResult::default_instance_ = NULL;

GCSpiritBeastLevelUpResult* GCSpiritBeastLevelUpResult::New() const {
  return new GCSpiritBeastLevelUpResult;
}

void GCSpiritBeastLevelUpResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 0;
    if (has_sbinfo()) {
      if (sbinfo_ != NULL) sbinfo_->::SpiritBeastInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSpiritBeastLevelUpResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSpiritBeastLevelUpResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sbInfo;
        break;
      }

      // optional .SpiritBeastInfo sbInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_sbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sbinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSpiritBeastLevelUpResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSpiritBeastLevelUpResult)
  return false;
#undef DO_
}

void GCSpiritBeastLevelUpResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSpiritBeastLevelUpResult)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .SpiritBeastInfo sbInfo = 2;
  if (has_sbinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sbinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSpiritBeastLevelUpResult)
}

::google::protobuf::uint8* GCSpiritBeastLevelUpResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSpiritBeastLevelUpResult)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .SpiritBeastInfo sbInfo = 2;
  if (has_sbinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sbinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSpiritBeastLevelUpResult)
  return target;
}

int GCSpiritBeastLevelUpResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .SpiritBeastInfo sbInfo = 2;
    if (has_sbinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sbinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSpiritBeastLevelUpResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSpiritBeastLevelUpResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSpiritBeastLevelUpResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSpiritBeastLevelUpResult::MergeFrom(const GCSpiritBeastLevelUpResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_sbinfo()) {
      mutable_sbinfo()->::SpiritBeastInfo::MergeFrom(from.sbinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSpiritBeastLevelUpResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSpiritBeastLevelUpResult::CopyFrom(const GCSpiritBeastLevelUpResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSpiritBeastLevelUpResult::IsInitialized() const {

  return true;
}

void GCSpiritBeastLevelUpResult::Swap(GCSpiritBeastLevelUpResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(sbinfo_, other->sbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSpiritBeastLevelUpResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSpiritBeastLevelUpResult_descriptor_;
  metadata.reflection = GCSpiritBeastLevelUpResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSpiritBeastOperateSkill::kOperateFieldNumber;
const int CGSpiritBeastOperateSkill::kPidFieldNumber;
const int CGSpiritBeastOperateSkill::kTargetIDFieldNumber;
#endif  // !_MSC_VER

CGSpiritBeastOperateSkill::CGSpiritBeastOperateSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSpiritBeastOperateSkill)
}

void CGSpiritBeastOperateSkill::InitAsDefaultInstance() {
}

CGSpiritBeastOperateSkill::CGSpiritBeastOperateSkill(const CGSpiritBeastOperateSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSpiritBeastOperateSkill)
}

void CGSpiritBeastOperateSkill::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  targetid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSpiritBeastOperateSkill::~CGSpiritBeastOperateSkill() {
  // @@protoc_insertion_point(destructor:CGSpiritBeastOperateSkill)
  SharedDtor();
}

void CGSpiritBeastOperateSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSpiritBeastOperateSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSpiritBeastOperateSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSpiritBeastOperateSkill_descriptor_;
}

const CGSpiritBeastOperateSkill& CGSpiritBeastOperateSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

CGSpiritBeastOperateSkill* CGSpiritBeastOperateSkill::default_instance_ = NULL;

CGSpiritBeastOperateSkill* CGSpiritBeastOperateSkill::New() const {
  return new CGSpiritBeastOperateSkill;
}

void CGSpiritBeastOperateSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGSpiritBeastOperateSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, targetid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSpiritBeastOperateSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSpiritBeastOperateSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional int64 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 3;
      case 3: {
        if (tag == 24) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSpiritBeastOperateSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSpiritBeastOperateSkill)
  return false;
#undef DO_
}

void CGSpiritBeastOperateSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSpiritBeastOperateSkill)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pid(), output);
  }

  // optional int32 targetID = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSpiritBeastOperateSkill)
}

::google::protobuf::uint8* CGSpiritBeastOperateSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSpiritBeastOperateSkill)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pid(), target);
  }

  // optional int32 targetID = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSpiritBeastOperateSkill)
  return target;
}

int CGSpiritBeastOperateSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int64 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 targetID = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSpiritBeastOperateSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSpiritBeastOperateSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSpiritBeastOperateSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSpiritBeastOperateSkill::MergeFrom(const CGSpiritBeastOperateSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSpiritBeastOperateSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSpiritBeastOperateSkill::CopyFrom(const CGSpiritBeastOperateSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSpiritBeastOperateSkill::IsInitialized() const {

  return true;
}

void CGSpiritBeastOperateSkill::Swap(CGSpiritBeastOperateSkill* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(pid_, other->pid_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSpiritBeastOperateSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSpiritBeastOperateSkill_descriptor_;
  metadata.reflection = CGSpiritBeastOperateSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSpiritBeastOperateSkillResult::kOperateFieldNumber;
const int GCSpiritBeastOperateSkillResult::kResultFieldNumber;
const int GCSpiritBeastOperateSkillResult::kSbInfoFieldNumber;
#endif  // !_MSC_VER

GCSpiritBeastOperateSkillResult::GCSpiritBeastOperateSkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSpiritBeastOperateSkillResult)
}

void GCSpiritBeastOperateSkillResult::InitAsDefaultInstance() {
  sbinfo_ = const_cast< ::SpiritBeastInfo*>(&::SpiritBeastInfo::default_instance());
}

GCSpiritBeastOperateSkillResult::GCSpiritBeastOperateSkillResult(const GCSpiritBeastOperateSkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSpiritBeastOperateSkillResult)
}

void GCSpiritBeastOperateSkillResult::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  result_ = 0;
  sbinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSpiritBeastOperateSkillResult::~GCSpiritBeastOperateSkillResult() {
  // @@protoc_insertion_point(destructor:GCSpiritBeastOperateSkillResult)
  SharedDtor();
}

void GCSpiritBeastOperateSkillResult::SharedDtor() {
  if (this != default_instance_) {
    delete sbinfo_;
  }
}

void GCSpiritBeastOperateSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSpiritBeastOperateSkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSpiritBeastOperateSkillResult_descriptor_;
}

const GCSpiritBeastOperateSkillResult& GCSpiritBeastOperateSkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

GCSpiritBeastOperateSkillResult* GCSpiritBeastOperateSkillResult::default_instance_ = NULL;

GCSpiritBeastOperateSkillResult* GCSpiritBeastOperateSkillResult::New() const {
  return new GCSpiritBeastOperateSkillResult;
}

void GCSpiritBeastOperateSkillResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSpiritBeastOperateSkillResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(operate_, result_);
    if (has_sbinfo()) {
      if (sbinfo_ != NULL) sbinfo_->::SpiritBeastInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSpiritBeastOperateSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSpiritBeastOperateSkillResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sbInfo;
        break;
      }

      // optional .SpiritBeastInfo sbInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_sbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sbinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSpiritBeastOperateSkillResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSpiritBeastOperateSkillResult)
  return false;
#undef DO_
}

void GCSpiritBeastOperateSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSpiritBeastOperateSkillResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional .SpiritBeastInfo sbInfo = 3;
  if (has_sbinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sbinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSpiritBeastOperateSkillResult)
}

::google::protobuf::uint8* GCSpiritBeastOperateSkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSpiritBeastOperateSkillResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional .SpiritBeastInfo sbInfo = 3;
  if (has_sbinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sbinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSpiritBeastOperateSkillResult)
  return target;
}

int GCSpiritBeastOperateSkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .SpiritBeastInfo sbInfo = 3;
    if (has_sbinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sbinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSpiritBeastOperateSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSpiritBeastOperateSkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSpiritBeastOperateSkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSpiritBeastOperateSkillResult::MergeFrom(const GCSpiritBeastOperateSkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_sbinfo()) {
      mutable_sbinfo()->::SpiritBeastInfo::MergeFrom(from.sbinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSpiritBeastOperateSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSpiritBeastOperateSkillResult::CopyFrom(const GCSpiritBeastOperateSkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSpiritBeastOperateSkillResult::IsInitialized() const {

  return true;
}

void GCSpiritBeastOperateSkillResult::Swap(GCSpiritBeastOperateSkillResult* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(result_, other->result_);
    std::swap(sbinfo_, other->sbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSpiritBeastOperateSkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSpiritBeastOperateSkillResult_descriptor_;
  metadata.reflection = GCSpiritBeastOperateSkillResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSpiritBeastUniteOperate::kOperateFieldNumber;
const int CGSpiritBeastUniteOperate::kTargetFieldNumber;
const int CGSpiritBeastUniteOperate::kZhenIDFieldNumber;
const int CGSpiritBeastUniteOperate::kPosIDFieldNumber;
const int CGSpiritBeastUniteOperate::kPidFieldNumber;
#endif  // !_MSC_VER

CGSpiritBeastUniteOperate::CGSpiritBeastUniteOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSpiritBeastUniteOperate)
}

void CGSpiritBeastUniteOperate::InitAsDefaultInstance() {
}

CGSpiritBeastUniteOperate::CGSpiritBeastUniteOperate(const CGSpiritBeastUniteOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSpiritBeastUniteOperate)
}

void CGSpiritBeastUniteOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  target_ = 0;
  zhenid_ = 0;
  posid_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSpiritBeastUniteOperate::~CGSpiritBeastUniteOperate() {
  // @@protoc_insertion_point(destructor:CGSpiritBeastUniteOperate)
  SharedDtor();
}

void CGSpiritBeastUniteOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSpiritBeastUniteOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSpiritBeastUniteOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSpiritBeastUniteOperate_descriptor_;
}

const CGSpiritBeastUniteOperate& CGSpiritBeastUniteOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

CGSpiritBeastUniteOperate* CGSpiritBeastUniteOperate::default_instance_ = NULL;

CGSpiritBeastUniteOperate* CGSpiritBeastUniteOperate::New() const {
  return new CGSpiritBeastUniteOperate;
}

void CGSpiritBeastUniteOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGSpiritBeastUniteOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(operate_, pid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSpiritBeastUniteOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSpiritBeastUniteOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target;
        break;
      }

      // optional int32 target = 2;
      case 2: {
        if (tag == 16) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zhenID;
        break;
      }

      // optional int32 zhenID = 3;
      case 3: {
        if (tag == 24) {
         parse_zhenID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhenid_)));
          set_has_zhenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_posID;
        break;
      }

      // optional int32 posID = 4;
      case 4: {
        if (tag == 32) {
         parse_posID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // optional int64 pid = 5;
      case 5: {
        if (tag == 40) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSpiritBeastUniteOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSpiritBeastUniteOperate)
  return false;
#undef DO_
}

void CGSpiritBeastUniteOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSpiritBeastUniteOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target(), output);
  }

  // optional int32 zhenID = 3;
  if (has_zhenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zhenid(), output);
  }

  // optional int32 posID = 4;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posid(), output);
  }

  // optional int64 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSpiritBeastUniteOperate)
}

::google::protobuf::uint8* CGSpiritBeastUniteOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSpiritBeastUniteOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target(), target);
  }

  // optional int32 zhenID = 3;
  if (has_zhenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zhenid(), target);
  }

  // optional int32 posID = 4;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posid(), target);
  }

  // optional int64 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSpiritBeastUniteOperate)
  return target;
}

int CGSpiritBeastUniteOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 zhenID = 3;
    if (has_zhenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhenid());
    }

    // optional int32 posID = 4;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posid());
    }

    // optional int64 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSpiritBeastUniteOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSpiritBeastUniteOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSpiritBeastUniteOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSpiritBeastUniteOperate::MergeFrom(const CGSpiritBeastUniteOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_zhenid()) {
      set_zhenid(from.zhenid());
    }
    if (from.has_posid()) {
      set_posid(from.posid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSpiritBeastUniteOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSpiritBeastUniteOperate::CopyFrom(const CGSpiritBeastUniteOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSpiritBeastUniteOperate::IsInitialized() const {

  return true;
}

void CGSpiritBeastUniteOperate::Swap(CGSpiritBeastUniteOperate* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(target_, other->target_);
    std::swap(zhenid_, other->zhenid_);
    std::swap(posid_, other->posid_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSpiritBeastUniteOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSpiritBeastUniteOperate_descriptor_;
  metadata.reflection = CGSpiritBeastUniteOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSpiritBeastUniteOperateResult::kResultFieldNumber;
const int GCSpiritBeastUniteOperateResult::kOperateFieldNumber;
const int GCSpiritBeastUniteOperateResult::kTargetFieldNumber;
const int GCSpiritBeastUniteOperateResult::kSbUniteFieldNumber;
const int GCSpiritBeastUniteOperateResult::kSbInfoFieldNumber;
#endif  // !_MSC_VER

GCSpiritBeastUniteOperateResult::GCSpiritBeastUniteOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSpiritBeastUniteOperateResult)
}

void GCSpiritBeastUniteOperateResult::InitAsDefaultInstance() {
  sbunite_ = const_cast< ::SpiritBeastUniteInfo*>(&::SpiritBeastUniteInfo::default_instance());
  sbinfo_ = const_cast< ::SpiritBeastInfo*>(&::SpiritBeastInfo::default_instance());
}

GCSpiritBeastUniteOperateResult::GCSpiritBeastUniteOperateResult(const GCSpiritBeastUniteOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSpiritBeastUniteOperateResult)
}

void GCSpiritBeastUniteOperateResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  operate_ = 0;
  target_ = 0;
  sbunite_ = NULL;
  sbinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSpiritBeastUniteOperateResult::~GCSpiritBeastUniteOperateResult() {
  // @@protoc_insertion_point(destructor:GCSpiritBeastUniteOperateResult)
  SharedDtor();
}

void GCSpiritBeastUniteOperateResult::SharedDtor() {
  if (this != default_instance_) {
    delete sbunite_;
    delete sbinfo_;
  }
}

void GCSpiritBeastUniteOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSpiritBeastUniteOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSpiritBeastUniteOperateResult_descriptor_;
}

const GCSpiritBeastUniteOperateResult& GCSpiritBeastUniteOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

GCSpiritBeastUniteOperateResult* GCSpiritBeastUniteOperateResult::default_instance_ = NULL;

GCSpiritBeastUniteOperateResult* GCSpiritBeastUniteOperateResult::New() const {
  return new GCSpiritBeastUniteOperateResult;
}

void GCSpiritBeastUniteOperateResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSpiritBeastUniteOperateResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(result_, operate_);
    target_ = 0;
    if (has_sbunite()) {
      if (sbunite_ != NULL) sbunite_->::SpiritBeastUniteInfo::Clear();
    }
    if (has_sbinfo()) {
      if (sbinfo_ != NULL) sbinfo_->::SpiritBeastInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSpiritBeastUniteOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSpiritBeastUniteOperateResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // optional int32 operate = 2;
      case 2: {
        if (tag == 16) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target;
        break;
      }

      // optional int32 target = 3;
      case 3: {
        if (tag == 24) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sbUnite;
        break;
      }

      // optional .SpiritBeastUniteInfo sbUnite = 4;
      case 4: {
        if (tag == 34) {
         parse_sbUnite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sbunite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sbInfo;
        break;
      }

      // optional .SpiritBeastInfo sbInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_sbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sbinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSpiritBeastUniteOperateResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSpiritBeastUniteOperateResult)
  return false;
#undef DO_
}

void GCSpiritBeastUniteOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSpiritBeastUniteOperateResult)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate(), output);
  }

  // optional int32 target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target(), output);
  }

  // optional .SpiritBeastUniteInfo sbUnite = 4;
  if (has_sbunite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sbunite(), output);
  }

  // optional .SpiritBeastInfo sbInfo = 5;
  if (has_sbinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sbinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSpiritBeastUniteOperateResult)
}

::google::protobuf::uint8* GCSpiritBeastUniteOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSpiritBeastUniteOperateResult)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate(), target);
  }

  // optional int32 target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target(), target);
  }

  // optional .SpiritBeastUniteInfo sbUnite = 4;
  if (has_sbunite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sbunite(), target);
  }

  // optional .SpiritBeastInfo sbInfo = 5;
  if (has_sbinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sbinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSpiritBeastUniteOperateResult)
  return target;
}

int GCSpiritBeastUniteOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional .SpiritBeastUniteInfo sbUnite = 4;
    if (has_sbunite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sbunite());
    }

    // optional .SpiritBeastInfo sbInfo = 5;
    if (has_sbinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sbinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSpiritBeastUniteOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSpiritBeastUniteOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSpiritBeastUniteOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSpiritBeastUniteOperateResult::MergeFrom(const GCSpiritBeastUniteOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_sbunite()) {
      mutable_sbunite()->::SpiritBeastUniteInfo::MergeFrom(from.sbunite());
    }
    if (from.has_sbinfo()) {
      mutable_sbinfo()->::SpiritBeastInfo::MergeFrom(from.sbinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSpiritBeastUniteOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSpiritBeastUniteOperateResult::CopyFrom(const GCSpiritBeastUniteOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSpiritBeastUniteOperateResult::IsInitialized() const {

  return true;
}

void GCSpiritBeastUniteOperateResult::Swap(GCSpiritBeastUniteOperateResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(operate_, other->operate_);
    std::swap(target_, other->target_);
    std::swap(sbunite_, other->sbunite_);
    std::swap(sbinfo_, other->sbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSpiritBeastUniteOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSpiritBeastUniteOperateResult_descriptor_;
  metadata.reflection = GCSpiritBeastUniteOperateResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSpiritBeastFree::kPidFieldNumber;
#endif  // !_MSC_VER

CGSpiritBeastFree::CGSpiritBeastFree()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSpiritBeastFree)
}

void CGSpiritBeastFree::InitAsDefaultInstance() {
}

CGSpiritBeastFree::CGSpiritBeastFree(const CGSpiritBeastFree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSpiritBeastFree)
}

void CGSpiritBeastFree::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSpiritBeastFree::~CGSpiritBeastFree() {
  // @@protoc_insertion_point(destructor:CGSpiritBeastFree)
  SharedDtor();
}

void CGSpiritBeastFree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSpiritBeastFree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSpiritBeastFree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSpiritBeastFree_descriptor_;
}

const CGSpiritBeastFree& CGSpiritBeastFree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

CGSpiritBeastFree* CGSpiritBeastFree::default_instance_ = NULL;

CGSpiritBeastFree* CGSpiritBeastFree::New() const {
  return new CGSpiritBeastFree;
}

void CGSpiritBeastFree::Clear() {
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSpiritBeastFree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSpiritBeastFree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSpiritBeastFree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSpiritBeastFree)
  return false;
#undef DO_
}

void CGSpiritBeastFree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSpiritBeastFree)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSpiritBeastFree)
}

::google::protobuf::uint8* CGSpiritBeastFree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSpiritBeastFree)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSpiritBeastFree)
  return target;
}

int CGSpiritBeastFree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSpiritBeastFree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSpiritBeastFree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSpiritBeastFree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSpiritBeastFree::MergeFrom(const CGSpiritBeastFree& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSpiritBeastFree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSpiritBeastFree::CopyFrom(const CGSpiritBeastFree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSpiritBeastFree::IsInitialized() const {

  return true;
}

void CGSpiritBeastFree::Swap(CGSpiritBeastFree* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSpiritBeastFree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSpiritBeastFree_descriptor_;
  metadata.reflection = CGSpiritBeastFree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSpiritBeastFreeResult::kPidFieldNumber;
#endif  // !_MSC_VER

GCSpiritBeastFreeResult::GCSpiritBeastFreeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSpiritBeastFreeResult)
}

void GCSpiritBeastFreeResult::InitAsDefaultInstance() {
}

GCSpiritBeastFreeResult::GCSpiritBeastFreeResult(const GCSpiritBeastFreeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSpiritBeastFreeResult)
}

void GCSpiritBeastFreeResult::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSpiritBeastFreeResult::~GCSpiritBeastFreeResult() {
  // @@protoc_insertion_point(destructor:GCSpiritBeastFreeResult)
  SharedDtor();
}

void GCSpiritBeastFreeResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSpiritBeastFreeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSpiritBeastFreeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSpiritBeastFreeResult_descriptor_;
}

const GCSpiritBeastFreeResult& GCSpiritBeastFreeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

GCSpiritBeastFreeResult* GCSpiritBeastFreeResult::default_instance_ = NULL;

GCSpiritBeastFreeResult* GCSpiritBeastFreeResult::New() const {
  return new GCSpiritBeastFreeResult;
}

void GCSpiritBeastFreeResult::Clear() {
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSpiritBeastFreeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSpiritBeastFreeResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSpiritBeastFreeResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSpiritBeastFreeResult)
  return false;
#undef DO_
}

void GCSpiritBeastFreeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSpiritBeastFreeResult)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSpiritBeastFreeResult)
}

::google::protobuf::uint8* GCSpiritBeastFreeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSpiritBeastFreeResult)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSpiritBeastFreeResult)
  return target;
}

int GCSpiritBeastFreeResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSpiritBeastFreeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSpiritBeastFreeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSpiritBeastFreeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSpiritBeastFreeResult::MergeFrom(const GCSpiritBeastFreeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSpiritBeastFreeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSpiritBeastFreeResult::CopyFrom(const GCSpiritBeastFreeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSpiritBeastFreeResult::IsInitialized() const {

  return true;
}

void GCSpiritBeastFreeResult::Swap(GCSpiritBeastFreeResult* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSpiritBeastFreeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSpiritBeastFreeResult_descriptor_;
  metadata.reflection = GCSpiritBeastFreeResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSpiritBeastBreed::kOperateFieldNumber;
const int CGSpiritBeastBreed::kBreedTypeFieldNumber;
const int CGSpiritBeastBreed::kPidFieldNumber;
#endif  // !_MSC_VER

CGSpiritBeastBreed::CGSpiritBeastBreed()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSpiritBeastBreed)
}

void CGSpiritBeastBreed::InitAsDefaultInstance() {
}

CGSpiritBeastBreed::CGSpiritBeastBreed(const CGSpiritBeastBreed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSpiritBeastBreed)
}

void CGSpiritBeastBreed::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  breedtype_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSpiritBeastBreed::~CGSpiritBeastBreed() {
  // @@protoc_insertion_point(destructor:CGSpiritBeastBreed)
  SharedDtor();
}

void CGSpiritBeastBreed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSpiritBeastBreed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSpiritBeastBreed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSpiritBeastBreed_descriptor_;
}

const CGSpiritBeastBreed& CGSpiritBeastBreed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

CGSpiritBeastBreed* CGSpiritBeastBreed::default_instance_ = NULL;

CGSpiritBeastBreed* CGSpiritBeastBreed::New() const {
  return new CGSpiritBeastBreed;
}

void CGSpiritBeastBreed::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGSpiritBeastBreed*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, pid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSpiritBeastBreed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSpiritBeastBreed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_breedType;
        break;
      }

      // optional int32 breedType = 2;
      case 2: {
        if (tag == 16) {
         parse_breedType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breedtype_)));
          set_has_breedtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // optional int64 pid = 3;
      case 3: {
        if (tag == 24) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSpiritBeastBreed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSpiritBeastBreed)
  return false;
#undef DO_
}

void CGSpiritBeastBreed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSpiritBeastBreed)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 breedType = 2;
  if (has_breedtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->breedtype(), output);
  }

  // optional int64 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSpiritBeastBreed)
}

::google::protobuf::uint8* CGSpiritBeastBreed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSpiritBeastBreed)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 breedType = 2;
  if (has_breedtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->breedtype(), target);
  }

  // optional int64 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSpiritBeastBreed)
  return target;
}

int CGSpiritBeastBreed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 breedType = 2;
    if (has_breedtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breedtype());
    }

    // optional int64 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSpiritBeastBreed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSpiritBeastBreed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSpiritBeastBreed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSpiritBeastBreed::MergeFrom(const CGSpiritBeastBreed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_breedtype()) {
      set_breedtype(from.breedtype());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSpiritBeastBreed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSpiritBeastBreed::CopyFrom(const CGSpiritBeastBreed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSpiritBeastBreed::IsInitialized() const {

  return true;
}

void CGSpiritBeastBreed::Swap(CGSpiritBeastBreed* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(breedtype_, other->breedtype_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSpiritBeastBreed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSpiritBeastBreed_descriptor_;
  metadata.reflection = CGSpiritBeastBreed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSpiritBeastBreedResult::kOperateFieldNumber;
const int GCSpiritBeastBreedResult::kBreedTypeFieldNumber;
const int GCSpiritBeastBreedResult::kObjectTypeFieldNumber;
const int GCSpiritBeastBreedResult::kSbInfoFieldNumber;
const int GCSpiritBeastBreedResult::kReceiveTimeFieldNumber;
const int GCSpiritBeastBreedResult::kObjectNameFieldNumber;
const int GCSpiritBeastBreedResult::kLuckyFieldNumber;
const int GCSpiritBeastBreedResult::kBreedResultFieldNumber;
#endif  // !_MSC_VER

GCSpiritBeastBreedResult::GCSpiritBeastBreedResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSpiritBeastBreedResult)
}

void GCSpiritBeastBreedResult::InitAsDefaultInstance() {
}

GCSpiritBeastBreedResult::GCSpiritBeastBreedResult(const GCSpiritBeastBreedResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSpiritBeastBreedResult)
}

void GCSpiritBeastBreedResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operate_ = 0;
  breedtype_ = 0;
  objecttype_ = 0;
  receivetime_ = GOOGLE_LONGLONG(0);
  objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lucky_ = 0;
  breedresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSpiritBeastBreedResult::~GCSpiritBeastBreedResult() {
  // @@protoc_insertion_point(destructor:GCSpiritBeastBreedResult)
  SharedDtor();
}

void GCSpiritBeastBreedResult::SharedDtor() {
  if (objectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete objectname_;
  }
  if (breedresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete breedresult_;
  }
  if (this != default_instance_) {
  }
}

void GCSpiritBeastBreedResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSpiritBeastBreedResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSpiritBeastBreedResult_descriptor_;
}

const GCSpiritBeastBreedResult& GCSpiritBeastBreedResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

GCSpiritBeastBreedResult* GCSpiritBeastBreedResult::default_instance_ = NULL;

GCSpiritBeastBreedResult* GCSpiritBeastBreedResult::New() const {
  return new GCSpiritBeastBreedResult;
}

void GCSpiritBeastBreedResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSpiritBeastBreedResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(operate_, breedtype_);
    ZR_(receivetime_, lucky_);
    if (has_objectname()) {
      if (objectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        objectname_->clear();
      }
    }
    if (has_breedresult()) {
      if (breedresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        breedresult_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  sbinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSpiritBeastBreedResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSpiritBeastBreedResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_breedType;
        break;
      }

      // optional int32 breedType = 2;
      case 2: {
        if (tag == 16) {
         parse_breedType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breedtype_)));
          set_has_breedtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_objectType;
        break;
      }

      // optional int32 objectType = 3;
      case 3: {
        if (tag == 24) {
         parse_objectType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objecttype_)));
          set_has_objecttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sbInfo;
        break;
      }

      // repeated .SpiritBeastInfo sbInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_sbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sbinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sbInfo;
        if (input->ExpectTag(40)) goto parse_receiveTime;
        break;
      }

      // optional int64 receiveTime = 5;
      case 5: {
        if (tag == 40) {
         parse_receiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivetime_)));
          set_has_receivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_objectName;
        break;
      }

      // optional string objectName = 6;
      case 6: {
        if (tag == 50) {
         parse_objectName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->objectname().data(), this->objectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "objectname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lucky;
        break;
      }

      // optional int32 lucky = 7;
      case 7: {
        if (tag == 56) {
         parse_lucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucky_)));
          set_has_lucky();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_breedResult;
        break;
      }

      // optional string breedResult = 8;
      case 8: {
        if (tag == 66) {
         parse_breedResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_breedresult()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->breedresult().data(), this->breedresult().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "breedresult");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSpiritBeastBreedResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSpiritBeastBreedResult)
  return false;
#undef DO_
}

void GCSpiritBeastBreedResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSpiritBeastBreedResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 breedType = 2;
  if (has_breedtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->breedtype(), output);
  }

  // optional int32 objectType = 3;
  if (has_objecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objecttype(), output);
  }

  // repeated .SpiritBeastInfo sbInfo = 4;
  for (int i = 0; i < this->sbinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sbinfo(i), output);
  }

  // optional int64 receiveTime = 5;
  if (has_receivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->receivetime(), output);
  }

  // optional string objectName = 6;
  if (has_objectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objectname().data(), this->objectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "objectname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->objectname(), output);
  }

  // optional int32 lucky = 7;
  if (has_lucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lucky(), output);
  }

  // optional string breedResult = 8;
  if (has_breedresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->breedresult().data(), this->breedresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "breedresult");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->breedresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSpiritBeastBreedResult)
}

::google::protobuf::uint8* GCSpiritBeastBreedResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSpiritBeastBreedResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 breedType = 2;
  if (has_breedtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->breedtype(), target);
  }

  // optional int32 objectType = 3;
  if (has_objecttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objecttype(), target);
  }

  // repeated .SpiritBeastInfo sbInfo = 4;
  for (int i = 0; i < this->sbinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sbinfo(i), target);
  }

  // optional int64 receiveTime = 5;
  if (has_receivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->receivetime(), target);
  }

  // optional string objectName = 6;
  if (has_objectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objectname().data(), this->objectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "objectname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->objectname(), target);
  }

  // optional int32 lucky = 7;
  if (has_lucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lucky(), target);
  }

  // optional string breedResult = 8;
  if (has_breedresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->breedresult().data(), this->breedresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "breedresult");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->breedresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSpiritBeastBreedResult)
  return target;
}

int GCSpiritBeastBreedResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 breedType = 2;
    if (has_breedtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breedtype());
    }

    // optional int32 objectType = 3;
    if (has_objecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objecttype());
    }

    // optional int64 receiveTime = 5;
    if (has_receivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receivetime());
    }

    // optional string objectName = 6;
    if (has_objectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectname());
    }

    // optional int32 lucky = 7;
    if (has_lucky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucky());
    }

    // optional string breedResult = 8;
    if (has_breedresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->breedresult());
    }

  }
  // repeated .SpiritBeastInfo sbInfo = 4;
  total_size += 1 * this->sbinfo_size();
  for (int i = 0; i < this->sbinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sbinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSpiritBeastBreedResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSpiritBeastBreedResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSpiritBeastBreedResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSpiritBeastBreedResult::MergeFrom(const GCSpiritBeastBreedResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  sbinfo_.MergeFrom(from.sbinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_breedtype()) {
      set_breedtype(from.breedtype());
    }
    if (from.has_objecttype()) {
      set_objecttype(from.objecttype());
    }
    if (from.has_receivetime()) {
      set_receivetime(from.receivetime());
    }
    if (from.has_objectname()) {
      set_objectname(from.objectname());
    }
    if (from.has_lucky()) {
      set_lucky(from.lucky());
    }
    if (from.has_breedresult()) {
      set_breedresult(from.breedresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSpiritBeastBreedResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSpiritBeastBreedResult::CopyFrom(const GCSpiritBeastBreedResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSpiritBeastBreedResult::IsInitialized() const {

  return true;
}

void GCSpiritBeastBreedResult::Swap(GCSpiritBeastBreedResult* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(breedtype_, other->breedtype_);
    std::swap(objecttype_, other->objecttype_);
    sbinfo_.Swap(&other->sbinfo_);
    std::swap(receivetime_, other->receivetime_);
    std::swap(objectname_, other->objectname_);
    std::swap(lucky_, other->lucky_);
    std::swap(breedresult_, other->breedresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSpiritBeastBreedResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSpiritBeastBreedResult_descriptor_;
  metadata.reflection = GCSpiritBeastBreedResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGSpiritBeastHatch::CGSpiritBeastHatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSpiritBeastHatch)
}

void CGSpiritBeastHatch::InitAsDefaultInstance() {
}

CGSpiritBeastHatch::CGSpiritBeastHatch(const CGSpiritBeastHatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSpiritBeastHatch)
}

void CGSpiritBeastHatch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSpiritBeastHatch::~CGSpiritBeastHatch() {
  // @@protoc_insertion_point(destructor:CGSpiritBeastHatch)
  SharedDtor();
}

void CGSpiritBeastHatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSpiritBeastHatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSpiritBeastHatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSpiritBeastHatch_descriptor_;
}

const CGSpiritBeastHatch& CGSpiritBeastHatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

CGSpiritBeastHatch* CGSpiritBeastHatch::default_instance_ = NULL;

CGSpiritBeastHatch* CGSpiritBeastHatch::New() const {
  return new CGSpiritBeastHatch;
}

void CGSpiritBeastHatch::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSpiritBeastHatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSpiritBeastHatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGSpiritBeastHatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSpiritBeastHatch)
  return false;
#undef DO_
}

void CGSpiritBeastHatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSpiritBeastHatch)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSpiritBeastHatch)
}

::google::protobuf::uint8* CGSpiritBeastHatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSpiritBeastHatch)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSpiritBeastHatch)
  return target;
}

int CGSpiritBeastHatch::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSpiritBeastHatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSpiritBeastHatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSpiritBeastHatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSpiritBeastHatch::MergeFrom(const CGSpiritBeastHatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSpiritBeastHatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSpiritBeastHatch::CopyFrom(const CGSpiritBeastHatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSpiritBeastHatch::IsInitialized() const {

  return true;
}

void CGSpiritBeastHatch::Swap(CGSpiritBeastHatch* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSpiritBeastHatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSpiritBeastHatch_descriptor_;
  metadata.reflection = CGSpiritBeastHatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSpiritBeastHatchResult::kSbInfoFieldNumber;
#endif  // !_MSC_VER

GCSpiritBeastHatchResult::GCSpiritBeastHatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSpiritBeastHatchResult)
}

void GCSpiritBeastHatchResult::InitAsDefaultInstance() {
  sbinfo_ = const_cast< ::SpiritBeastInfo*>(&::SpiritBeastInfo::default_instance());
}

GCSpiritBeastHatchResult::GCSpiritBeastHatchResult(const GCSpiritBeastHatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSpiritBeastHatchResult)
}

void GCSpiritBeastHatchResult::SharedCtor() {
  _cached_size_ = 0;
  sbinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSpiritBeastHatchResult::~GCSpiritBeastHatchResult() {
  // @@protoc_insertion_point(destructor:GCSpiritBeastHatchResult)
  SharedDtor();
}

void GCSpiritBeastHatchResult::SharedDtor() {
  if (this != default_instance_) {
    delete sbinfo_;
  }
}

void GCSpiritBeastHatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSpiritBeastHatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSpiritBeastHatchResult_descriptor_;
}

const GCSpiritBeastHatchResult& GCSpiritBeastHatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

GCSpiritBeastHatchResult* GCSpiritBeastHatchResult::default_instance_ = NULL;

GCSpiritBeastHatchResult* GCSpiritBeastHatchResult::New() const {
  return new GCSpiritBeastHatchResult;
}

void GCSpiritBeastHatchResult::Clear() {
  if (has_sbinfo()) {
    if (sbinfo_ != NULL) sbinfo_->::SpiritBeastInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSpiritBeastHatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSpiritBeastHatchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SpiritBeastInfo sbInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sbinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSpiritBeastHatchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSpiritBeastHatchResult)
  return false;
#undef DO_
}

void GCSpiritBeastHatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSpiritBeastHatchResult)
  // optional .SpiritBeastInfo sbInfo = 1;
  if (has_sbinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sbinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSpiritBeastHatchResult)
}

::google::protobuf::uint8* GCSpiritBeastHatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSpiritBeastHatchResult)
  // optional .SpiritBeastInfo sbInfo = 1;
  if (has_sbinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sbinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSpiritBeastHatchResult)
  return target;
}

int GCSpiritBeastHatchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SpiritBeastInfo sbInfo = 1;
    if (has_sbinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sbinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSpiritBeastHatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSpiritBeastHatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSpiritBeastHatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSpiritBeastHatchResult::MergeFrom(const GCSpiritBeastHatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sbinfo()) {
      mutable_sbinfo()->::SpiritBeastInfo::MergeFrom(from.sbinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSpiritBeastHatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSpiritBeastHatchResult::CopyFrom(const GCSpiritBeastHatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSpiritBeastHatchResult::IsInitialized() const {

  return true;
}

void GCSpiritBeastHatchResult::Swap(GCSpiritBeastHatchResult* other) {
  if (other != this) {
    std::swap(sbinfo_, other->sbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSpiritBeastHatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSpiritBeastHatchResult_descriptor_;
  metadata.reflection = GCSpiritBeastHatchResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSpiritBeastRelive::kPidFieldNumber;
const int GCSpiritBeastRelive::kReliveTimeFieldNumber;
const int GCSpiritBeastRelive::kFightPidFieldNumber;
#endif  // !_MSC_VER

GCSpiritBeastRelive::GCSpiritBeastRelive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSpiritBeastRelive)
}

void GCSpiritBeastRelive::InitAsDefaultInstance() {
}

GCSpiritBeastRelive::GCSpiritBeastRelive(const GCSpiritBeastRelive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSpiritBeastRelive)
}

void GCSpiritBeastRelive::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  relivetime_ = GOOGLE_LONGLONG(0);
  fightpid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSpiritBeastRelive::~GCSpiritBeastRelive() {
  // @@protoc_insertion_point(destructor:GCSpiritBeastRelive)
  SharedDtor();
}

void GCSpiritBeastRelive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSpiritBeastRelive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSpiritBeastRelive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSpiritBeastRelive_descriptor_;
}

const GCSpiritBeastRelive& GCSpiritBeastRelive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

GCSpiritBeastRelive* GCSpiritBeastRelive::default_instance_ = NULL;

GCSpiritBeastRelive* GCSpiritBeastRelive::New() const {
  return new GCSpiritBeastRelive;
}

void GCSpiritBeastRelive::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSpiritBeastRelive*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, fightpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSpiritBeastRelive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSpiritBeastRelive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reliveTime;
        break;
      }

      // optional int64 reliveTime = 2;
      case 2: {
        if (tag == 16) {
         parse_reliveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &relivetime_)));
          set_has_relivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fightPid;
        break;
      }

      // optional int64 fightPid = 3;
      case 3: {
        if (tag == 24) {
         parse_fightPid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fightpid_)));
          set_has_fightpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSpiritBeastRelive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSpiritBeastRelive)
  return false;
#undef DO_
}

void GCSpiritBeastRelive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSpiritBeastRelive)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int64 reliveTime = 2;
  if (has_relivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->relivetime(), output);
  }

  // optional int64 fightPid = 3;
  if (has_fightpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->fightpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSpiritBeastRelive)
}

::google::protobuf::uint8* GCSpiritBeastRelive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSpiritBeastRelive)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int64 reliveTime = 2;
  if (has_relivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->relivetime(), target);
  }

  // optional int64 fightPid = 3;
  if (has_fightpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->fightpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSpiritBeastRelive)
  return target;
}

int GCSpiritBeastRelive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int64 reliveTime = 2;
    if (has_relivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->relivetime());
    }

    // optional int64 fightPid = 3;
    if (has_fightpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fightpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSpiritBeastRelive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSpiritBeastRelive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSpiritBeastRelive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSpiritBeastRelive::MergeFrom(const GCSpiritBeastRelive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_relivetime()) {
      set_relivetime(from.relivetime());
    }
    if (from.has_fightpid()) {
      set_fightpid(from.fightpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSpiritBeastRelive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSpiritBeastRelive::CopyFrom(const GCSpiritBeastRelive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSpiritBeastRelive::IsInitialized() const {

  return true;
}

void GCSpiritBeastRelive::Swap(GCSpiritBeastRelive* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(relivetime_, other->relivetime_);
    std::swap(fightpid_, other->fightpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSpiritBeastRelive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSpiritBeastRelive_descriptor_;
  metadata.reflection = GCSpiritBeastRelive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSpiritBeastCatch::kOperateFieldNumber;
const int CGSpiritBeastCatch::kPidFieldNumber;
#endif  // !_MSC_VER

CGSpiritBeastCatch::CGSpiritBeastCatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSpiritBeastCatch)
}

void CGSpiritBeastCatch::InitAsDefaultInstance() {
}

CGSpiritBeastCatch::CGSpiritBeastCatch(const CGSpiritBeastCatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSpiritBeastCatch)
}

void CGSpiritBeastCatch::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSpiritBeastCatch::~CGSpiritBeastCatch() {
  // @@protoc_insertion_point(destructor:CGSpiritBeastCatch)
  SharedDtor();
}

void CGSpiritBeastCatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSpiritBeastCatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSpiritBeastCatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSpiritBeastCatch_descriptor_;
}

const CGSpiritBeastCatch& CGSpiritBeastCatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

CGSpiritBeastCatch* CGSpiritBeastCatch::default_instance_ = NULL;

CGSpiritBeastCatch* CGSpiritBeastCatch::New() const {
  return new CGSpiritBeastCatch;
}

void CGSpiritBeastCatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGSpiritBeastCatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, operate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSpiritBeastCatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSpiritBeastCatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional int64 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSpiritBeastCatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSpiritBeastCatch)
  return false;
#undef DO_
}

void CGSpiritBeastCatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSpiritBeastCatch)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSpiritBeastCatch)
}

::google::protobuf::uint8* CGSpiritBeastCatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSpiritBeastCatch)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSpiritBeastCatch)
  return target;
}

int CGSpiritBeastCatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int64 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSpiritBeastCatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSpiritBeastCatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSpiritBeastCatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSpiritBeastCatch::MergeFrom(const CGSpiritBeastCatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSpiritBeastCatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSpiritBeastCatch::CopyFrom(const CGSpiritBeastCatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSpiritBeastCatch::IsInitialized() const {

  return true;
}

void CGSpiritBeastCatch::Swap(CGSpiritBeastCatch* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSpiritBeastCatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSpiritBeastCatch_descriptor_;
  metadata.reflection = CGSpiritBeastCatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSpiritBeastCatchResult::kOperateFieldNumber;
const int GCSpiritBeastCatchResult::kPidFieldNumber;
const int GCSpiritBeastCatchResult::kPlayerPidFieldNumber;
const int GCSpiritBeastCatchResult::kTimeFieldNumber;
const int GCSpiritBeastCatchResult::kSbInfoFieldNumber;
#endif  // !_MSC_VER

GCSpiritBeastCatchResult::GCSpiritBeastCatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSpiritBeastCatchResult)
}

void GCSpiritBeastCatchResult::InitAsDefaultInstance() {
  sbinfo_ = const_cast< ::SpiritBeastInfo*>(&::SpiritBeastInfo::default_instance());
}

GCSpiritBeastCatchResult::GCSpiritBeastCatchResult(const GCSpiritBeastCatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSpiritBeastCatchResult)
}

void GCSpiritBeastCatchResult::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  playerpid_ = GOOGLE_LONGLONG(0);
  time_ = 0;
  sbinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSpiritBeastCatchResult::~GCSpiritBeastCatchResult() {
  // @@protoc_insertion_point(destructor:GCSpiritBeastCatchResult)
  SharedDtor();
}

void GCSpiritBeastCatchResult::SharedDtor() {
  if (this != default_instance_) {
    delete sbinfo_;
  }
}

void GCSpiritBeastCatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSpiritBeastCatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSpiritBeastCatchResult_descriptor_;
}

const GCSpiritBeastCatchResult& GCSpiritBeastCatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiritBeastMessage_2eproto();
  return *default_instance_;
}

GCSpiritBeastCatchResult* GCSpiritBeastCatchResult::default_instance_ = NULL;

GCSpiritBeastCatchResult* GCSpiritBeastCatchResult::New() const {
  return new GCSpiritBeastCatchResult;
}

void GCSpiritBeastCatchResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSpiritBeastCatchResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(pid_, playerpid_);
    if (has_sbinfo()) {
      if (sbinfo_ != NULL) sbinfo_->::SpiritBeastInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSpiritBeastCatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSpiritBeastCatchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional int64 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerPid;
        break;
      }

      // optional int64 playerPid = 3;
      case 3: {
        if (tag == 24) {
         parse_playerPid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerpid_)));
          set_has_playerpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sbInfo;
        break;
      }

      // optional .SpiritBeastInfo sbInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_sbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sbinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSpiritBeastCatchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSpiritBeastCatchResult)
  return false;
#undef DO_
}

void GCSpiritBeastCatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSpiritBeastCatchResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pid(), output);
  }

  // optional int64 playerPid = 3;
  if (has_playerpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->playerpid(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // optional .SpiritBeastInfo sbInfo = 5;
  if (has_sbinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sbinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSpiritBeastCatchResult)
}

::google::protobuf::uint8* GCSpiritBeastCatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSpiritBeastCatchResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pid(), target);
  }

  // optional int64 playerPid = 3;
  if (has_playerpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->playerpid(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  // optional .SpiritBeastInfo sbInfo = 5;
  if (has_sbinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sbinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSpiritBeastCatchResult)
  return target;
}

int GCSpiritBeastCatchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int64 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int64 playerPid = 3;
    if (has_playerpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerpid());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional .SpiritBeastInfo sbInfo = 5;
    if (has_sbinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sbinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSpiritBeastCatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSpiritBeastCatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSpiritBeastCatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSpiritBeastCatchResult::MergeFrom(const GCSpiritBeastCatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_playerpid()) {
      set_playerpid(from.playerpid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sbinfo()) {
      mutable_sbinfo()->::SpiritBeastInfo::MergeFrom(from.sbinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSpiritBeastCatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSpiritBeastCatchResult::CopyFrom(const GCSpiritBeastCatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSpiritBeastCatchResult::IsInitialized() const {

  return true;
}

void GCSpiritBeastCatchResult::Swap(GCSpiritBeastCatchResult* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(pid_, other->pid_);
    std::swap(playerpid_, other->playerpid_);
    std::swap(time_, other->time_);
    std::swap(sbinfo_, other->sbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSpiritBeastCatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSpiritBeastCatchResult_descriptor_;
  metadata.reflection = GCSpiritBeastCatchResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
