// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoneMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StoneMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGStone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGStone_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCStone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCStone_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoneSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoneSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoneInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_StoneMessage_2eproto() {
  protobuf_AddDesc_StoneMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StoneMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGStone_descriptor_ = file->message_type(0);
  static const int CGStone_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGStone, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGStone, slotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGStone, holeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGStone, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGStone, addbind_),
  };
  CGStone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGStone_descriptor_,
      CGStone::default_instance_,
      CGStone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGStone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGStone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGStone));
  GCStone_descriptor_ = file->message_type(1);
  static const int GCStone_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStone, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStone, stoneslotlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStone, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStone, gemsyms_),
  };
  GCStone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCStone_descriptor_,
      GCStone::default_instance_,
      GCStone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCStone));
  StoneSlotInfo_descriptor_ = file->message_type(2);
  static const int StoneSlotInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneSlotInfo, slotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneSlotInfo, stoneinfo_),
  };
  StoneSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoneSlotInfo_descriptor_,
      StoneSlotInfo::default_instance_,
      StoneSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoneSlotInfo));
  StoneInfo_descriptor_ = file->message_type(3);
  static const int StoneInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInfo, holeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInfo, templateid_),
  };
  StoneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoneInfo_descriptor_,
      StoneInfo::default_instance_,
      StoneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoneInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StoneMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGStone_descriptor_, &CGStone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCStone_descriptor_, &GCStone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoneSlotInfo_descriptor_, &StoneSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoneInfo_descriptor_, &StoneInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StoneMessage_2eproto() {
  delete CGStone::default_instance_;
  delete CGStone_reflection_;
  delete GCStone::default_instance_;
  delete GCStone_reflection_;
  delete StoneSlotInfo::default_instance_;
  delete StoneSlotInfo_reflection_;
  delete StoneInfo::default_instance_;
  delete StoneInfo_reflection_;
}

void protobuf_AddDesc_StoneMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022StoneMessage.proto\"\\\n\007CGStone\022\014\n\004type\030"
    "\001 \001(\005\022\016\n\006slotId\030\002 \001(\005\022\016\n\006holeId\030\003 \001(\005\022\022\n"
    "\ntemplateId\030\004 \001(\005\022\017\n\007addBind\030\005 \001(\005\"b\n\007GC"
    "Stone\022\014\n\004type\030\001 \001(\005\022%\n\rstoneSlotList\030\002 \003"
    "(\0132\016.StoneSlotInfo\022\021\n\terrorCode\030\003 \001(\005\022\017\n"
    "\007gemSyms\030\004 \003(\005\">\n\rStoneSlotInfo\022\016\n\006slotI"
    "d\030\001 \001(\005\022\035\n\tstoneInfo\030\002 \003(\0132\n.StoneInfo\"/"
    "\n\tStoneInfo\022\016\n\006holeId\030\001 \001(\005\022\022\n\ntemplateI"
    "d\030\002 \001(\005B\031\n\027com.mile.common.message", 354);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StoneMessage.proto", &protobuf_RegisterTypes);
  CGStone::default_instance_ = new CGStone();
  GCStone::default_instance_ = new GCStone();
  StoneSlotInfo::default_instance_ = new StoneSlotInfo();
  StoneInfo::default_instance_ = new StoneInfo();
  CGStone::default_instance_->InitAsDefaultInstance();
  GCStone::default_instance_->InitAsDefaultInstance();
  StoneSlotInfo::default_instance_->InitAsDefaultInstance();
  StoneInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StoneMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StoneMessage_2eproto {
  StaticDescriptorInitializer_StoneMessage_2eproto() {
    protobuf_AddDesc_StoneMessage_2eproto();
  }
} static_descriptor_initializer_StoneMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGStone::kTypeFieldNumber;
const int CGStone::kSlotIdFieldNumber;
const int CGStone::kHoleIdFieldNumber;
const int CGStone::kTemplateIdFieldNumber;
const int CGStone::kAddBindFieldNumber;
#endif  // !_MSC_VER

CGStone::CGStone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGStone)
}

void CGStone::InitAsDefaultInstance() {
}

CGStone::CGStone(const CGStone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGStone)
}

void CGStone::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  slotid_ = 0;
  holeid_ = 0;
  templateid_ = 0;
  addbind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGStone::~CGStone() {
  // @@protoc_insertion_point(destructor:CGStone)
  SharedDtor();
}

void CGStone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGStone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGStone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGStone_descriptor_;
}

const CGStone& CGStone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StoneMessage_2eproto();
  return *default_instance_;
}

CGStone* CGStone::default_instance_ = NULL;

CGStone* CGStone::New() const {
  return new CGStone;
}

void CGStone::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGStone*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, addbind_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGStone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGStone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slotId;
        break;
      }

      // optional int32 slotId = 2;
      case 2: {
        if (tag == 16) {
         parse_slotId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slotid_)));
          set_has_slotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_holeId;
        break;
      }

      // optional int32 holeId = 3;
      case 3: {
        if (tag == 24) {
         parse_holeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holeid_)));
          set_has_holeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_templateId;
        break;
      }

      // optional int32 templateId = 4;
      case 4: {
        if (tag == 32) {
         parse_templateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_addBind;
        break;
      }

      // optional int32 addBind = 5;
      case 5: {
        if (tag == 40) {
         parse_addBind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addbind_)));
          set_has_addbind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGStone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGStone)
  return false;
#undef DO_
}

void CGStone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGStone)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 slotId = 2;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slotid(), output);
  }

  // optional int32 holeId = 3;
  if (has_holeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->holeid(), output);
  }

  // optional int32 templateId = 4;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->templateid(), output);
  }

  // optional int32 addBind = 5;
  if (has_addbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->addbind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGStone)
}

::google::protobuf::uint8* CGStone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGStone)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 slotId = 2;
  if (has_slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slotid(), target);
  }

  // optional int32 holeId = 3;
  if (has_holeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->holeid(), target);
  }

  // optional int32 templateId = 4;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->templateid(), target);
  }

  // optional int32 addBind = 5;
  if (has_addbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->addbind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGStone)
  return target;
}

int CGStone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 slotId = 2;
    if (has_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slotid());
    }

    // optional int32 holeId = 3;
    if (has_holeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holeid());
    }

    // optional int32 templateId = 4;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->templateid());
    }

    // optional int32 addBind = 5;
    if (has_addbind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addbind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGStone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGStone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGStone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGStone::MergeFrom(const CGStone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_slotid()) {
      set_slotid(from.slotid());
    }
    if (from.has_holeid()) {
      set_holeid(from.holeid());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_addbind()) {
      set_addbind(from.addbind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGStone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGStone::CopyFrom(const CGStone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGStone::IsInitialized() const {

  return true;
}

void CGStone::Swap(CGStone* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(slotid_, other->slotid_);
    std::swap(holeid_, other->holeid_);
    std::swap(templateid_, other->templateid_);
    std::swap(addbind_, other->addbind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGStone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGStone_descriptor_;
  metadata.reflection = CGStone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCStone::kTypeFieldNumber;
const int GCStone::kStoneSlotListFieldNumber;
const int GCStone::kErrorCodeFieldNumber;
const int GCStone::kGemSymsFieldNumber;
#endif  // !_MSC_VER

GCStone::GCStone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCStone)
}

void GCStone::InitAsDefaultInstance() {
}

GCStone::GCStone(const GCStone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCStone)
}

void GCStone::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCStone::~GCStone() {
  // @@protoc_insertion_point(destructor:GCStone)
  SharedDtor();
}

void GCStone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCStone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCStone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCStone_descriptor_;
}

const GCStone& GCStone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StoneMessage_2eproto();
  return *default_instance_;
}

GCStone* GCStone::default_instance_ = NULL;

GCStone* GCStone::New() const {
  return new GCStone;
}

void GCStone::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCStone*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, errorcode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  stoneslotlist_.Clear();
  gemsyms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCStone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCStone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stoneSlotList;
        break;
      }

      // repeated .StoneSlotInfo stoneSlotList = 2;
      case 2: {
        if (tag == 18) {
         parse_stoneSlotList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stoneslotlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stoneSlotList;
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 3;
      case 3: {
        if (tag == 24) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gemSyms;
        break;
      }

      // repeated int32 gemSyms = 4;
      case 4: {
        if (tag == 32) {
         parse_gemSyms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_gemsyms())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gemsyms())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gemSyms;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCStone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCStone)
  return false;
#undef DO_
}

void GCStone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCStone)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .StoneSlotInfo stoneSlotList = 2;
  for (int i = 0; i < this->stoneslotlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stoneslotlist(i), output);
  }

  // optional int32 errorCode = 3;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  // repeated int32 gemSyms = 4;
  for (int i = 0; i < this->gemsyms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->gemsyms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCStone)
}

::google::protobuf::uint8* GCStone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCStone)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .StoneSlotInfo stoneSlotList = 2;
  for (int i = 0; i < this->stoneslotlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stoneslotlist(i), target);
  }

  // optional int32 errorCode = 3;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  // repeated int32 gemSyms = 4;
  for (int i = 0; i < this->gemsyms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->gemsyms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCStone)
  return target;
}

int GCStone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 errorCode = 3;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  // repeated .StoneSlotInfo stoneSlotList = 2;
  total_size += 1 * this->stoneslotlist_size();
  for (int i = 0; i < this->stoneslotlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stoneslotlist(i));
  }

  // repeated int32 gemSyms = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->gemsyms_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gemsyms(i));
    }
    total_size += 1 * this->gemsyms_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCStone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCStone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCStone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCStone::MergeFrom(const GCStone& from) {
  GOOGLE_CHECK_NE(&from, this);
  stoneslotlist_.MergeFrom(from.stoneslotlist_);
  gemsyms_.MergeFrom(from.gemsyms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCStone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCStone::CopyFrom(const GCStone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCStone::IsInitialized() const {

  return true;
}

void GCStone::Swap(GCStone* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    stoneslotlist_.Swap(&other->stoneslotlist_);
    std::swap(errorcode_, other->errorcode_);
    gemsyms_.Swap(&other->gemsyms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCStone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCStone_descriptor_;
  metadata.reflection = GCStone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoneSlotInfo::kSlotIdFieldNumber;
const int StoneSlotInfo::kStoneInfoFieldNumber;
#endif  // !_MSC_VER

StoneSlotInfo::StoneSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StoneSlotInfo)
}

void StoneSlotInfo::InitAsDefaultInstance() {
}

StoneSlotInfo::StoneSlotInfo(const StoneSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StoneSlotInfo)
}

void StoneSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  slotid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoneSlotInfo::~StoneSlotInfo() {
  // @@protoc_insertion_point(destructor:StoneSlotInfo)
  SharedDtor();
}

void StoneSlotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoneSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoneSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoneSlotInfo_descriptor_;
}

const StoneSlotInfo& StoneSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StoneMessage_2eproto();
  return *default_instance_;
}

StoneSlotInfo* StoneSlotInfo::default_instance_ = NULL;

StoneSlotInfo* StoneSlotInfo::New() const {
  return new StoneSlotInfo;
}

void StoneSlotInfo::Clear() {
  slotid_ = 0;
  stoneinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoneSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StoneSlotInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slotId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slotid_)));
          set_has_slotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stoneInfo;
        break;
      }

      // repeated .StoneInfo stoneInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_stoneInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stoneinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stoneInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StoneSlotInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StoneSlotInfo)
  return false;
#undef DO_
}

void StoneSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StoneSlotInfo)
  // optional int32 slotId = 1;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slotid(), output);
  }

  // repeated .StoneInfo stoneInfo = 2;
  for (int i = 0; i < this->stoneinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stoneinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StoneSlotInfo)
}

::google::protobuf::uint8* StoneSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StoneSlotInfo)
  // optional int32 slotId = 1;
  if (has_slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slotid(), target);
  }

  // repeated .StoneInfo stoneInfo = 2;
  for (int i = 0; i < this->stoneinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stoneinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StoneSlotInfo)
  return target;
}

int StoneSlotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slotId = 1;
    if (has_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slotid());
    }

  }
  // repeated .StoneInfo stoneInfo = 2;
  total_size += 1 * this->stoneinfo_size();
  for (int i = 0; i < this->stoneinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stoneinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoneSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoneSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoneSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoneSlotInfo::MergeFrom(const StoneSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stoneinfo_.MergeFrom(from.stoneinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slotid()) {
      set_slotid(from.slotid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoneSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoneSlotInfo::CopyFrom(const StoneSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoneSlotInfo::IsInitialized() const {

  return true;
}

void StoneSlotInfo::Swap(StoneSlotInfo* other) {
  if (other != this) {
    std::swap(slotid_, other->slotid_);
    stoneinfo_.Swap(&other->stoneinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoneSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoneSlotInfo_descriptor_;
  metadata.reflection = StoneSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoneInfo::kHoleIdFieldNumber;
const int StoneInfo::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

StoneInfo::StoneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StoneInfo)
}

void StoneInfo::InitAsDefaultInstance() {
}

StoneInfo::StoneInfo(const StoneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StoneInfo)
}

void StoneInfo::SharedCtor() {
  _cached_size_ = 0;
  holeid_ = 0;
  templateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoneInfo::~StoneInfo() {
  // @@protoc_insertion_point(destructor:StoneInfo)
  SharedDtor();
}

void StoneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoneInfo_descriptor_;
}

const StoneInfo& StoneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StoneMessage_2eproto();
  return *default_instance_;
}

StoneInfo* StoneInfo::default_instance_ = NULL;

StoneInfo* StoneInfo::New() const {
  return new StoneInfo;
}

void StoneInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StoneInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(holeid_, templateid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StoneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 holeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holeid_)));
          set_has_holeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_templateId;
        break;
      }

      // optional int32 templateId = 2;
      case 2: {
        if (tag == 16) {
         parse_templateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StoneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StoneInfo)
  return false;
#undef DO_
}

void StoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StoneInfo)
  // optional int32 holeId = 1;
  if (has_holeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->holeid(), output);
  }

  // optional int32 templateId = 2;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->templateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StoneInfo)
}

::google::protobuf::uint8* StoneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StoneInfo)
  // optional int32 holeId = 1;
  if (has_holeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->holeid(), target);
  }

  // optional int32 templateId = 2;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->templateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StoneInfo)
  return target;
}

int StoneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 holeId = 1;
    if (has_holeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holeid());
    }

    // optional int32 templateId = 2;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->templateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoneInfo::MergeFrom(const StoneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_holeid()) {
      set_holeid(from.holeid());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoneInfo::CopyFrom(const StoneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoneInfo::IsInitialized() const {

  return true;
}

void StoneInfo::Swap(StoneInfo* other) {
  if (other != this) {
    std::swap(holeid_, other->holeid_);
    std::swap(templateid_, other->templateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoneInfo_descriptor_;
  metadata.reflection = StoneInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
