// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SuperGiftMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SuperGiftMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CardRewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardRewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeTypeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeTypeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeRewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeRewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUpdateCardReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUpdateCardReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetCardReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetCardReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneInDay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneInDay_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSevenDaysHappy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSevenDaysHappy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSevenDaysHappy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSevenDaysHappy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGFirstCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGFirstCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCFirstCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCFirstCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGRechargeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGRechargeReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRechargeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRechargeReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRechargeTypeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRechargeTypeUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSigninStatusList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSigninStatusList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignInTem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignInTem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSignin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSignin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSignin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSignin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SunSignInRew_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SunSignInRew_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGrowFund_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGrowFund_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGrowFund_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGrowFund_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGrowFundBuyNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGrowFundBuyNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGDoublePay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGDoublePay_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDoublePay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDoublePay_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDailyGiftInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDailyGiftInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WinnersInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WinnersInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUpdateRewardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUpdateRewardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* oneBuyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  oneBuyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUpdateOneBuyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUpdateOneBuyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCanBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCanBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCanBuyBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCanBuyBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCHoliday_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCHoliday_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGHoliday_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGHoliday_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCFeelGold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCFeelGold_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGFeelGold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGFeelGold_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelQuotaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelQuotaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCLevelQuota_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCLevelQuota_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBuyLevelQuota_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBuyLevelQuota_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCLevelQuotaUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCLevelQuotaUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* FreeBackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreeBackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBuyFreeBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBuyFreeBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCFreeBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCFreeBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperRebateItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperRebateItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperRebateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperRebateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetSuperRebateReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetSuperRebateReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSuperRebateBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSuperRebateBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeDailyGiftItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeDailyGiftItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRechargeDailyGiftInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRechargeDailyGiftInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetRechargeDailyGiftReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetRechargeDailyGiftReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetRechargeDailyGiftRewardBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetRechargeDailyGiftRewardBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPointsBuyHisInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPointsBuyHisInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPointsBuyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPointsBuyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBuyPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBuyPoints_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SuperGiftMessage_2eproto() {
  protobuf_AddDesc_SuperGiftMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SuperGiftMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CardRewardData_descriptor_ = file->message_type(0);
  static const int CardRewardData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardRewardData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardRewardData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardRewardData, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardRewardData, chargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardRewardData, getstatus_),
  };
  CardRewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardRewardData_descriptor_,
      CardRewardData::default_instance_,
      CardRewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardRewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardRewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardRewardData));
  RechargeTypeData_descriptor_ = file->message_type(1);
  static const int RechargeTypeData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeTypeData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeTypeData, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeTypeData, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeTypeData, rewarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeTypeData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeTypeData, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeTypeData, status_),
  };
  RechargeTypeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeTypeData_descriptor_,
      RechargeTypeData::default_instance_,
      RechargeTypeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeTypeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeTypeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeTypeData));
  RechargeRewardData_descriptor_ = file->message_type(2);
  static const int RechargeRewardData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRewardData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRewardData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRewardData, neednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRewardData, reward_),
  };
  RechargeRewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeRewardData_descriptor_,
      RechargeRewardData::default_instance_,
      RechargeRewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeRewardData));
  GCUpdateCardReward_descriptor_ = file->message_type(3);
  static const int GCUpdateCardReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateCardReward, cardrewarddata_),
  };
  GCUpdateCardReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUpdateCardReward_descriptor_,
      GCUpdateCardReward::default_instance_,
      GCUpdateCardReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateCardReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateCardReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUpdateCardReward));
  CGGetCardReward_descriptor_ = file->message_type(4);
  static const int CGGetCardReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCardReward, type_),
  };
  CGGetCardReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetCardReward_descriptor_,
      CGGetCardReward::default_instance_,
      CGGetCardReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCardReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCardReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetCardReward));
  OneInDay_descriptor_ = file->message_type(5);
  static const int OneInDay_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneInDay, tblid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneInDay, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneInDay, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneInDay, count_),
  };
  OneInDay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneInDay_descriptor_,
      OneInDay::default_instance_,
      OneInDay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneInDay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneInDay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneInDay));
  GCSevenDaysHappy_descriptor_ = file->message_type(6);
  static const int GCSevenDaysHappy_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSevenDaysHappy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSevenDaysHappy, targetlst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSevenDaysHappy, upgradelst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSevenDaysHappy, fightpowerlst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSevenDaysHappy, halfprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSevenDaysHappy, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSevenDaysHappy, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSevenDaysHappy, curid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSevenDaysHappy, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSevenDaysHappy, result_),
  };
  GCSevenDaysHappy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSevenDaysHappy_descriptor_,
      GCSevenDaysHappy::default_instance_,
      GCSevenDaysHappy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSevenDaysHappy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSevenDaysHappy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSevenDaysHappy));
  CGSevenDaysHappy_descriptor_ = file->message_type(7);
  static const int CGSevenDaysHappy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSevenDaysHappy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSevenDaysHappy, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSevenDaysHappy, tblid_),
  };
  CGSevenDaysHappy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSevenDaysHappy_descriptor_,
      CGSevenDaysHappy::default_instance_,
      CGSevenDaysHappy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSevenDaysHappy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSevenDaysHappy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSevenDaysHappy));
  CGFirstCharge_descriptor_ = file->message_type(8);
  static const int CGFirstCharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFirstCharge, type_),
  };
  CGFirstCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGFirstCharge_descriptor_,
      CGFirstCharge::default_instance_,
      CGFirstCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFirstCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFirstCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGFirstCharge));
  GCFirstCharge_descriptor_ = file->message_type(9);
  static const int GCFirstCharge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFirstCharge, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFirstCharge, state_),
  };
  GCFirstCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCFirstCharge_descriptor_,
      GCFirstCharge::default_instance_,
      GCFirstCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFirstCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFirstCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCFirstCharge));
  CGRechargeReward_descriptor_ = file->message_type(10);
  static const int CGRechargeReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRechargeReward, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRechargeReward, id_),
  };
  CGRechargeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGRechargeReward_descriptor_,
      CGRechargeReward::default_instance_,
      CGRechargeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRechargeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRechargeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGRechargeReward));
  GCRechargeReward_descriptor_ = file->message_type(11);
  static const int GCRechargeReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRechargeReward, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRechargeReward, typedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRechargeReward, flag_),
  };
  GCRechargeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRechargeReward_descriptor_,
      GCRechargeReward::default_instance_,
      GCRechargeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRechargeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRechargeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRechargeReward));
  GCRechargeTypeUpdate_descriptor_ = file->message_type(12);
  static const int GCRechargeTypeUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRechargeTypeUpdate, typedata_),
  };
  GCRechargeTypeUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRechargeTypeUpdate_descriptor_,
      GCRechargeTypeUpdate::default_instance_,
      GCRechargeTypeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRechargeTypeUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRechargeTypeUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRechargeTypeUpdate));
  GCSigninStatusList_descriptor_ = file->message_type(13);
  static const int GCSigninStatusList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSigninStatusList, today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSigninStatusList, rewardmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSigninStatusList, signcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSigninStatusList, signintem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSigninStatusList, totalsignnum_),
  };
  GCSigninStatusList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSigninStatusList_descriptor_,
      GCSigninStatusList::default_instance_,
      GCSigninStatusList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSigninStatusList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSigninStatusList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSigninStatusList));
  SignInTem_descriptor_ = file->message_type(14);
  static const int SignInTem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInTem, temid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInTem, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInTem, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInTem, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInTem, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInTem, ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInTem, signstatus_),
  };
  SignInTem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignInTem_descriptor_,
      SignInTem::default_instance_,
      SignInTem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInTem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInTem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignInTem));
  CGSignin_descriptor_ = file->message_type(15);
  static const int CGSignin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSignin, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSignin, temid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSignin, indexid_),
  };
  CGSignin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSignin_descriptor_,
      CGSignin::default_instance_,
      CGSignin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSignin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSignin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSignin));
  GCSignin_descriptor_ = file->message_type(16);
  static const int GCSignin_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSignin, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSignin, signstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSignin, signid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSignin, signcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSignin, totalsignnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSignin, changerew_),
  };
  GCSignin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSignin_descriptor_,
      GCSignin::default_instance_,
      GCSignin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSignin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSignin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSignin));
  SunSignInRew_descriptor_ = file->message_type(17);
  static const int SunSignInRew_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SunSignInRew, temid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SunSignInRew, signnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SunSignInRew, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SunSignInRew, value_),
  };
  SunSignInRew_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SunSignInRew_descriptor_,
      SunSignInRew::default_instance_,
      SunSignInRew_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SunSignInRew, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SunSignInRew, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SunSignInRew));
  CGGrowFund_descriptor_ = file->message_type(18);
  static const int CGGrowFund_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGrowFund, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGrowFund, id_),
  };
  CGGrowFund_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGrowFund_descriptor_,
      CGGrowFund::default_instance_,
      CGGrowFund_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGrowFund, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGrowFund, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGrowFund));
  GCGrowFund_descriptor_ = file->message_type(19);
  static const int GCGrowFund_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGrowFund, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGrowFund, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGrowFund, buystatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGrowFund, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGrowFund, growfundlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGrowFund, generalwelfarelist_),
  };
  GCGrowFund_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGrowFund_descriptor_,
      GCGrowFund::default_instance_,
      GCGrowFund_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGrowFund, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGrowFund, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGrowFund));
  GCGrowFundBuyNum_descriptor_ = file->message_type(20);
  static const int GCGrowFundBuyNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGrowFundBuyNum, buynum_),
  };
  GCGrowFundBuyNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGrowFundBuyNum_descriptor_,
      GCGrowFundBuyNum::default_instance_,
      GCGrowFundBuyNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGrowFundBuyNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGrowFundBuyNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGrowFundBuyNum));
  CGDoublePay_descriptor_ = file->message_type(21);
  static const int CGDoublePay_offsets_[1] = {
  };
  CGDoublePay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGDoublePay_descriptor_,
      CGDoublePay::default_instance_,
      CGDoublePay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDoublePay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDoublePay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGDoublePay));
  GCDoublePay_descriptor_ = file->message_type(22);
  static const int GCDoublePay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoublePay, payidlist_),
  };
  GCDoublePay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDoublePay_descriptor_,
      GCDoublePay::default_instance_,
      GCDoublePay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoublePay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoublePay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDoublePay));
  GCDailyGiftInfo_descriptor_ = file->message_type(23);
  static const int GCDailyGiftInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDailyGiftInfo, dailygiftlist_),
  };
  GCDailyGiftInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDailyGiftInfo_descriptor_,
      GCDailyGiftInfo::default_instance_,
      GCDailyGiftInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDailyGiftInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDailyGiftInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDailyGiftInfo));
  WinnersInfo_descriptor_ = file->message_type(24);
  static const int WinnersInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinnersInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinnersInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinnersInfo, name_),
  };
  WinnersInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WinnersInfo_descriptor_,
      WinnersInfo::default_instance_,
      WinnersInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinnersInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinnersInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WinnersInfo));
  GCUpdateRewardList_descriptor_ = file->message_type(25);
  static const int GCUpdateRewardList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateRewardList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateRewardList, winnersinfolist_),
  };
  GCUpdateRewardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUpdateRewardList_descriptor_,
      GCUpdateRewardList::default_instance_,
      GCUpdateRewardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateRewardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateRewardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUpdateRewardList));
  oneBuyInfo_descriptor_ = file->message_type(26);
  static const int oneBuyInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneBuyInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneBuyInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneBuyInfo, curtotalbuynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneBuyInfo, curmybuynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneBuyInfo, overtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneBuyInfo, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneBuyInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneBuyInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneBuyInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneBuyInfo, nextid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneBuyInfo, charge_),
  };
  oneBuyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      oneBuyInfo_descriptor_,
      oneBuyInfo::default_instance_,
      oneBuyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneBuyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oneBuyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(oneBuyInfo));
  GCUpdateOneBuyList_descriptor_ = file->message_type(27);
  static const int GCUpdateOneBuyList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateOneBuyList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateOneBuyList, buyinfolist_),
  };
  GCUpdateOneBuyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUpdateOneBuyList_descriptor_,
      GCUpdateOneBuyList::default_instance_,
      GCUpdateOneBuyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateOneBuyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateOneBuyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUpdateOneBuyList));
  CGCanBuy_descriptor_ = file->message_type(28);
  static const int CGCanBuy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCanBuy, id_),
  };
  CGCanBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCanBuy_descriptor_,
      CGCanBuy::default_instance_,
      CGCanBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCanBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCanBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCanBuy));
  GCCanBuyBack_descriptor_ = file->message_type(29);
  static const int GCCanBuyBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCanBuyBack, type_),
  };
  GCCanBuyBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCanBuyBack_descriptor_,
      GCCanBuyBack::default_instance_,
      GCCanBuyBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCanBuyBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCanBuyBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCanBuyBack));
  GCHoliday_descriptor_ = file->message_type(30);
  static const int GCHoliday_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHoliday, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHoliday, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHoliday, paramap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHoliday, itemlst_),
  };
  GCHoliday_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCHoliday_descriptor_,
      GCHoliday::default_instance_,
      GCHoliday_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHoliday, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHoliday, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCHoliday));
  CGHoliday_descriptor_ = file->message_type(31);
  static const int CGHoliday_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHoliday, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHoliday, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHoliday, key_),
  };
  CGHoliday_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGHoliday_descriptor_,
      CGHoliday::default_instance_,
      CGHoliday_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHoliday, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHoliday, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGHoliday));
  GCFeelGold_descriptor_ = file->message_type(32);
  static const int GCFeelGold_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, lastcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, item1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, item2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, item3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, enddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, nextneedgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, buytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, singlemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, itemshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, buyonemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, buytenmoney_),
  };
  GCFeelGold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCFeelGold_descriptor_,
      GCFeelGold::default_instance_,
      GCFeelGold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFeelGold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCFeelGold));
  CGFeelGold_descriptor_ = file->message_type(33);
  static const int CGFeelGold_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFeelGold, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFeelGold, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFeelGold, key_),
  };
  CGFeelGold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGFeelGold_descriptor_,
      CGFeelGold::default_instance_,
      CGFeelGold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFeelGold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFeelGold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGFeelGold));
  LevelQuotaInfo_descriptor_ = file->message_type(34);
  static const int LevelQuotaInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelQuotaInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelQuotaInfo, levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelQuotaInfo, goodsgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelQuotaInfo, chargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelQuotaInfo, originalprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelQuotaInfo, currentprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelQuotaInfo, noseelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelQuotaInfo, moneytype_),
  };
  LevelQuotaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelQuotaInfo_descriptor_,
      LevelQuotaInfo::default_instance_,
      LevelQuotaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelQuotaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelQuotaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelQuotaInfo));
  GCLevelQuota_descriptor_ = file->message_type(35);
  static const int GCLevelQuota_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLevelQuota, infolist_),
  };
  GCLevelQuota_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCLevelQuota_descriptor_,
      GCLevelQuota::default_instance_,
      GCLevelQuota_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLevelQuota, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLevelQuota, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCLevelQuota));
  CGBuyLevelQuota_descriptor_ = file->message_type(36);
  static const int CGBuyLevelQuota_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyLevelQuota, id_),
  };
  CGBuyLevelQuota_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBuyLevelQuota_descriptor_,
      CGBuyLevelQuota::default_instance_,
      CGBuyLevelQuota_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyLevelQuota, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyLevelQuota, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBuyLevelQuota));
  GCLevelQuotaUpdate_descriptor_ = file->message_type(37);
  static const int GCLevelQuotaUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLevelQuotaUpdate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLevelQuotaUpdate, result_),
  };
  GCLevelQuotaUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCLevelQuotaUpdate_descriptor_,
      GCLevelQuotaUpdate::default_instance_,
      GCLevelQuotaUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLevelQuotaUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLevelQuotaUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCLevelQuotaUpdate));
  FreeBackInfo_descriptor_ = file->message_type(38);
  static const int FreeBackInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeBackInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeBackInfo, itemshop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeBackInfo, showprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeBackInfo, sellprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeBackInfo, chargeid_),
  };
  FreeBackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreeBackInfo_descriptor_,
      FreeBackInfo::default_instance_,
      FreeBackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeBackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeBackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreeBackInfo));
  CGBuyFreeBack_descriptor_ = file->message_type(39);
  static const int CGBuyFreeBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyFreeBack, id_),
  };
  CGBuyFreeBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBuyFreeBack_descriptor_,
      CGBuyFreeBack::default_instance_,
      CGBuyFreeBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyFreeBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyFreeBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBuyFreeBack));
  GCFreeBack_descriptor_ = file->message_type(40);
  static const int GCFreeBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFreeBack, operatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFreeBack, freebackinfo_),
  };
  GCFreeBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCFreeBack_descriptor_,
      GCFreeBack::default_instance_,
      GCFreeBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFreeBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFreeBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCFreeBack));
  SuperRebateItem_descriptor_ = file->message_type(41);
  static const int SuperRebateItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRebateItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRebateItem, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRebateItem, status_),
  };
  SuperRebateItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperRebateItem_descriptor_,
      SuperRebateItem::default_instance_,
      SuperRebateItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRebateItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRebateItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperRebateItem));
  SuperRebateInfo_descriptor_ = file->message_type(42);
  static const int SuperRebateInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRebateInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRebateInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRebateInfo, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRebateInfo, itemlist_),
  };
  SuperRebateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperRebateInfo_descriptor_,
      SuperRebateInfo::default_instance_,
      SuperRebateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRebateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRebateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperRebateInfo));
  CGGetSuperRebateReward_descriptor_ = file->message_type(43);
  static const int CGGetSuperRebateReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetSuperRebateReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetSuperRebateReward, index_),
  };
  CGGetSuperRebateReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetSuperRebateReward_descriptor_,
      CGGetSuperRebateReward::default_instance_,
      CGGetSuperRebateReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetSuperRebateReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetSuperRebateReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetSuperRebateReward));
  GCSuperRebateBack_descriptor_ = file->message_type(44);
  static const int GCSuperRebateBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSuperRebateBack, operatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSuperRebateBack, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSuperRebateBack, infolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSuperRebateBack, rebateinfo_),
  };
  GCSuperRebateBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSuperRebateBack_descriptor_,
      GCSuperRebateBack::default_instance_,
      GCSuperRebateBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSuperRebateBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSuperRebateBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSuperRebateBack));
  RechargeDailyGiftItem_descriptor_ = file->message_type(45);
  static const int RechargeDailyGiftItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeDailyGiftItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeDailyGiftItem, status_),
  };
  RechargeDailyGiftItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeDailyGiftItem_descriptor_,
      RechargeDailyGiftItem::default_instance_,
      RechargeDailyGiftItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeDailyGiftItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeDailyGiftItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeDailyGiftItem));
  GCRechargeDailyGiftInfo_descriptor_ = file->message_type(46);
  static const int GCRechargeDailyGiftInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRechargeDailyGiftInfo, dailygiftlist_),
  };
  GCRechargeDailyGiftInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRechargeDailyGiftInfo_descriptor_,
      GCRechargeDailyGiftInfo::default_instance_,
      GCRechargeDailyGiftInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRechargeDailyGiftInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRechargeDailyGiftInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRechargeDailyGiftInfo));
  CGGetRechargeDailyGiftReward_descriptor_ = file->message_type(47);
  static const int CGGetRechargeDailyGiftReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRechargeDailyGiftReward, id_),
  };
  CGGetRechargeDailyGiftReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetRechargeDailyGiftReward_descriptor_,
      CGGetRechargeDailyGiftReward::default_instance_,
      CGGetRechargeDailyGiftReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRechargeDailyGiftReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRechargeDailyGiftReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetRechargeDailyGiftReward));
  GCGetRechargeDailyGiftRewardBack_descriptor_ = file->message_type(48);
  static const int GCGetRechargeDailyGiftRewardBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRechargeDailyGiftRewardBack, result_),
  };
  GCGetRechargeDailyGiftRewardBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetRechargeDailyGiftRewardBack_descriptor_,
      GCGetRechargeDailyGiftRewardBack::default_instance_,
      GCGetRechargeDailyGiftRewardBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRechargeDailyGiftRewardBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRechargeDailyGiftRewardBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetRechargeDailyGiftRewardBack));
  GCPointsBuyHisInfo_descriptor_ = file->message_type(49);
  static const int GCPointsBuyHisInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPointsBuyHisInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPointsBuyHisInfo, winnersinfolist_),
  };
  GCPointsBuyHisInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPointsBuyHisInfo_descriptor_,
      GCPointsBuyHisInfo::default_instance_,
      GCPointsBuyHisInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPointsBuyHisInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPointsBuyHisInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPointsBuyHisInfo));
  GCPointsBuyList_descriptor_ = file->message_type(50);
  static const int GCPointsBuyList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPointsBuyList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPointsBuyList, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPointsBuyList, buyinfolist_),
  };
  GCPointsBuyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPointsBuyList_descriptor_,
      GCPointsBuyList::default_instance_,
      GCPointsBuyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPointsBuyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPointsBuyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPointsBuyList));
  CGBuyPoints_descriptor_ = file->message_type(51);
  static const int CGBuyPoints_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyPoints, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyPoints, num_),
  };
  CGBuyPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBuyPoints_descriptor_,
      CGBuyPoints::default_instance_,
      CGBuyPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBuyPoints));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SuperGiftMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardRewardData_descriptor_, &CardRewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeTypeData_descriptor_, &RechargeTypeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeRewardData_descriptor_, &RechargeRewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUpdateCardReward_descriptor_, &GCUpdateCardReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetCardReward_descriptor_, &CGGetCardReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneInDay_descriptor_, &OneInDay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSevenDaysHappy_descriptor_, &GCSevenDaysHappy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSevenDaysHappy_descriptor_, &CGSevenDaysHappy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGFirstCharge_descriptor_, &CGFirstCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCFirstCharge_descriptor_, &GCFirstCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGRechargeReward_descriptor_, &CGRechargeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRechargeReward_descriptor_, &GCRechargeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRechargeTypeUpdate_descriptor_, &GCRechargeTypeUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSigninStatusList_descriptor_, &GCSigninStatusList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignInTem_descriptor_, &SignInTem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSignin_descriptor_, &CGSignin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSignin_descriptor_, &GCSignin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SunSignInRew_descriptor_, &SunSignInRew::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGrowFund_descriptor_, &CGGrowFund::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGrowFund_descriptor_, &GCGrowFund::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGrowFundBuyNum_descriptor_, &GCGrowFundBuyNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGDoublePay_descriptor_, &CGDoublePay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDoublePay_descriptor_, &GCDoublePay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDailyGiftInfo_descriptor_, &GCDailyGiftInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WinnersInfo_descriptor_, &WinnersInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUpdateRewardList_descriptor_, &GCUpdateRewardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    oneBuyInfo_descriptor_, &oneBuyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUpdateOneBuyList_descriptor_, &GCUpdateOneBuyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCanBuy_descriptor_, &CGCanBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCanBuyBack_descriptor_, &GCCanBuyBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCHoliday_descriptor_, &GCHoliday::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGHoliday_descriptor_, &CGHoliday::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCFeelGold_descriptor_, &GCFeelGold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGFeelGold_descriptor_, &CGFeelGold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelQuotaInfo_descriptor_, &LevelQuotaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCLevelQuota_descriptor_, &GCLevelQuota::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBuyLevelQuota_descriptor_, &CGBuyLevelQuota::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCLevelQuotaUpdate_descriptor_, &GCLevelQuotaUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreeBackInfo_descriptor_, &FreeBackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBuyFreeBack_descriptor_, &CGBuyFreeBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCFreeBack_descriptor_, &GCFreeBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperRebateItem_descriptor_, &SuperRebateItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperRebateInfo_descriptor_, &SuperRebateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetSuperRebateReward_descriptor_, &CGGetSuperRebateReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSuperRebateBack_descriptor_, &GCSuperRebateBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeDailyGiftItem_descriptor_, &RechargeDailyGiftItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRechargeDailyGiftInfo_descriptor_, &GCRechargeDailyGiftInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetRechargeDailyGiftReward_descriptor_, &CGGetRechargeDailyGiftReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetRechargeDailyGiftRewardBack_descriptor_, &GCGetRechargeDailyGiftRewardBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPointsBuyHisInfo_descriptor_, &GCPointsBuyHisInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPointsBuyList_descriptor_, &GCPointsBuyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBuyPoints_descriptor_, &CGBuyPoints::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SuperGiftMessage_2eproto() {
  delete CardRewardData::default_instance_;
  delete CardRewardData_reflection_;
  delete RechargeTypeData::default_instance_;
  delete RechargeTypeData_reflection_;
  delete RechargeRewardData::default_instance_;
  delete RechargeRewardData_reflection_;
  delete GCUpdateCardReward::default_instance_;
  delete GCUpdateCardReward_reflection_;
  delete CGGetCardReward::default_instance_;
  delete CGGetCardReward_reflection_;
  delete OneInDay::default_instance_;
  delete OneInDay_reflection_;
  delete GCSevenDaysHappy::default_instance_;
  delete GCSevenDaysHappy_reflection_;
  delete CGSevenDaysHappy::default_instance_;
  delete CGSevenDaysHappy_reflection_;
  delete CGFirstCharge::default_instance_;
  delete CGFirstCharge_reflection_;
  delete GCFirstCharge::default_instance_;
  delete GCFirstCharge_reflection_;
  delete CGRechargeReward::default_instance_;
  delete CGRechargeReward_reflection_;
  delete GCRechargeReward::default_instance_;
  delete GCRechargeReward_reflection_;
  delete GCRechargeTypeUpdate::default_instance_;
  delete GCRechargeTypeUpdate_reflection_;
  delete GCSigninStatusList::default_instance_;
  delete GCSigninStatusList_reflection_;
  delete SignInTem::default_instance_;
  delete SignInTem_reflection_;
  delete CGSignin::default_instance_;
  delete CGSignin_reflection_;
  delete GCSignin::default_instance_;
  delete GCSignin_reflection_;
  delete SunSignInRew::default_instance_;
  delete SunSignInRew_reflection_;
  delete CGGrowFund::default_instance_;
  delete CGGrowFund_reflection_;
  delete GCGrowFund::default_instance_;
  delete GCGrowFund_reflection_;
  delete GCGrowFundBuyNum::default_instance_;
  delete GCGrowFundBuyNum_reflection_;
  delete CGDoublePay::default_instance_;
  delete CGDoublePay_reflection_;
  delete GCDoublePay::default_instance_;
  delete GCDoublePay_reflection_;
  delete GCDailyGiftInfo::default_instance_;
  delete GCDailyGiftInfo_reflection_;
  delete WinnersInfo::default_instance_;
  delete WinnersInfo_reflection_;
  delete GCUpdateRewardList::default_instance_;
  delete GCUpdateRewardList_reflection_;
  delete oneBuyInfo::default_instance_;
  delete oneBuyInfo_reflection_;
  delete GCUpdateOneBuyList::default_instance_;
  delete GCUpdateOneBuyList_reflection_;
  delete CGCanBuy::default_instance_;
  delete CGCanBuy_reflection_;
  delete GCCanBuyBack::default_instance_;
  delete GCCanBuyBack_reflection_;
  delete GCHoliday::default_instance_;
  delete GCHoliday_reflection_;
  delete CGHoliday::default_instance_;
  delete CGHoliday_reflection_;
  delete GCFeelGold::default_instance_;
  delete GCFeelGold_reflection_;
  delete CGFeelGold::default_instance_;
  delete CGFeelGold_reflection_;
  delete LevelQuotaInfo::default_instance_;
  delete LevelQuotaInfo_reflection_;
  delete GCLevelQuota::default_instance_;
  delete GCLevelQuota_reflection_;
  delete CGBuyLevelQuota::default_instance_;
  delete CGBuyLevelQuota_reflection_;
  delete GCLevelQuotaUpdate::default_instance_;
  delete GCLevelQuotaUpdate_reflection_;
  delete FreeBackInfo::default_instance_;
  delete FreeBackInfo_reflection_;
  delete CGBuyFreeBack::default_instance_;
  delete CGBuyFreeBack_reflection_;
  delete GCFreeBack::default_instance_;
  delete GCFreeBack_reflection_;
  delete SuperRebateItem::default_instance_;
  delete SuperRebateItem_reflection_;
  delete SuperRebateInfo::default_instance_;
  delete SuperRebateInfo_reflection_;
  delete CGGetSuperRebateReward::default_instance_;
  delete CGGetSuperRebateReward_reflection_;
  delete GCSuperRebateBack::default_instance_;
  delete GCSuperRebateBack_reflection_;
  delete RechargeDailyGiftItem::default_instance_;
  delete RechargeDailyGiftItem_reflection_;
  delete GCRechargeDailyGiftInfo::default_instance_;
  delete GCRechargeDailyGiftInfo_reflection_;
  delete CGGetRechargeDailyGiftReward::default_instance_;
  delete CGGetRechargeDailyGiftReward_reflection_;
  delete GCGetRechargeDailyGiftRewardBack::default_instance_;
  delete GCGetRechargeDailyGiftRewardBack_reflection_;
  delete GCPointsBuyHisInfo::default_instance_;
  delete GCPointsBuyHisInfo_reflection_;
  delete GCPointsBuyList::default_instance_;
  delete GCPointsBuyList_reflection_;
  delete CGBuyPoints::default_instance_;
  delete CGBuyPoints_reflection_;
}

void protobuf_AddDesc_SuperGiftMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_CommonMessage_2eproto();
  ::protobuf_AddDesc_ShopMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026SuperGiftMessage.proto\032\023CommonMessage."
    "proto\032\021ShopMessage.proto\"`\n\016CardRewardDa"
    "ta\022\014\n\004type\030\001 \001(\005\022\016\n\006status\030\002 \001(\005\022\013\n\003day\030"
    "\003 \001(\005\022\020\n\010chargeId\030\004 \001(\005\022\021\n\tgetStatus\030\005 \001"
    "(\005\"\241\001\n\020RechargeTypeData\022\014\n\004type\030\001 \001(\005\022\021\n"
    "\tstartTime\030\002 \001(\003\022\017\n\007endTime\030\003 \001(\003\022\'\n\nrew"
    "ardData\030\004 \003(\0132\023.RechargeRewardData\022\r\n\005va"
    "lue\030\005 \001(\005\022\023\n\013refreshTime\030\006 \001(\003\022\016\n\006status"
    "\030\007 \001(\005\"Q\n\022RechargeRewardData\022\n\n\002id\030\001 \001(\005"
    "\022\016\n\006status\030\002 \001(\005\022\017\n\007needNum\030\003 \001(\005\022\016\n\006rew"
    "ard\030\004 \001(\t\"=\n\022GCUpdateCardReward\022\'\n\016cardR"
    "ewardData\030\001 \003(\0132\017.CardRewardData\"\037\n\017CGGe"
    "tCardReward\022\014\n\004type\030\001 \001(\005\"L\n\010OneInDay\022\r\n"
    "\005tblId\030\001 \001(\005\022\016\n\006status\030\002 \001(\005\022\022\n\ntotalCou"
    "nt\030\003 \001(\005\022\r\n\005count\030\004 \001(\005\"\351\001\n\020GCSevenDaysH"
    "appy\022\014\n\004type\030\001 \001(\005\022\034\n\ttargetLst\030\002 \003(\0132\t."
    "OneInDay\022\035\n\nupgradeLst\030\003 \003(\0132\t.OneInDay\022"
    " \n\rfightPowerLst\030\004 \003(\0132\t.OneInDay\022\034\n\thal"
    "fPrice\030\005 \003(\0132\t.OneInDay\022\013\n\003day\030\006 \001(\005\022\r\n\005"
    "score\030\007 \001(\005\022\r\n\005curId\030\010 \001(\005\022\017\n\007endTime\030\t "
    "\001(\003\022\016\n\006result\030\n \001(\005\"<\n\020CGSevenDaysHappy\022"
    "\014\n\004type\030\001 \001(\005\022\013\n\003day\030\002 \001(\005\022\r\n\005tblId\030\003 \001("
    "\005\"\035\n\rCGFirstCharge\022\014\n\004type\030\001 \001(\005\",\n\rGCFi"
    "rstCharge\022\014\n\004type\030\001 \001(\005\022\r\n\005state\030\002 \001(\005\"."
    "\n\020CGRechargeReward\022\016\n\006opType\030\001 \001(\005\022\n\n\002id"
    "\030\002 \001(\005\"U\n\020GCRechargeReward\022\016\n\006opType\030\001 \001"
    "(\005\022#\n\010typeData\030\002 \003(\0132\021.RechargeTypeData\022"
    "\014\n\004flag\030\003 \001(\005\";\n\024GCRechargeTypeUpdate\022#\n"
    "\010typeData\030\001 \001(\0132\021.RechargeTypeData\"\215\001\n\022G"
    "CSigninStatusList\022\r\n\005today\030\001 \001(\005\022 \n\trewa"
    "rdMap\030\002 \003(\0132\r.SunSignInRew\022\021\n\tsignCount\030"
    "\003 \001(\005\022\035\n\tsignInTem\030\004 \003(\0132\n.SignInTem\022\024\n\014"
    "totalSignNum\030\005 \001(\005\"\203\001\n\tSignInTem\022\r\n\005temI"
    "d\030\001 \001(\005\022\r\n\005month\030\002 \001(\005\022\013\n\003day\030\003 \001(\005\022\033\n\010i"
    "temInfo\030\004 \001(\0132\t.ItemInfo\022\013\n\003vip\030\005 \001(\005\022\r\n"
    "\005ratio\030\006 \001(\005\022\022\n\nsignStatus\030\007 \001(\005\"8\n\010CGSi"
    "gnin\022\014\n\004type\030\001 \001(\005\022\r\n\005temId\030\002 \001(\005\022\017\n\007ind"
    "exId\030\003 \001(\005\"\207\001\n\010GCSignin\022\014\n\004type\030\001 \001(\005\022\022\n"
    "\nsignStatus\030\002 \001(\005\022\016\n\006signId\030\003 \001(\005\022\021\n\tsig"
    "nCount\030\004 \001(\005\022\024\n\014totalSignNum\030\005 \001(\005\022 \n\tch"
    "angeRew\030\006 \001(\0132\r.SunSignInRew\"Z\n\014SunSignI"
    "nRew\022\r\n\005temId\030\001 \001(\005\022\017\n\007signNum\030\002 \001(\005\022\033\n\010"
    "itemInfo\030\003 \001(\0132\t.ItemInfo\022\r\n\005value\030\004 \001(\005"
    "\"(\n\nCGGrowFund\022\016\n\006opType\030\001 \001(\005\022\n\n\002id\030\002 \001"
    "(\005\"\177\n\nGCGrowFund\022\016\n\006opType\030\001 \001(\005\022\014\n\004flag"
    "\030\002 \001(\005\022\021\n\tbuyStatus\030\003 \001(\005\022\016\n\006buyNum\030\004 \001("
    "\005\022\024\n\014growFundList\030\005 \003(\005\022\032\n\022generalWelfar"
    "eList\030\006 \003(\005\"\"\n\020GCGrowFundBuyNum\022\016\n\006buyNu"
    "m\030\001 \001(\005\"\r\n\013CGDoublePay\" \n\013GCDoublePay\022\021\n"
    "\tpayIdList\030\001 \003(\005\"(\n\017GCDailyGiftInfo\022\025\n\rd"
    "ailyGiftList\030\001 \003(\005\">\n\013WinnersInfo\022\022\n\npla"
    "yerName\030\001 \001(\t\022\r\n\005price\030\002 \001(\005\022\014\n\004name\030\003 \001"
    "(\t\"I\n\022GCUpdateRewardList\022\014\n\004type\030\001 \001(\005\022%"
    "\n\017winnersInfoList\030\002 \003(\0132\014.WinnersInfo\"\277\001"
    "\n\noneBuyInfo\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\026"
    "\n\016curTotalBuyNum\030\003 \001(\005\022\023\n\013curMyBuyNum\030\004 "
    "\001(\005\022\020\n\010overTime\030\005 \001(\003\022\r\n\005group\030\006 \001(\005\022\r\n\005"
    "price\030\007 \001(\005\022\014\n\004name\030\010 \001(\t\022\014\n\004item\030\t \001(\t\022"
    "\016\n\006nextID\030\n \001(\005\022\016\n\006charge\030\013 \001(\t\"D\n\022GCUpd"
    "ateOneBuyList\022\014\n\004type\030\001 \001(\005\022 \n\013buyInfoLi"
    "st\030\002 \003(\0132\013.oneBuyInfo\"\026\n\010CGCanBuy\022\n\n\002id\030"
    "\001 \001(\005\"\034\n\014GCCanBuyBack\022\014\n\004type\030\001 \001(\005\"b\n\tG"
    "CHoliday\022\n\n\002id\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\022\035\n\007"
    "paraMap\030\003 \003(\0132\014.EntryIntInt\022\032\n\007itemLst\030\004"
    " \003(\0132\t.ItemInfo\"2\n\tCGHoliday\022\n\n\002id\030\001 \001(\005"
    "\022\014\n\004type\030\002 \001(\005\022\013\n\003key\030\003 \001(\005\"\263\002\n\nGCFeelGo"
    "ld\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\016\n\006result\030\003"
    " \001(\005\022\021\n\tlastCount\030\004 \001(\005\022\030\n\005item1\030\005 \003(\0132\t"
    ".ItemInfo\022\030\n\005item2\030\006 \003(\0132\t.ItemInfo\022\030\n\005i"
    "tem3\030\007 \003(\0132\t.ItemInfo\022\021\n\tstartDate\030\010 \001(\t"
    "\022\017\n\007endDate\030\t \001(\t\022\024\n\014nextNeedGold\030\n \001(\005\022"
    "\017\n\007buyType\030\013 \001(\005\022\023\n\013singleMoney\030\014 \001(\005\022\020\n"
    "\010itemShow\030\r \001(\t\022\023\n\013buyOneMoney\030\016 \001(\t\022\023\n\013"
    "buyTenMoney\030\017 \001(\t\"3\n\nCGFeelGold\022\n\n\002id\030\001 "
    "\001(\005\022\014\n\004type\030\002 \001(\005\022\013\n\003key\030\003 \001(\005\"\252\001\n\016Level"
    "QuotaInfo\022\n\n\002id\030\001 \001(\005\022\022\n\nlevelLimit\030\002 \001("
    "\005\022\022\n\ngoodsGroup\030\003 \001(\t\022\020\n\010ChargeId\030\004 \001(\t\022"
    "\025\n\roriginalPrice\030\005 \001(\005\022\024\n\014currentPrice\030\006"
    " \001(\005\022\022\n\nnoSeeLevel\030\007 \001(\005\022\021\n\tmoneyType\030\010 "
    "\001(\005\"1\n\014GCLevelQuota\022!\n\010infoList\030\001 \003(\0132\017."
    "LevelQuotaInfo\"\035\n\017CGBuyLevelQuota\022\n\n\002id\030"
    "\001 \001(\005\"0\n\022GCLevelQuotaUpdate\022\n\n\002id\030\001 \001(\005\022"
    "\016\n\006result\030\002 \001(\005\"d\n\014FreeBackInfo\022\n\n\002id\030\001 "
    "\001(\005\022\020\n\010itemShop\030\002 \001(\t\022\021\n\tshowPrice\030\003 \001(\t"
    "\022\021\n\tsellPrice\030\004 \001(\t\022\020\n\010chargeID\030\005 \001(\t\"\033\n"
    "\rCGBuyFreeBack\022\n\n\002id\030\001 \001(\005\"F\n\nGCFreeBack"
    "\022\023\n\013operateType\030\001 \001(\005\022#\n\014freeBackInfo\030\002 "
    "\001(\0132\r.FreeBackInfo\"A\n\017SuperRebateItem\022\014\n"
    "\004type\030\001 \001(\005\022\020\n\010itemInfo\030\002 \001(\t\022\016\n\006status\030"
    "\003 \001(\005\"^\n\017SuperRebateInfo\022\n\n\002id\030\001 \001(\005\022\r\n\005"
    "price\030\002 \001(\005\022\014\n\004note\030\003 \001(\t\022\"\n\010itemList\030\004 "
    "\003(\0132\020.SuperRebateItem\"3\n\026CGGetSuperRebat"
    "eReward\022\n\n\002id\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\"\200\001\n\021G"
    "CSuperRebateBack\022\023\n\013operateType\030\001 \001(\005\022\014\n"
    "\004note\030\002 \001(\t\022\"\n\010infoList\030\003 \003(\0132\020.SuperReb"
    "ateInfo\022$\n\nrebateInfo\030\004 \001(\0132\020.SuperRebat"
    "eInfo\"3\n\025RechargeDailyGiftItem\022\n\n\002id\030\001 \001"
    "(\005\022\016\n\006status\030\002 \001(\005\"H\n\027GCRechargeDailyGif"
    "tInfo\022-\n\rdailyGiftList\030\001 \003(\0132\026.RechargeD"
    "ailyGiftItem\"*\n\034CGGetRechargeDailyGiftRe"
    "ward\022\n\n\002id\030\001 \001(\005\"2\n GCGetRechargeDailyGi"
    "ftRewardBack\022\016\n\006result\030\001 \001(\005\"I\n\022GCPoints"
    "BuyHisInfo\022\014\n\004type\030\001 \001(\005\022%\n\017winnersInfoL"
    "ist\030\002 \003(\0132\014.WinnersInfo\"Q\n\017GCPointsBuyLi"
    "st\022\014\n\004type\030\001 \001(\005\022\016\n\006points\030\002 \001(\005\022 \n\013buyI"
    "nfoList\030\003 \003(\0132\013.oneBuyInfo\"&\n\013CGBuyPoint"
    "s\022\n\n\002id\030\001 \001(\005\022\013\n\003num\030\002 \001(\005B\031\n\027com.mile.c"
    "ommon.message", 4293);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SuperGiftMessage.proto", &protobuf_RegisterTypes);
  CardRewardData::default_instance_ = new CardRewardData();
  RechargeTypeData::default_instance_ = new RechargeTypeData();
  RechargeRewardData::default_instance_ = new RechargeRewardData();
  GCUpdateCardReward::default_instance_ = new GCUpdateCardReward();
  CGGetCardReward::default_instance_ = new CGGetCardReward();
  OneInDay::default_instance_ = new OneInDay();
  GCSevenDaysHappy::default_instance_ = new GCSevenDaysHappy();
  CGSevenDaysHappy::default_instance_ = new CGSevenDaysHappy();
  CGFirstCharge::default_instance_ = new CGFirstCharge();
  GCFirstCharge::default_instance_ = new GCFirstCharge();
  CGRechargeReward::default_instance_ = new CGRechargeReward();
  GCRechargeReward::default_instance_ = new GCRechargeReward();
  GCRechargeTypeUpdate::default_instance_ = new GCRechargeTypeUpdate();
  GCSigninStatusList::default_instance_ = new GCSigninStatusList();
  SignInTem::default_instance_ = new SignInTem();
  CGSignin::default_instance_ = new CGSignin();
  GCSignin::default_instance_ = new GCSignin();
  SunSignInRew::default_instance_ = new SunSignInRew();
  CGGrowFund::default_instance_ = new CGGrowFund();
  GCGrowFund::default_instance_ = new GCGrowFund();
  GCGrowFundBuyNum::default_instance_ = new GCGrowFundBuyNum();
  CGDoublePay::default_instance_ = new CGDoublePay();
  GCDoublePay::default_instance_ = new GCDoublePay();
  GCDailyGiftInfo::default_instance_ = new GCDailyGiftInfo();
  WinnersInfo::default_instance_ = new WinnersInfo();
  GCUpdateRewardList::default_instance_ = new GCUpdateRewardList();
  oneBuyInfo::default_instance_ = new oneBuyInfo();
  GCUpdateOneBuyList::default_instance_ = new GCUpdateOneBuyList();
  CGCanBuy::default_instance_ = new CGCanBuy();
  GCCanBuyBack::default_instance_ = new GCCanBuyBack();
  GCHoliday::default_instance_ = new GCHoliday();
  CGHoliday::default_instance_ = new CGHoliday();
  GCFeelGold::default_instance_ = new GCFeelGold();
  CGFeelGold::default_instance_ = new CGFeelGold();
  LevelQuotaInfo::default_instance_ = new LevelQuotaInfo();
  GCLevelQuota::default_instance_ = new GCLevelQuota();
  CGBuyLevelQuota::default_instance_ = new CGBuyLevelQuota();
  GCLevelQuotaUpdate::default_instance_ = new GCLevelQuotaUpdate();
  FreeBackInfo::default_instance_ = new FreeBackInfo();
  CGBuyFreeBack::default_instance_ = new CGBuyFreeBack();
  GCFreeBack::default_instance_ = new GCFreeBack();
  SuperRebateItem::default_instance_ = new SuperRebateItem();
  SuperRebateInfo::default_instance_ = new SuperRebateInfo();
  CGGetSuperRebateReward::default_instance_ = new CGGetSuperRebateReward();
  GCSuperRebateBack::default_instance_ = new GCSuperRebateBack();
  RechargeDailyGiftItem::default_instance_ = new RechargeDailyGiftItem();
  GCRechargeDailyGiftInfo::default_instance_ = new GCRechargeDailyGiftInfo();
  CGGetRechargeDailyGiftReward::default_instance_ = new CGGetRechargeDailyGiftReward();
  GCGetRechargeDailyGiftRewardBack::default_instance_ = new GCGetRechargeDailyGiftRewardBack();
  GCPointsBuyHisInfo::default_instance_ = new GCPointsBuyHisInfo();
  GCPointsBuyList::default_instance_ = new GCPointsBuyList();
  CGBuyPoints::default_instance_ = new CGBuyPoints();
  CardRewardData::default_instance_->InitAsDefaultInstance();
  RechargeTypeData::default_instance_->InitAsDefaultInstance();
  RechargeRewardData::default_instance_->InitAsDefaultInstance();
  GCUpdateCardReward::default_instance_->InitAsDefaultInstance();
  CGGetCardReward::default_instance_->InitAsDefaultInstance();
  OneInDay::default_instance_->InitAsDefaultInstance();
  GCSevenDaysHappy::default_instance_->InitAsDefaultInstance();
  CGSevenDaysHappy::default_instance_->InitAsDefaultInstance();
  CGFirstCharge::default_instance_->InitAsDefaultInstance();
  GCFirstCharge::default_instance_->InitAsDefaultInstance();
  CGRechargeReward::default_instance_->InitAsDefaultInstance();
  GCRechargeReward::default_instance_->InitAsDefaultInstance();
  GCRechargeTypeUpdate::default_instance_->InitAsDefaultInstance();
  GCSigninStatusList::default_instance_->InitAsDefaultInstance();
  SignInTem::default_instance_->InitAsDefaultInstance();
  CGSignin::default_instance_->InitAsDefaultInstance();
  GCSignin::default_instance_->InitAsDefaultInstance();
  SunSignInRew::default_instance_->InitAsDefaultInstance();
  CGGrowFund::default_instance_->InitAsDefaultInstance();
  GCGrowFund::default_instance_->InitAsDefaultInstance();
  GCGrowFundBuyNum::default_instance_->InitAsDefaultInstance();
  CGDoublePay::default_instance_->InitAsDefaultInstance();
  GCDoublePay::default_instance_->InitAsDefaultInstance();
  GCDailyGiftInfo::default_instance_->InitAsDefaultInstance();
  WinnersInfo::default_instance_->InitAsDefaultInstance();
  GCUpdateRewardList::default_instance_->InitAsDefaultInstance();
  oneBuyInfo::default_instance_->InitAsDefaultInstance();
  GCUpdateOneBuyList::default_instance_->InitAsDefaultInstance();
  CGCanBuy::default_instance_->InitAsDefaultInstance();
  GCCanBuyBack::default_instance_->InitAsDefaultInstance();
  GCHoliday::default_instance_->InitAsDefaultInstance();
  CGHoliday::default_instance_->InitAsDefaultInstance();
  GCFeelGold::default_instance_->InitAsDefaultInstance();
  CGFeelGold::default_instance_->InitAsDefaultInstance();
  LevelQuotaInfo::default_instance_->InitAsDefaultInstance();
  GCLevelQuota::default_instance_->InitAsDefaultInstance();
  CGBuyLevelQuota::default_instance_->InitAsDefaultInstance();
  GCLevelQuotaUpdate::default_instance_->InitAsDefaultInstance();
  FreeBackInfo::default_instance_->InitAsDefaultInstance();
  CGBuyFreeBack::default_instance_->InitAsDefaultInstance();
  GCFreeBack::default_instance_->InitAsDefaultInstance();
  SuperRebateItem::default_instance_->InitAsDefaultInstance();
  SuperRebateInfo::default_instance_->InitAsDefaultInstance();
  CGGetSuperRebateReward::default_instance_->InitAsDefaultInstance();
  GCSuperRebateBack::default_instance_->InitAsDefaultInstance();
  RechargeDailyGiftItem::default_instance_->InitAsDefaultInstance();
  GCRechargeDailyGiftInfo::default_instance_->InitAsDefaultInstance();
  CGGetRechargeDailyGiftReward::default_instance_->InitAsDefaultInstance();
  GCGetRechargeDailyGiftRewardBack::default_instance_->InitAsDefaultInstance();
  GCPointsBuyHisInfo::default_instance_->InitAsDefaultInstance();
  GCPointsBuyList::default_instance_->InitAsDefaultInstance();
  CGBuyPoints::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SuperGiftMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SuperGiftMessage_2eproto {
  StaticDescriptorInitializer_SuperGiftMessage_2eproto() {
    protobuf_AddDesc_SuperGiftMessage_2eproto();
  }
} static_descriptor_initializer_SuperGiftMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CardRewardData::kTypeFieldNumber;
const int CardRewardData::kStatusFieldNumber;
const int CardRewardData::kDayFieldNumber;
const int CardRewardData::kChargeIdFieldNumber;
const int CardRewardData::kGetStatusFieldNumber;
#endif  // !_MSC_VER

CardRewardData::CardRewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CardRewardData)
}

void CardRewardData::InitAsDefaultInstance() {
}

CardRewardData::CardRewardData(const CardRewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CardRewardData)
}

void CardRewardData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  status_ = 0;
  day_ = 0;
  chargeid_ = 0;
  getstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardRewardData::~CardRewardData() {
  // @@protoc_insertion_point(destructor:CardRewardData)
  SharedDtor();
}

void CardRewardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardRewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardRewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardRewardData_descriptor_;
}

const CardRewardData& CardRewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CardRewardData* CardRewardData::default_instance_ = NULL;

CardRewardData* CardRewardData::New() const {
  return new CardRewardData;
}

void CardRewardData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CardRewardData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, getstatus_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardRewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CardRewardData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // optional int32 day = 3;
      case 3: {
        if (tag == 24) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chargeId;
        break;
      }

      // optional int32 chargeId = 4;
      case 4: {
        if (tag == 32) {
         parse_chargeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chargeid_)));
          set_has_chargeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_getStatus;
        break;
      }

      // optional int32 getStatus = 5;
      case 5: {
        if (tag == 40) {
         parse_getStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getstatus_)));
          set_has_getstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CardRewardData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CardRewardData)
  return false;
#undef DO_
}

void CardRewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CardRewardData)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int32 day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->day(), output);
  }

  // optional int32 chargeId = 4;
  if (has_chargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chargeid(), output);
  }

  // optional int32 getStatus = 5;
  if (has_getstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->getstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CardRewardData)
}

::google::protobuf::uint8* CardRewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CardRewardData)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int32 day = 3;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->day(), target);
  }

  // optional int32 chargeId = 4;
  if (has_chargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chargeid(), target);
  }

  // optional int32 getStatus = 5;
  if (has_getstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->getstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CardRewardData)
  return target;
}

int CardRewardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 chargeId = 4;
    if (has_chargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chargeid());
    }

    // optional int32 getStatus = 5;
    if (has_getstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardRewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardRewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardRewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardRewardData::MergeFrom(const CardRewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_chargeid()) {
      set_chargeid(from.chargeid());
    }
    if (from.has_getstatus()) {
      set_getstatus(from.getstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardRewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardRewardData::CopyFrom(const CardRewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardRewardData::IsInitialized() const {

  return true;
}

void CardRewardData::Swap(CardRewardData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(day_, other->day_);
    std::swap(chargeid_, other->chargeid_);
    std::swap(getstatus_, other->getstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardRewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardRewardData_descriptor_;
  metadata.reflection = CardRewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeTypeData::kTypeFieldNumber;
const int RechargeTypeData::kStartTimeFieldNumber;
const int RechargeTypeData::kEndTimeFieldNumber;
const int RechargeTypeData::kRewardDataFieldNumber;
const int RechargeTypeData::kValueFieldNumber;
const int RechargeTypeData::kRefreshTimeFieldNumber;
const int RechargeTypeData::kStatusFieldNumber;
#endif  // !_MSC_VER

RechargeTypeData::RechargeTypeData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RechargeTypeData)
}

void RechargeTypeData::InitAsDefaultInstance() {
}

RechargeTypeData::RechargeTypeData(const RechargeTypeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RechargeTypeData)
}

void RechargeTypeData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  value_ = 0;
  refreshtime_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeTypeData::~RechargeTypeData() {
  // @@protoc_insertion_point(destructor:RechargeTypeData)
  SharedDtor();
}

void RechargeTypeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RechargeTypeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeTypeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeTypeData_descriptor_;
}

const RechargeTypeData& RechargeTypeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

RechargeTypeData* RechargeTypeData::default_instance_ = NULL;

RechargeTypeData* RechargeTypeData::New() const {
  return new RechargeTypeData;
}

void RechargeTypeData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RechargeTypeData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 119) {
    ZR_(starttime_, value_);
    ZR_(refreshtime_, status_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewarddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeTypeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RechargeTypeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startTime;
        break;
      }

      // optional int64 startTime = 2;
      case 2: {
        if (tag == 16) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 3;
      case 3: {
        if (tag == 24) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewardData;
        break;
      }

      // repeated .RechargeRewardData rewardData = 4;
      case 4: {
        if (tag == 34) {
         parse_rewardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewarddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewardData;
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // optional int32 value = 5;
      case 5: {
        if (tag == 40) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_refreshTime;
        break;
      }

      // optional int64 refreshTime = 6;
      case 6: {
        if (tag == 48) {
         parse_refreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional int32 status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RechargeTypeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RechargeTypeData)
  return false;
#undef DO_
}

void RechargeTypeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RechargeTypeData)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 startTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->starttime(), output);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // repeated .RechargeRewardData rewardData = 4;
  for (int i = 0; i < this->rewarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewarddata(i), output);
  }

  // optional int32 value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value(), output);
  }

  // optional int64 refreshTime = 6;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->refreshtime(), output);
  }

  // optional int32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RechargeTypeData)
}

::google::protobuf::uint8* RechargeTypeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RechargeTypeData)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 startTime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->starttime(), target);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // repeated .RechargeRewardData rewardData = 4;
  for (int i = 0; i < this->rewarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewarddata(i), target);
  }

  // optional int32 value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->value(), target);
  }

  // optional int64 refreshTime = 6;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->refreshtime(), target);
  }

  // optional int32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RechargeTypeData)
  return target;
}

int RechargeTypeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 startTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int64 refreshTime = 6;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->refreshtime());
    }

    // optional int32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .RechargeRewardData rewardData = 4;
  total_size += 1 * this->rewarddata_size();
  for (int i = 0; i < this->rewarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewarddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeTypeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeTypeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeTypeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeTypeData::MergeFrom(const RechargeTypeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewarddata_.MergeFrom(from.rewarddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeTypeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeTypeData::CopyFrom(const RechargeTypeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeTypeData::IsInitialized() const {

  return true;
}

void RechargeTypeData::Swap(RechargeTypeData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    rewarddata_.Swap(&other->rewarddata_);
    std::swap(value_, other->value_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeTypeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeTypeData_descriptor_;
  metadata.reflection = RechargeTypeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeRewardData::kIdFieldNumber;
const int RechargeRewardData::kStatusFieldNumber;
const int RechargeRewardData::kNeedNumFieldNumber;
const int RechargeRewardData::kRewardFieldNumber;
#endif  // !_MSC_VER

RechargeRewardData::RechargeRewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RechargeRewardData)
}

void RechargeRewardData::InitAsDefaultInstance() {
}

RechargeRewardData::RechargeRewardData(const RechargeRewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RechargeRewardData)
}

void RechargeRewardData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  neednum_ = 0;
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeRewardData::~RechargeRewardData() {
  // @@protoc_insertion_point(destructor:RechargeRewardData)
  SharedDtor();
}

void RechargeRewardData::SharedDtor() {
  if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_;
  }
  if (this != default_instance_) {
  }
}

void RechargeRewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeRewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeRewardData_descriptor_;
}

const RechargeRewardData& RechargeRewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

RechargeRewardData* RechargeRewardData::default_instance_ = NULL;

RechargeRewardData* RechargeRewardData::New() const {
  return new RechargeRewardData;
}

void RechargeRewardData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RechargeRewardData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, status_);
    neednum_ = 0;
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reward_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeRewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RechargeRewardData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_needNum;
        break;
      }

      // optional int32 needNum = 3;
      case 3: {
        if (tag == 24) {
         parse_needNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &neednum_)));
          set_has_neednum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // optional string reward = 4;
      case 4: {
        if (tag == 34) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reward().data(), this->reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reward");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RechargeRewardData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RechargeRewardData)
  return false;
#undef DO_
}

void RechargeRewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RechargeRewardData)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int32 needNum = 3;
  if (has_neednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->neednum(), output);
  }

  // optional string reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RechargeRewardData)
}

::google::protobuf::uint8* RechargeRewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RechargeRewardData)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int32 needNum = 3;
  if (has_neednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->neednum(), target);
  }

  // optional string reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RechargeRewardData)
  return target;
}

int RechargeRewardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 needNum = 3;
    if (has_neednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->neednum());
    }

    // optional string reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeRewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeRewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeRewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeRewardData::MergeFrom(const RechargeRewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_neednum()) {
      set_neednum(from.neednum());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeRewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeRewardData::CopyFrom(const RechargeRewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeRewardData::IsInitialized() const {

  return true;
}

void RechargeRewardData::Swap(RechargeRewardData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(neednum_, other->neednum_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeRewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeRewardData_descriptor_;
  metadata.reflection = RechargeRewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUpdateCardReward::kCardRewardDataFieldNumber;
#endif  // !_MSC_VER

GCUpdateCardReward::GCUpdateCardReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCUpdateCardReward)
}

void GCUpdateCardReward::InitAsDefaultInstance() {
}

GCUpdateCardReward::GCUpdateCardReward(const GCUpdateCardReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCUpdateCardReward)
}

void GCUpdateCardReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUpdateCardReward::~GCUpdateCardReward() {
  // @@protoc_insertion_point(destructor:GCUpdateCardReward)
  SharedDtor();
}

void GCUpdateCardReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCUpdateCardReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUpdateCardReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUpdateCardReward_descriptor_;
}

const GCUpdateCardReward& GCUpdateCardReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCUpdateCardReward* GCUpdateCardReward::default_instance_ = NULL;

GCUpdateCardReward* GCUpdateCardReward::New() const {
  return new GCUpdateCardReward;
}

void GCUpdateCardReward::Clear() {
  cardrewarddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUpdateCardReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCUpdateCardReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CardRewardData cardRewardData = 1;
      case 1: {
        if (tag == 10) {
         parse_cardRewardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardrewarddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cardRewardData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCUpdateCardReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCUpdateCardReward)
  return false;
#undef DO_
}

void GCUpdateCardReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCUpdateCardReward)
  // repeated .CardRewardData cardRewardData = 1;
  for (int i = 0; i < this->cardrewarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cardrewarddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCUpdateCardReward)
}

::google::protobuf::uint8* GCUpdateCardReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCUpdateCardReward)
  // repeated .CardRewardData cardRewardData = 1;
  for (int i = 0; i < this->cardrewarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cardrewarddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCUpdateCardReward)
  return target;
}

int GCUpdateCardReward::ByteSize() const {
  int total_size = 0;

  // repeated .CardRewardData cardRewardData = 1;
  total_size += 1 * this->cardrewarddata_size();
  for (int i = 0; i < this->cardrewarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardrewarddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUpdateCardReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUpdateCardReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUpdateCardReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUpdateCardReward::MergeFrom(const GCUpdateCardReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardrewarddata_.MergeFrom(from.cardrewarddata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUpdateCardReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUpdateCardReward::CopyFrom(const GCUpdateCardReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUpdateCardReward::IsInitialized() const {

  return true;
}

void GCUpdateCardReward::Swap(GCUpdateCardReward* other) {
  if (other != this) {
    cardrewarddata_.Swap(&other->cardrewarddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUpdateCardReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUpdateCardReward_descriptor_;
  metadata.reflection = GCUpdateCardReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetCardReward::kTypeFieldNumber;
#endif  // !_MSC_VER

CGGetCardReward::CGGetCardReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetCardReward)
}

void CGGetCardReward::InitAsDefaultInstance() {
}

CGGetCardReward::CGGetCardReward(const CGGetCardReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetCardReward)
}

void CGGetCardReward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetCardReward::~CGGetCardReward() {
  // @@protoc_insertion_point(destructor:CGGetCardReward)
  SharedDtor();
}

void CGGetCardReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetCardReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetCardReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetCardReward_descriptor_;
}

const CGGetCardReward& CGGetCardReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGGetCardReward* CGGetCardReward::default_instance_ = NULL;

CGGetCardReward* CGGetCardReward::New() const {
  return new CGGetCardReward;
}

void CGGetCardReward::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetCardReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetCardReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetCardReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetCardReward)
  return false;
#undef DO_
}

void CGGetCardReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetCardReward)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetCardReward)
}

::google::protobuf::uint8* CGGetCardReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetCardReward)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetCardReward)
  return target;
}

int CGGetCardReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetCardReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetCardReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetCardReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetCardReward::MergeFrom(const CGGetCardReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetCardReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetCardReward::CopyFrom(const CGGetCardReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetCardReward::IsInitialized() const {

  return true;
}

void CGGetCardReward::Swap(CGGetCardReward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetCardReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetCardReward_descriptor_;
  metadata.reflection = CGGetCardReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneInDay::kTblIdFieldNumber;
const int OneInDay::kStatusFieldNumber;
const int OneInDay::kTotalCountFieldNumber;
const int OneInDay::kCountFieldNumber;
#endif  // !_MSC_VER

OneInDay::OneInDay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneInDay)
}

void OneInDay::InitAsDefaultInstance() {
}

OneInDay::OneInDay(const OneInDay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OneInDay)
}

void OneInDay::SharedCtor() {
  _cached_size_ = 0;
  tblid_ = 0;
  status_ = 0;
  totalcount_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneInDay::~OneInDay() {
  // @@protoc_insertion_point(destructor:OneInDay)
  SharedDtor();
}

void OneInDay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneInDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneInDay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneInDay_descriptor_;
}

const OneInDay& OneInDay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

OneInDay* OneInDay::default_instance_ = NULL;

OneInDay* OneInDay::New() const {
  return new OneInDay;
}

void OneInDay::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OneInDay*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tblid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneInDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneInDay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tblId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tblid_)));
          set_has_tblid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalCount;
        break;
      }

      // optional int32 totalCount = 3;
      case 3: {
        if (tag == 24) {
         parse_totalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneInDay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneInDay)
  return false;
#undef DO_
}

void OneInDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneInDay)
  // optional int32 tblId = 1;
  if (has_tblid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tblid(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int32 totalCount = 3;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalcount(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneInDay)
}

::google::protobuf::uint8* OneInDay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OneInDay)
  // optional int32 tblId = 1;
  if (has_tblid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tblid(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int32 totalCount = 3;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalcount(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneInDay)
  return target;
}

int OneInDay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tblId = 1;
    if (has_tblid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tblid());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 totalCount = 3;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneInDay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneInDay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneInDay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneInDay::MergeFrom(const OneInDay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tblid()) {
      set_tblid(from.tblid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneInDay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneInDay::CopyFrom(const OneInDay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneInDay::IsInitialized() const {

  return true;
}

void OneInDay::Swap(OneInDay* other) {
  if (other != this) {
    std::swap(tblid_, other->tblid_);
    std::swap(status_, other->status_);
    std::swap(totalcount_, other->totalcount_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneInDay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneInDay_descriptor_;
  metadata.reflection = OneInDay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSevenDaysHappy::kTypeFieldNumber;
const int GCSevenDaysHappy::kTargetLstFieldNumber;
const int GCSevenDaysHappy::kUpgradeLstFieldNumber;
const int GCSevenDaysHappy::kFightPowerLstFieldNumber;
const int GCSevenDaysHappy::kHalfPriceFieldNumber;
const int GCSevenDaysHappy::kDayFieldNumber;
const int GCSevenDaysHappy::kScoreFieldNumber;
const int GCSevenDaysHappy::kCurIdFieldNumber;
const int GCSevenDaysHappy::kEndTimeFieldNumber;
const int GCSevenDaysHappy::kResultFieldNumber;
#endif  // !_MSC_VER

GCSevenDaysHappy::GCSevenDaysHappy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSevenDaysHappy)
}

void GCSevenDaysHappy::InitAsDefaultInstance() {
}

GCSevenDaysHappy::GCSevenDaysHappy(const GCSevenDaysHappy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSevenDaysHappy)
}

void GCSevenDaysHappy::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  day_ = 0;
  score_ = 0;
  curid_ = 0;
  endtime_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSevenDaysHappy::~GCSevenDaysHappy() {
  // @@protoc_insertion_point(destructor:GCSevenDaysHappy)
  SharedDtor();
}

void GCSevenDaysHappy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSevenDaysHappy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSevenDaysHappy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSevenDaysHappy_descriptor_;
}

const GCSevenDaysHappy& GCSevenDaysHappy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCSevenDaysHappy* GCSevenDaysHappy::default_instance_ = NULL;

GCSevenDaysHappy* GCSevenDaysHappy::New() const {
  return new GCSevenDaysHappy;
}

void GCSevenDaysHappy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSevenDaysHappy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, day_);
  ZR_(score_, curid_);
  ZR_(endtime_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  targetlst_.Clear();
  upgradelst_.Clear();
  fightpowerlst_.Clear();
  halfprice_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSevenDaysHappy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSevenDaysHappy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targetLst;
        break;
      }

      // repeated .OneInDay targetLst = 2;
      case 2: {
        if (tag == 18) {
         parse_targetLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targetlst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targetLst;
        if (input->ExpectTag(26)) goto parse_upgradeLst;
        break;
      }

      // repeated .OneInDay upgradeLst = 3;
      case 3: {
        if (tag == 26) {
         parse_upgradeLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upgradelst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_upgradeLst;
        if (input->ExpectTag(34)) goto parse_fightPowerLst;
        break;
      }

      // repeated .OneInDay fightPowerLst = 4;
      case 4: {
        if (tag == 34) {
         parse_fightPowerLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fightpowerlst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fightPowerLst;
        if (input->ExpectTag(42)) goto parse_halfPrice;
        break;
      }

      // repeated .OneInDay halfPrice = 5;
      case 5: {
        if (tag == 42) {
         parse_halfPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_halfprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_halfPrice;
        if (input->ExpectTag(48)) goto parse_day;
        break;
      }

      // optional int32 day = 6;
      case 6: {
        if (tag == 48) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_score;
        break;
      }

      // optional int32 score = 7;
      case 7: {
        if (tag == 56) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_curId;
        break;
      }

      // optional int32 curId = 8;
      case 8: {
        if (tag == 64) {
         parse_curId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curid_)));
          set_has_curid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 9;
      case 9: {
        if (tag == 72) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_result;
        break;
      }

      // optional int32 result = 10;
      case 10: {
        if (tag == 80) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSevenDaysHappy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSevenDaysHappy)
  return false;
#undef DO_
}

void GCSevenDaysHappy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSevenDaysHappy)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .OneInDay targetLst = 2;
  for (int i = 0; i < this->targetlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetlst(i), output);
  }

  // repeated .OneInDay upgradeLst = 3;
  for (int i = 0; i < this->upgradelst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->upgradelst(i), output);
  }

  // repeated .OneInDay fightPowerLst = 4;
  for (int i = 0; i < this->fightpowerlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fightpowerlst(i), output);
  }

  // repeated .OneInDay halfPrice = 5;
  for (int i = 0; i < this->halfprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->halfprice(i), output);
  }

  // optional int32 day = 6;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->day(), output);
  }

  // optional int32 score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->score(), output);
  }

  // optional int32 curId = 8;
  if (has_curid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->curid(), output);
  }

  // optional int64 endTime = 9;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->endtime(), output);
  }

  // optional int32 result = 10;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSevenDaysHappy)
}

::google::protobuf::uint8* GCSevenDaysHappy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSevenDaysHappy)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .OneInDay targetLst = 2;
  for (int i = 0; i < this->targetlst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetlst(i), target);
  }

  // repeated .OneInDay upgradeLst = 3;
  for (int i = 0; i < this->upgradelst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->upgradelst(i), target);
  }

  // repeated .OneInDay fightPowerLst = 4;
  for (int i = 0; i < this->fightpowerlst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fightpowerlst(i), target);
  }

  // repeated .OneInDay halfPrice = 5;
  for (int i = 0; i < this->halfprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->halfprice(i), target);
  }

  // optional int32 day = 6;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->day(), target);
  }

  // optional int32 score = 7;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->score(), target);
  }

  // optional int32 curId = 8;
  if (has_curid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->curid(), target);
  }

  // optional int64 endTime = 9;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->endtime(), target);
  }

  // optional int32 result = 10;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSevenDaysHappy)
  return target;
}

int GCSevenDaysHappy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 day = 6;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 score = 7;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 curId = 8;
    if (has_curid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 endTime = 9;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 result = 10;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .OneInDay targetLst = 2;
  total_size += 1 * this->targetlst_size();
  for (int i = 0; i < this->targetlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targetlst(i));
  }

  // repeated .OneInDay upgradeLst = 3;
  total_size += 1 * this->upgradelst_size();
  for (int i = 0; i < this->upgradelst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upgradelst(i));
  }

  // repeated .OneInDay fightPowerLst = 4;
  total_size += 1 * this->fightpowerlst_size();
  for (int i = 0; i < this->fightpowerlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightpowerlst(i));
  }

  // repeated .OneInDay halfPrice = 5;
  total_size += 1 * this->halfprice_size();
  for (int i = 0; i < this->halfprice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->halfprice(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSevenDaysHappy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSevenDaysHappy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSevenDaysHappy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSevenDaysHappy::MergeFrom(const GCSevenDaysHappy& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetlst_.MergeFrom(from.targetlst_);
  upgradelst_.MergeFrom(from.upgradelst_);
  fightpowerlst_.MergeFrom(from.fightpowerlst_);
  halfprice_.MergeFrom(from.halfprice_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_curid()) {
      set_curid(from.curid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSevenDaysHappy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSevenDaysHappy::CopyFrom(const GCSevenDaysHappy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSevenDaysHappy::IsInitialized() const {

  return true;
}

void GCSevenDaysHappy::Swap(GCSevenDaysHappy* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    targetlst_.Swap(&other->targetlst_);
    upgradelst_.Swap(&other->upgradelst_);
    fightpowerlst_.Swap(&other->fightpowerlst_);
    halfprice_.Swap(&other->halfprice_);
    std::swap(day_, other->day_);
    std::swap(score_, other->score_);
    std::swap(curid_, other->curid_);
    std::swap(endtime_, other->endtime_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSevenDaysHappy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSevenDaysHappy_descriptor_;
  metadata.reflection = GCSevenDaysHappy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSevenDaysHappy::kTypeFieldNumber;
const int CGSevenDaysHappy::kDayFieldNumber;
const int CGSevenDaysHappy::kTblIdFieldNumber;
#endif  // !_MSC_VER

CGSevenDaysHappy::CGSevenDaysHappy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSevenDaysHappy)
}

void CGSevenDaysHappy::InitAsDefaultInstance() {
}

CGSevenDaysHappy::CGSevenDaysHappy(const CGSevenDaysHappy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSevenDaysHappy)
}

void CGSevenDaysHappy::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  day_ = 0;
  tblid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSevenDaysHappy::~CGSevenDaysHappy() {
  // @@protoc_insertion_point(destructor:CGSevenDaysHappy)
  SharedDtor();
}

void CGSevenDaysHappy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSevenDaysHappy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSevenDaysHappy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSevenDaysHappy_descriptor_;
}

const CGSevenDaysHappy& CGSevenDaysHappy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGSevenDaysHappy* CGSevenDaysHappy::default_instance_ = NULL;

CGSevenDaysHappy* CGSevenDaysHappy::New() const {
  return new CGSevenDaysHappy;
}

void CGSevenDaysHappy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGSevenDaysHappy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, tblid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSevenDaysHappy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSevenDaysHappy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }

      // optional int32 day = 2;
      case 2: {
        if (tag == 16) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tblId;
        break;
      }

      // optional int32 tblId = 3;
      case 3: {
        if (tag == 24) {
         parse_tblId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tblid_)));
          set_has_tblid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSevenDaysHappy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSevenDaysHappy)
  return false;
#undef DO_
}

void CGSevenDaysHappy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSevenDaysHappy)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->day(), output);
  }

  // optional int32 tblId = 3;
  if (has_tblid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tblid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSevenDaysHappy)
}

::google::protobuf::uint8* CGSevenDaysHappy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSevenDaysHappy)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->day(), target);
  }

  // optional int32 tblId = 3;
  if (has_tblid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tblid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSevenDaysHappy)
  return target;
}

int CGSevenDaysHappy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 tblId = 3;
    if (has_tblid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tblid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSevenDaysHappy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSevenDaysHappy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSevenDaysHappy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSevenDaysHappy::MergeFrom(const CGSevenDaysHappy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_tblid()) {
      set_tblid(from.tblid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSevenDaysHappy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSevenDaysHappy::CopyFrom(const CGSevenDaysHappy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSevenDaysHappy::IsInitialized() const {

  return true;
}

void CGSevenDaysHappy::Swap(CGSevenDaysHappy* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(day_, other->day_);
    std::swap(tblid_, other->tblid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSevenDaysHappy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSevenDaysHappy_descriptor_;
  metadata.reflection = CGSevenDaysHappy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGFirstCharge::kTypeFieldNumber;
#endif  // !_MSC_VER

CGFirstCharge::CGFirstCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGFirstCharge)
}

void CGFirstCharge::InitAsDefaultInstance() {
}

CGFirstCharge::CGFirstCharge(const CGFirstCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGFirstCharge)
}

void CGFirstCharge::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGFirstCharge::~CGFirstCharge() {
  // @@protoc_insertion_point(destructor:CGFirstCharge)
  SharedDtor();
}

void CGFirstCharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGFirstCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGFirstCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGFirstCharge_descriptor_;
}

const CGFirstCharge& CGFirstCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGFirstCharge* CGFirstCharge::default_instance_ = NULL;

CGFirstCharge* CGFirstCharge::New() const {
  return new CGFirstCharge;
}

void CGFirstCharge::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGFirstCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGFirstCharge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGFirstCharge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGFirstCharge)
  return false;
#undef DO_
}

void CGFirstCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGFirstCharge)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGFirstCharge)
}

::google::protobuf::uint8* CGFirstCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGFirstCharge)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGFirstCharge)
  return target;
}

int CGFirstCharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGFirstCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGFirstCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGFirstCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGFirstCharge::MergeFrom(const CGFirstCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGFirstCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGFirstCharge::CopyFrom(const CGFirstCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGFirstCharge::IsInitialized() const {

  return true;
}

void CGFirstCharge::Swap(CGFirstCharge* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGFirstCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGFirstCharge_descriptor_;
  metadata.reflection = CGFirstCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCFirstCharge::kTypeFieldNumber;
const int GCFirstCharge::kStateFieldNumber;
#endif  // !_MSC_VER

GCFirstCharge::GCFirstCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCFirstCharge)
}

void GCFirstCharge::InitAsDefaultInstance() {
}

GCFirstCharge::GCFirstCharge(const GCFirstCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCFirstCharge)
}

void GCFirstCharge::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCFirstCharge::~GCFirstCharge() {
  // @@protoc_insertion_point(destructor:GCFirstCharge)
  SharedDtor();
}

void GCFirstCharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCFirstCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCFirstCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCFirstCharge_descriptor_;
}

const GCFirstCharge& GCFirstCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCFirstCharge* GCFirstCharge::default_instance_ = NULL;

GCFirstCharge* GCFirstCharge::New() const {
  return new GCFirstCharge;
}

void GCFirstCharge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCFirstCharge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCFirstCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCFirstCharge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCFirstCharge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCFirstCharge)
  return false;
#undef DO_
}

void GCFirstCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCFirstCharge)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCFirstCharge)
}

::google::protobuf::uint8* GCFirstCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCFirstCharge)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCFirstCharge)
  return target;
}

int GCFirstCharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCFirstCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCFirstCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCFirstCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCFirstCharge::MergeFrom(const GCFirstCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCFirstCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCFirstCharge::CopyFrom(const GCFirstCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFirstCharge::IsInitialized() const {

  return true;
}

void GCFirstCharge::Swap(GCFirstCharge* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCFirstCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCFirstCharge_descriptor_;
  metadata.reflection = GCFirstCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGRechargeReward::kOpTypeFieldNumber;
const int CGRechargeReward::kIdFieldNumber;
#endif  // !_MSC_VER

CGRechargeReward::CGRechargeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGRechargeReward)
}

void CGRechargeReward::InitAsDefaultInstance() {
}

CGRechargeReward::CGRechargeReward(const CGRechargeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGRechargeReward)
}

void CGRechargeReward::SharedCtor() {
  _cached_size_ = 0;
  optype_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGRechargeReward::~CGRechargeReward() {
  // @@protoc_insertion_point(destructor:CGRechargeReward)
  SharedDtor();
}

void CGRechargeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGRechargeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGRechargeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGRechargeReward_descriptor_;
}

const CGRechargeReward& CGRechargeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGRechargeReward* CGRechargeReward::default_instance_ = NULL;

CGRechargeReward* CGRechargeReward::New() const {
  return new CGRechargeReward;
}

void CGRechargeReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGRechargeReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(optype_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGRechargeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGRechargeReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGRechargeReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGRechargeReward)
  return false;
#undef DO_
}

void CGRechargeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGRechargeReward)
  // optional int32 opType = 1;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optype(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGRechargeReward)
}

::google::protobuf::uint8* CGRechargeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGRechargeReward)
  // optional int32 opType = 1;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optype(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGRechargeReward)
  return target;
}

int CGRechargeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opType = 1;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGRechargeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGRechargeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGRechargeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGRechargeReward::MergeFrom(const CGRechargeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGRechargeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGRechargeReward::CopyFrom(const CGRechargeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGRechargeReward::IsInitialized() const {

  return true;
}

void CGRechargeReward::Swap(CGRechargeReward* other) {
  if (other != this) {
    std::swap(optype_, other->optype_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGRechargeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGRechargeReward_descriptor_;
  metadata.reflection = CGRechargeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRechargeReward::kOpTypeFieldNumber;
const int GCRechargeReward::kTypeDataFieldNumber;
const int GCRechargeReward::kFlagFieldNumber;
#endif  // !_MSC_VER

GCRechargeReward::GCRechargeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRechargeReward)
}

void GCRechargeReward::InitAsDefaultInstance() {
}

GCRechargeReward::GCRechargeReward(const GCRechargeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRechargeReward)
}

void GCRechargeReward::SharedCtor() {
  _cached_size_ = 0;
  optype_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRechargeReward::~GCRechargeReward() {
  // @@protoc_insertion_point(destructor:GCRechargeReward)
  SharedDtor();
}

void GCRechargeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRechargeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRechargeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRechargeReward_descriptor_;
}

const GCRechargeReward& GCRechargeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCRechargeReward* GCRechargeReward::default_instance_ = NULL;

GCRechargeReward* GCRechargeReward::New() const {
  return new GCRechargeReward;
}

void GCRechargeReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCRechargeReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(optype_, flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  typedata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRechargeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRechargeReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_typeData;
        break;
      }

      // repeated .RechargeTypeData typeData = 2;
      case 2: {
        if (tag == 18) {
         parse_typeData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_typedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_typeData;
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional int32 flag = 3;
      case 3: {
        if (tag == 24) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRechargeReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRechargeReward)
  return false;
#undef DO_
}

void GCRechargeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRechargeReward)
  // optional int32 opType = 1;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optype(), output);
  }

  // repeated .RechargeTypeData typeData = 2;
  for (int i = 0; i < this->typedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->typedata(i), output);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRechargeReward)
}

::google::protobuf::uint8* GCRechargeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRechargeReward)
  // optional int32 opType = 1;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optype(), target);
  }

  // repeated .RechargeTypeData typeData = 2;
  for (int i = 0; i < this->typedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->typedata(i), target);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRechargeReward)
  return target;
}

int GCRechargeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opType = 1;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional int32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  // repeated .RechargeTypeData typeData = 2;
  total_size += 1 * this->typedata_size();
  for (int i = 0; i < this->typedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->typedata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRechargeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRechargeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRechargeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRechargeReward::MergeFrom(const GCRechargeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  typedata_.MergeFrom(from.typedata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRechargeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRechargeReward::CopyFrom(const GCRechargeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRechargeReward::IsInitialized() const {

  return true;
}

void GCRechargeReward::Swap(GCRechargeReward* other) {
  if (other != this) {
    std::swap(optype_, other->optype_);
    typedata_.Swap(&other->typedata_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRechargeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRechargeReward_descriptor_;
  metadata.reflection = GCRechargeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRechargeTypeUpdate::kTypeDataFieldNumber;
#endif  // !_MSC_VER

GCRechargeTypeUpdate::GCRechargeTypeUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRechargeTypeUpdate)
}

void GCRechargeTypeUpdate::InitAsDefaultInstance() {
  typedata_ = const_cast< ::RechargeTypeData*>(&::RechargeTypeData::default_instance());
}

GCRechargeTypeUpdate::GCRechargeTypeUpdate(const GCRechargeTypeUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRechargeTypeUpdate)
}

void GCRechargeTypeUpdate::SharedCtor() {
  _cached_size_ = 0;
  typedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRechargeTypeUpdate::~GCRechargeTypeUpdate() {
  // @@protoc_insertion_point(destructor:GCRechargeTypeUpdate)
  SharedDtor();
}

void GCRechargeTypeUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete typedata_;
  }
}

void GCRechargeTypeUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRechargeTypeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRechargeTypeUpdate_descriptor_;
}

const GCRechargeTypeUpdate& GCRechargeTypeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCRechargeTypeUpdate* GCRechargeTypeUpdate::default_instance_ = NULL;

GCRechargeTypeUpdate* GCRechargeTypeUpdate::New() const {
  return new GCRechargeTypeUpdate;
}

void GCRechargeTypeUpdate::Clear() {
  if (has_typedata()) {
    if (typedata_ != NULL) typedata_->::RechargeTypeData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRechargeTypeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRechargeTypeUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RechargeTypeData typeData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_typedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRechargeTypeUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRechargeTypeUpdate)
  return false;
#undef DO_
}

void GCRechargeTypeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRechargeTypeUpdate)
  // optional .RechargeTypeData typeData = 1;
  if (has_typedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->typedata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRechargeTypeUpdate)
}

::google::protobuf::uint8* GCRechargeTypeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRechargeTypeUpdate)
  // optional .RechargeTypeData typeData = 1;
  if (has_typedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->typedata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRechargeTypeUpdate)
  return target;
}

int GCRechargeTypeUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RechargeTypeData typeData = 1;
    if (has_typedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->typedata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRechargeTypeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRechargeTypeUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRechargeTypeUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRechargeTypeUpdate::MergeFrom(const GCRechargeTypeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typedata()) {
      mutable_typedata()->::RechargeTypeData::MergeFrom(from.typedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRechargeTypeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRechargeTypeUpdate::CopyFrom(const GCRechargeTypeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRechargeTypeUpdate::IsInitialized() const {

  return true;
}

void GCRechargeTypeUpdate::Swap(GCRechargeTypeUpdate* other) {
  if (other != this) {
    std::swap(typedata_, other->typedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRechargeTypeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRechargeTypeUpdate_descriptor_;
  metadata.reflection = GCRechargeTypeUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSigninStatusList::kTodayFieldNumber;
const int GCSigninStatusList::kRewardMapFieldNumber;
const int GCSigninStatusList::kSignCountFieldNumber;
const int GCSigninStatusList::kSignInTemFieldNumber;
const int GCSigninStatusList::kTotalSignNumFieldNumber;
#endif  // !_MSC_VER

GCSigninStatusList::GCSigninStatusList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSigninStatusList)
}

void GCSigninStatusList::InitAsDefaultInstance() {
}

GCSigninStatusList::GCSigninStatusList(const GCSigninStatusList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSigninStatusList)
}

void GCSigninStatusList::SharedCtor() {
  _cached_size_ = 0;
  today_ = 0;
  signcount_ = 0;
  totalsignnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSigninStatusList::~GCSigninStatusList() {
  // @@protoc_insertion_point(destructor:GCSigninStatusList)
  SharedDtor();
}

void GCSigninStatusList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSigninStatusList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSigninStatusList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSigninStatusList_descriptor_;
}

const GCSigninStatusList& GCSigninStatusList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCSigninStatusList* GCSigninStatusList::default_instance_ = NULL;

GCSigninStatusList* GCSigninStatusList::New() const {
  return new GCSigninStatusList;
}

void GCSigninStatusList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSigninStatusList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 21) {
    ZR_(today_, signcount_);
    totalsignnum_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardmap_.Clear();
  signintem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSigninStatusList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSigninStatusList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 today = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_)));
          set_has_today();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rewardMap;
        break;
      }

      // repeated .SunSignInRew rewardMap = 2;
      case 2: {
        if (tag == 18) {
         parse_rewardMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardmap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rewardMap;
        if (input->ExpectTag(24)) goto parse_signCount;
        break;
      }

      // optional int32 signCount = 3;
      case 3: {
        if (tag == 24) {
         parse_signCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signcount_)));
          set_has_signcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_signInTem;
        break;
      }

      // repeated .SignInTem signInTem = 4;
      case 4: {
        if (tag == 34) {
         parse_signInTem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signintem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_signInTem;
        if (input->ExpectTag(40)) goto parse_totalSignNum;
        break;
      }

      // optional int32 totalSignNum = 5;
      case 5: {
        if (tag == 40) {
         parse_totalSignNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalsignnum_)));
          set_has_totalsignnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSigninStatusList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSigninStatusList)
  return false;
#undef DO_
}

void GCSigninStatusList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSigninStatusList)
  // optional int32 today = 1;
  if (has_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->today(), output);
  }

  // repeated .SunSignInRew rewardMap = 2;
  for (int i = 0; i < this->rewardmap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardmap(i), output);
  }

  // optional int32 signCount = 3;
  if (has_signcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signcount(), output);
  }

  // repeated .SignInTem signInTem = 4;
  for (int i = 0; i < this->signintem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->signintem(i), output);
  }

  // optional int32 totalSignNum = 5;
  if (has_totalsignnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalsignnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSigninStatusList)
}

::google::protobuf::uint8* GCSigninStatusList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSigninStatusList)
  // optional int32 today = 1;
  if (has_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->today(), target);
  }

  // repeated .SunSignInRew rewardMap = 2;
  for (int i = 0; i < this->rewardmap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardmap(i), target);
  }

  // optional int32 signCount = 3;
  if (has_signcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->signcount(), target);
  }

  // repeated .SignInTem signInTem = 4;
  for (int i = 0; i < this->signintem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->signintem(i), target);
  }

  // optional int32 totalSignNum = 5;
  if (has_totalsignnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalsignnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSigninStatusList)
  return target;
}

int GCSigninStatusList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 today = 1;
    if (has_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today());
    }

    // optional int32 signCount = 3;
    if (has_signcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signcount());
    }

    // optional int32 totalSignNum = 5;
    if (has_totalsignnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalsignnum());
    }

  }
  // repeated .SunSignInRew rewardMap = 2;
  total_size += 1 * this->rewardmap_size();
  for (int i = 0; i < this->rewardmap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardmap(i));
  }

  // repeated .SignInTem signInTem = 4;
  total_size += 1 * this->signintem_size();
  for (int i = 0; i < this->signintem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signintem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSigninStatusList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSigninStatusList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSigninStatusList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSigninStatusList::MergeFrom(const GCSigninStatusList& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardmap_.MergeFrom(from.rewardmap_);
  signintem_.MergeFrom(from.signintem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_today()) {
      set_today(from.today());
    }
    if (from.has_signcount()) {
      set_signcount(from.signcount());
    }
    if (from.has_totalsignnum()) {
      set_totalsignnum(from.totalsignnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSigninStatusList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSigninStatusList::CopyFrom(const GCSigninStatusList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSigninStatusList::IsInitialized() const {

  return true;
}

void GCSigninStatusList::Swap(GCSigninStatusList* other) {
  if (other != this) {
    std::swap(today_, other->today_);
    rewardmap_.Swap(&other->rewardmap_);
    std::swap(signcount_, other->signcount_);
    signintem_.Swap(&other->signintem_);
    std::swap(totalsignnum_, other->totalsignnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSigninStatusList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSigninStatusList_descriptor_;
  metadata.reflection = GCSigninStatusList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignInTem::kTemIdFieldNumber;
const int SignInTem::kMonthFieldNumber;
const int SignInTem::kDayFieldNumber;
const int SignInTem::kItemInfoFieldNumber;
const int SignInTem::kVipFieldNumber;
const int SignInTem::kRatioFieldNumber;
const int SignInTem::kSignStatusFieldNumber;
#endif  // !_MSC_VER

SignInTem::SignInTem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignInTem)
}

void SignInTem::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::ItemInfo*>(&::ItemInfo::default_instance());
}

SignInTem::SignInTem(const SignInTem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SignInTem)
}

void SignInTem::SharedCtor() {
  _cached_size_ = 0;
  temid_ = 0;
  month_ = 0;
  day_ = 0;
  iteminfo_ = NULL;
  vip_ = 0;
  ratio_ = 0;
  signstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignInTem::~SignInTem() {
  // @@protoc_insertion_point(destructor:SignInTem)
  SharedDtor();
}

void SignInTem::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void SignInTem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignInTem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignInTem_descriptor_;
}

const SignInTem& SignInTem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

SignInTem* SignInTem::default_instance_ = NULL;

SignInTem* SignInTem::New() const {
  return new SignInTem;
}

void SignInTem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SignInTem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(temid_, month_);
    ZR_(day_, signstatus_);
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::ItemInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignInTem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignInTem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 temId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temid_)));
          set_has_temid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // optional int32 month = 2;
      case 2: {
        if (tag == 16) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // optional int32 day = 3;
      case 3: {
        if (tag == 24) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_itemInfo;
        break;
      }

      // optional .ItemInfo itemInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vip;
        break;
      }

      // optional int32 vip = 5;
      case 5: {
        if (tag == 40) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ratio;
        break;
      }

      // optional int32 ratio = 6;
      case 6: {
        if (tag == 48) {
         parse_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_signStatus;
        break;
      }

      // optional int32 signStatus = 7;
      case 7: {
        if (tag == 56) {
         parse_signStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signstatus_)));
          set_has_signstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignInTem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignInTem)
  return false;
#undef DO_
}

void SignInTem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignInTem)
  // optional int32 temId = 1;
  if (has_temid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->temid(), output);
  }

  // optional int32 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->month(), output);
  }

  // optional int32 day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->day(), output);
  }

  // optional .ItemInfo itemInfo = 4;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->iteminfo(), output);
  }

  // optional int32 vip = 5;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vip(), output);
  }

  // optional int32 ratio = 6;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ratio(), output);
  }

  // optional int32 signStatus = 7;
  if (has_signstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->signstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SignInTem)
}

::google::protobuf::uint8* SignInTem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SignInTem)
  // optional int32 temId = 1;
  if (has_temid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->temid(), target);
  }

  // optional int32 month = 2;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->month(), target);
  }

  // optional int32 day = 3;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->day(), target);
  }

  // optional .ItemInfo itemInfo = 4;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->iteminfo(), target);
  }

  // optional int32 vip = 5;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vip(), target);
  }

  // optional int32 ratio = 6;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ratio(), target);
  }

  // optional int32 signStatus = 7;
  if (has_signstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->signstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignInTem)
  return target;
}

int SignInTem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 temId = 1;
    if (has_temid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->temid());
    }

    // optional int32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional .ItemInfo itemInfo = 4;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

    // optional int32 vip = 5;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int32 ratio = 6;
    if (has_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ratio());
    }

    // optional int32 signStatus = 7;
    if (has_signstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignInTem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignInTem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignInTem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignInTem::MergeFrom(const SignInTem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temid()) {
      set_temid(from.temid());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::ItemInfo::MergeFrom(from.iteminfo());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
    if (from.has_signstatus()) {
      set_signstatus(from.signstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignInTem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignInTem::CopyFrom(const SignInTem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInTem::IsInitialized() const {

  return true;
}

void SignInTem::Swap(SignInTem* other) {
  if (other != this) {
    std::swap(temid_, other->temid_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(vip_, other->vip_);
    std::swap(ratio_, other->ratio_);
    std::swap(signstatus_, other->signstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignInTem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignInTem_descriptor_;
  metadata.reflection = SignInTem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSignin::kTypeFieldNumber;
const int CGSignin::kTemIdFieldNumber;
const int CGSignin::kIndexIdFieldNumber;
#endif  // !_MSC_VER

CGSignin::CGSignin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSignin)
}

void CGSignin::InitAsDefaultInstance() {
}

CGSignin::CGSignin(const CGSignin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSignin)
}

void CGSignin::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  temid_ = 0;
  indexid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSignin::~CGSignin() {
  // @@protoc_insertion_point(destructor:CGSignin)
  SharedDtor();
}

void CGSignin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSignin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSignin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSignin_descriptor_;
}

const CGSignin& CGSignin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGSignin* CGSignin::default_instance_ = NULL;

CGSignin* CGSignin::New() const {
  return new CGSignin;
}

void CGSignin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGSignin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, indexid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSignin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSignin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_temId;
        break;
      }

      // optional int32 temId = 2;
      case 2: {
        if (tag == 16) {
         parse_temId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temid_)));
          set_has_temid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_indexId;
        break;
      }

      // optional int32 indexId = 3;
      case 3: {
        if (tag == 24) {
         parse_indexId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &indexid_)));
          set_has_indexid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSignin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSignin)
  return false;
#undef DO_
}

void CGSignin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSignin)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 temId = 2;
  if (has_temid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->temid(), output);
  }

  // optional int32 indexId = 3;
  if (has_indexid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->indexid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSignin)
}

::google::protobuf::uint8* CGSignin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSignin)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 temId = 2;
  if (has_temid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->temid(), target);
  }

  // optional int32 indexId = 3;
  if (has_indexid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->indexid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSignin)
  return target;
}

int CGSignin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 temId = 2;
    if (has_temid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->temid());
    }

    // optional int32 indexId = 3;
    if (has_indexid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->indexid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSignin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSignin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSignin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSignin::MergeFrom(const CGSignin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_temid()) {
      set_temid(from.temid());
    }
    if (from.has_indexid()) {
      set_indexid(from.indexid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSignin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSignin::CopyFrom(const CGSignin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSignin::IsInitialized() const {

  return true;
}

void CGSignin::Swap(CGSignin* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(temid_, other->temid_);
    std::swap(indexid_, other->indexid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSignin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSignin_descriptor_;
  metadata.reflection = CGSignin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSignin::kTypeFieldNumber;
const int GCSignin::kSignStatusFieldNumber;
const int GCSignin::kSignIdFieldNumber;
const int GCSignin::kSignCountFieldNumber;
const int GCSignin::kTotalSignNumFieldNumber;
const int GCSignin::kChangeRewFieldNumber;
#endif  // !_MSC_VER

GCSignin::GCSignin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSignin)
}

void GCSignin::InitAsDefaultInstance() {
  changerew_ = const_cast< ::SunSignInRew*>(&::SunSignInRew::default_instance());
}

GCSignin::GCSignin(const GCSignin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSignin)
}

void GCSignin::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  signstatus_ = 0;
  signid_ = 0;
  signcount_ = 0;
  totalsignnum_ = 0;
  changerew_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSignin::~GCSignin() {
  // @@protoc_insertion_point(destructor:GCSignin)
  SharedDtor();
}

void GCSignin::SharedDtor() {
  if (this != default_instance_) {
    delete changerew_;
  }
}

void GCSignin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSignin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSignin_descriptor_;
}

const GCSignin& GCSignin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCSignin* GCSignin::default_instance_ = NULL;

GCSignin* GCSignin::New() const {
  return new GCSignin;
}

void GCSignin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSignin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(type_, signcount_);
    totalsignnum_ = 0;
    if (has_changerew()) {
      if (changerew_ != NULL) changerew_->::SunSignInRew::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSignin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSignin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_signStatus;
        break;
      }

      // optional int32 signStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_signStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signstatus_)));
          set_has_signstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_signId;
        break;
      }

      // optional int32 signId = 3;
      case 3: {
        if (tag == 24) {
         parse_signId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signid_)));
          set_has_signid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_signCount;
        break;
      }

      // optional int32 signCount = 4;
      case 4: {
        if (tag == 32) {
         parse_signCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signcount_)));
          set_has_signcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_totalSignNum;
        break;
      }

      // optional int32 totalSignNum = 5;
      case 5: {
        if (tag == 40) {
         parse_totalSignNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalsignnum_)));
          set_has_totalsignnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_changeRew;
        break;
      }

      // optional .SunSignInRew changeRew = 6;
      case 6: {
        if (tag == 50) {
         parse_changeRew:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changerew()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSignin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSignin)
  return false;
#undef DO_
}

void GCSignin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSignin)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 signStatus = 2;
  if (has_signstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->signstatus(), output);
  }

  // optional int32 signId = 3;
  if (has_signid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signid(), output);
  }

  // optional int32 signCount = 4;
  if (has_signcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->signcount(), output);
  }

  // optional int32 totalSignNum = 5;
  if (has_totalsignnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalsignnum(), output);
  }

  // optional .SunSignInRew changeRew = 6;
  if (has_changerew()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->changerew(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSignin)
}

::google::protobuf::uint8* GCSignin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSignin)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 signStatus = 2;
  if (has_signstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->signstatus(), target);
  }

  // optional int32 signId = 3;
  if (has_signid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->signid(), target);
  }

  // optional int32 signCount = 4;
  if (has_signcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->signcount(), target);
  }

  // optional int32 totalSignNum = 5;
  if (has_totalsignnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalsignnum(), target);
  }

  // optional .SunSignInRew changeRew = 6;
  if (has_changerew()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->changerew(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSignin)
  return target;
}

int GCSignin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 signStatus = 2;
    if (has_signstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signstatus());
    }

    // optional int32 signId = 3;
    if (has_signid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signid());
    }

    // optional int32 signCount = 4;
    if (has_signcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signcount());
    }

    // optional int32 totalSignNum = 5;
    if (has_totalsignnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalsignnum());
    }

    // optional .SunSignInRew changeRew = 6;
    if (has_changerew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changerew());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSignin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSignin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSignin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSignin::MergeFrom(const GCSignin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_signstatus()) {
      set_signstatus(from.signstatus());
    }
    if (from.has_signid()) {
      set_signid(from.signid());
    }
    if (from.has_signcount()) {
      set_signcount(from.signcount());
    }
    if (from.has_totalsignnum()) {
      set_totalsignnum(from.totalsignnum());
    }
    if (from.has_changerew()) {
      mutable_changerew()->::SunSignInRew::MergeFrom(from.changerew());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSignin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSignin::CopyFrom(const GCSignin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSignin::IsInitialized() const {

  return true;
}

void GCSignin::Swap(GCSignin* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(signstatus_, other->signstatus_);
    std::swap(signid_, other->signid_);
    std::swap(signcount_, other->signcount_);
    std::swap(totalsignnum_, other->totalsignnum_);
    std::swap(changerew_, other->changerew_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSignin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSignin_descriptor_;
  metadata.reflection = GCSignin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SunSignInRew::kTemIdFieldNumber;
const int SunSignInRew::kSignNumFieldNumber;
const int SunSignInRew::kItemInfoFieldNumber;
const int SunSignInRew::kValueFieldNumber;
#endif  // !_MSC_VER

SunSignInRew::SunSignInRew()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SunSignInRew)
}

void SunSignInRew::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::ItemInfo*>(&::ItemInfo::default_instance());
}

SunSignInRew::SunSignInRew(const SunSignInRew& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SunSignInRew)
}

void SunSignInRew::SharedCtor() {
  _cached_size_ = 0;
  temid_ = 0;
  signnum_ = 0;
  iteminfo_ = NULL;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SunSignInRew::~SunSignInRew() {
  // @@protoc_insertion_point(destructor:SunSignInRew)
  SharedDtor();
}

void SunSignInRew::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void SunSignInRew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SunSignInRew::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SunSignInRew_descriptor_;
}

const SunSignInRew& SunSignInRew::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

SunSignInRew* SunSignInRew::default_instance_ = NULL;

SunSignInRew* SunSignInRew::New() const {
  return new SunSignInRew;
}

void SunSignInRew::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SunSignInRew*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(temid_, signnum_);
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::ItemInfo::Clear();
    }
    value_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SunSignInRew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SunSignInRew)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 temId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temid_)));
          set_has_temid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_signNum;
        break;
      }

      // optional int32 signNum = 2;
      case 2: {
        if (tag == 16) {
         parse_signNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signnum_)));
          set_has_signnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_itemInfo;
        break;
      }

      // optional .ItemInfo itemInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional int32 value = 4;
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SunSignInRew)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SunSignInRew)
  return false;
#undef DO_
}

void SunSignInRew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SunSignInRew)
  // optional int32 temId = 1;
  if (has_temid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->temid(), output);
  }

  // optional int32 signNum = 2;
  if (has_signnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->signnum(), output);
  }

  // optional .ItemInfo itemInfo = 3;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->iteminfo(), output);
  }

  // optional int32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SunSignInRew)
}

::google::protobuf::uint8* SunSignInRew::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SunSignInRew)
  // optional int32 temId = 1;
  if (has_temid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->temid(), target);
  }

  // optional int32 signNum = 2;
  if (has_signnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->signnum(), target);
  }

  // optional .ItemInfo itemInfo = 3;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->iteminfo(), target);
  }

  // optional int32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SunSignInRew)
  return target;
}

int SunSignInRew::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 temId = 1;
    if (has_temid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->temid());
    }

    // optional int32 signNum = 2;
    if (has_signnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signnum());
    }

    // optional .ItemInfo itemInfo = 3;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

    // optional int32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SunSignInRew::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SunSignInRew* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SunSignInRew*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SunSignInRew::MergeFrom(const SunSignInRew& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temid()) {
      set_temid(from.temid());
    }
    if (from.has_signnum()) {
      set_signnum(from.signnum());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::ItemInfo::MergeFrom(from.iteminfo());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SunSignInRew::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SunSignInRew::CopyFrom(const SunSignInRew& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SunSignInRew::IsInitialized() const {

  return true;
}

void SunSignInRew::Swap(SunSignInRew* other) {
  if (other != this) {
    std::swap(temid_, other->temid_);
    std::swap(signnum_, other->signnum_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SunSignInRew::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SunSignInRew_descriptor_;
  metadata.reflection = SunSignInRew_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGrowFund::kOpTypeFieldNumber;
const int CGGrowFund::kIdFieldNumber;
#endif  // !_MSC_VER

CGGrowFund::CGGrowFund()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGrowFund)
}

void CGGrowFund::InitAsDefaultInstance() {
}

CGGrowFund::CGGrowFund(const CGGrowFund& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGrowFund)
}

void CGGrowFund::SharedCtor() {
  _cached_size_ = 0;
  optype_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGrowFund::~CGGrowFund() {
  // @@protoc_insertion_point(destructor:CGGrowFund)
  SharedDtor();
}

void CGGrowFund::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGrowFund::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGrowFund::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGrowFund_descriptor_;
}

const CGGrowFund& CGGrowFund::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGGrowFund* CGGrowFund::default_instance_ = NULL;

CGGrowFund* CGGrowFund::New() const {
  return new CGGrowFund;
}

void CGGrowFund::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGrowFund*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(optype_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGrowFund::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGrowFund)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGrowFund)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGrowFund)
  return false;
#undef DO_
}

void CGGrowFund::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGrowFund)
  // optional int32 opType = 1;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optype(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGrowFund)
}

::google::protobuf::uint8* CGGrowFund::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGrowFund)
  // optional int32 opType = 1;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optype(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGrowFund)
  return target;
}

int CGGrowFund::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opType = 1;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGrowFund::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGrowFund* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGrowFund*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGrowFund::MergeFrom(const CGGrowFund& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGrowFund::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGrowFund::CopyFrom(const CGGrowFund& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGrowFund::IsInitialized() const {

  return true;
}

void CGGrowFund::Swap(CGGrowFund* other) {
  if (other != this) {
    std::swap(optype_, other->optype_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGrowFund::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGrowFund_descriptor_;
  metadata.reflection = CGGrowFund_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGrowFund::kOpTypeFieldNumber;
const int GCGrowFund::kFlagFieldNumber;
const int GCGrowFund::kBuyStatusFieldNumber;
const int GCGrowFund::kBuyNumFieldNumber;
const int GCGrowFund::kGrowFundListFieldNumber;
const int GCGrowFund::kGeneralWelfareListFieldNumber;
#endif  // !_MSC_VER

GCGrowFund::GCGrowFund()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGrowFund)
}

void GCGrowFund::InitAsDefaultInstance() {
}

GCGrowFund::GCGrowFund(const GCGrowFund& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGrowFund)
}

void GCGrowFund::SharedCtor() {
  _cached_size_ = 0;
  optype_ = 0;
  flag_ = 0;
  buystatus_ = 0;
  buynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGrowFund::~GCGrowFund() {
  // @@protoc_insertion_point(destructor:GCGrowFund)
  SharedDtor();
}

void GCGrowFund::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGrowFund::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGrowFund::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGrowFund_descriptor_;
}

const GCGrowFund& GCGrowFund::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCGrowFund* GCGrowFund::default_instance_ = NULL;

GCGrowFund* GCGrowFund::New() const {
  return new GCGrowFund;
}

void GCGrowFund::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGrowFund*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(optype_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  growfundlist_.Clear();
  generalwelfarelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGrowFund::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGrowFund)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buyStatus;
        break;
      }

      // optional int32 buyStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_buyStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buystatus_)));
          set_has_buystatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buyNum;
        break;
      }

      // optional int32 buyNum = 4;
      case 4: {
        if (tag == 32) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_growFundList;
        break;
      }

      // repeated int32 growFundList = 5;
      case 5: {
        if (tag == 40) {
         parse_growFundList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_growfundlist())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_growfundlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_growFundList;
        if (input->ExpectTag(48)) goto parse_generalWelfareList;
        break;
      }

      // repeated int32 generalWelfareList = 6;
      case 6: {
        if (tag == 48) {
         parse_generalWelfareList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_generalwelfarelist())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_generalwelfarelist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_generalWelfareList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGrowFund)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGrowFund)
  return false;
#undef DO_
}

void GCGrowFund::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGrowFund)
  // optional int32 opType = 1;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optype(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  // optional int32 buyStatus = 3;
  if (has_buystatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buystatus(), output);
  }

  // optional int32 buyNum = 4;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buynum(), output);
  }

  // repeated int32 growFundList = 5;
  for (int i = 0; i < this->growfundlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->growfundlist(i), output);
  }

  // repeated int32 generalWelfareList = 6;
  for (int i = 0; i < this->generalwelfarelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->generalwelfarelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGrowFund)
}

::google::protobuf::uint8* GCGrowFund::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGrowFund)
  // optional int32 opType = 1;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optype(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  // optional int32 buyStatus = 3;
  if (has_buystatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buystatus(), target);
  }

  // optional int32 buyNum = 4;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buynum(), target);
  }

  // repeated int32 growFundList = 5;
  for (int i = 0; i < this->growfundlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->growfundlist(i), target);
  }

  // repeated int32 generalWelfareList = 6;
  for (int i = 0; i < this->generalwelfarelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->generalwelfarelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGrowFund)
  return target;
}

int GCGrowFund::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opType = 1;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 buyStatus = 3;
    if (has_buystatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buystatus());
    }

    // optional int32 buyNum = 4;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buynum());
    }

  }
  // repeated int32 growFundList = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->growfundlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->growfundlist(i));
    }
    total_size += 1 * this->growfundlist_size() + data_size;
  }

  // repeated int32 generalWelfareList = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->generalwelfarelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->generalwelfarelist(i));
    }
    total_size += 1 * this->generalwelfarelist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGrowFund::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGrowFund* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGrowFund*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGrowFund::MergeFrom(const GCGrowFund& from) {
  GOOGLE_CHECK_NE(&from, this);
  growfundlist_.MergeFrom(from.growfundlist_);
  generalwelfarelist_.MergeFrom(from.generalwelfarelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_buystatus()) {
      set_buystatus(from.buystatus());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGrowFund::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGrowFund::CopyFrom(const GCGrowFund& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGrowFund::IsInitialized() const {

  return true;
}

void GCGrowFund::Swap(GCGrowFund* other) {
  if (other != this) {
    std::swap(optype_, other->optype_);
    std::swap(flag_, other->flag_);
    std::swap(buystatus_, other->buystatus_);
    std::swap(buynum_, other->buynum_);
    growfundlist_.Swap(&other->growfundlist_);
    generalwelfarelist_.Swap(&other->generalwelfarelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGrowFund::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGrowFund_descriptor_;
  metadata.reflection = GCGrowFund_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGrowFundBuyNum::kBuyNumFieldNumber;
#endif  // !_MSC_VER

GCGrowFundBuyNum::GCGrowFundBuyNum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGrowFundBuyNum)
}

void GCGrowFundBuyNum::InitAsDefaultInstance() {
}

GCGrowFundBuyNum::GCGrowFundBuyNum(const GCGrowFundBuyNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGrowFundBuyNum)
}

void GCGrowFundBuyNum::SharedCtor() {
  _cached_size_ = 0;
  buynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGrowFundBuyNum::~GCGrowFundBuyNum() {
  // @@protoc_insertion_point(destructor:GCGrowFundBuyNum)
  SharedDtor();
}

void GCGrowFundBuyNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGrowFundBuyNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGrowFundBuyNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGrowFundBuyNum_descriptor_;
}

const GCGrowFundBuyNum& GCGrowFundBuyNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCGrowFundBuyNum* GCGrowFundBuyNum::default_instance_ = NULL;

GCGrowFundBuyNum* GCGrowFundBuyNum::New() const {
  return new GCGrowFundBuyNum;
}

void GCGrowFundBuyNum::Clear() {
  buynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGrowFundBuyNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGrowFundBuyNum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buyNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGrowFundBuyNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGrowFundBuyNum)
  return false;
#undef DO_
}

void GCGrowFundBuyNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGrowFundBuyNum)
  // optional int32 buyNum = 1;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGrowFundBuyNum)
}

::google::protobuf::uint8* GCGrowFundBuyNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGrowFundBuyNum)
  // optional int32 buyNum = 1;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGrowFundBuyNum)
  return target;
}

int GCGrowFundBuyNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buyNum = 1;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGrowFundBuyNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGrowFundBuyNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGrowFundBuyNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGrowFundBuyNum::MergeFrom(const GCGrowFundBuyNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGrowFundBuyNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGrowFundBuyNum::CopyFrom(const GCGrowFundBuyNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGrowFundBuyNum::IsInitialized() const {

  return true;
}

void GCGrowFundBuyNum::Swap(GCGrowFundBuyNum* other) {
  if (other != this) {
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGrowFundBuyNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGrowFundBuyNum_descriptor_;
  metadata.reflection = GCGrowFundBuyNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGDoublePay::CGDoublePay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGDoublePay)
}

void CGDoublePay::InitAsDefaultInstance() {
}

CGDoublePay::CGDoublePay(const CGDoublePay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGDoublePay)
}

void CGDoublePay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGDoublePay::~CGDoublePay() {
  // @@protoc_insertion_point(destructor:CGDoublePay)
  SharedDtor();
}

void CGDoublePay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGDoublePay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGDoublePay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGDoublePay_descriptor_;
}

const CGDoublePay& CGDoublePay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGDoublePay* CGDoublePay::default_instance_ = NULL;

CGDoublePay* CGDoublePay::New() const {
  return new CGDoublePay;
}

void CGDoublePay::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGDoublePay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGDoublePay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGDoublePay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGDoublePay)
  return false;
#undef DO_
}

void CGDoublePay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGDoublePay)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGDoublePay)
}

::google::protobuf::uint8* CGDoublePay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGDoublePay)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGDoublePay)
  return target;
}

int CGDoublePay::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGDoublePay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGDoublePay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGDoublePay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGDoublePay::MergeFrom(const CGDoublePay& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGDoublePay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGDoublePay::CopyFrom(const CGDoublePay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGDoublePay::IsInitialized() const {

  return true;
}

void CGDoublePay::Swap(CGDoublePay* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGDoublePay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGDoublePay_descriptor_;
  metadata.reflection = CGDoublePay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDoublePay::kPayIdListFieldNumber;
#endif  // !_MSC_VER

GCDoublePay::GCDoublePay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDoublePay)
}

void GCDoublePay::InitAsDefaultInstance() {
}

GCDoublePay::GCDoublePay(const GCDoublePay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDoublePay)
}

void GCDoublePay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDoublePay::~GCDoublePay() {
  // @@protoc_insertion_point(destructor:GCDoublePay)
  SharedDtor();
}

void GCDoublePay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDoublePay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDoublePay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDoublePay_descriptor_;
}

const GCDoublePay& GCDoublePay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCDoublePay* GCDoublePay::default_instance_ = NULL;

GCDoublePay* GCDoublePay::New() const {
  return new GCDoublePay;
}

void GCDoublePay::Clear() {
  payidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDoublePay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDoublePay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 payIdList = 1;
      case 1: {
        if (tag == 8) {
         parse_payIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_payidlist())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_payidlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_payIdList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDoublePay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDoublePay)
  return false;
#undef DO_
}

void GCDoublePay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDoublePay)
  // repeated int32 payIdList = 1;
  for (int i = 0; i < this->payidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->payidlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDoublePay)
}

::google::protobuf::uint8* GCDoublePay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDoublePay)
  // repeated int32 payIdList = 1;
  for (int i = 0; i < this->payidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->payidlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDoublePay)
  return target;
}

int GCDoublePay::ByteSize() const {
  int total_size = 0;

  // repeated int32 payIdList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->payidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->payidlist(i));
    }
    total_size += 1 * this->payidlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDoublePay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDoublePay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDoublePay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDoublePay::MergeFrom(const GCDoublePay& from) {
  GOOGLE_CHECK_NE(&from, this);
  payidlist_.MergeFrom(from.payidlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDoublePay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDoublePay::CopyFrom(const GCDoublePay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDoublePay::IsInitialized() const {

  return true;
}

void GCDoublePay::Swap(GCDoublePay* other) {
  if (other != this) {
    payidlist_.Swap(&other->payidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDoublePay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDoublePay_descriptor_;
  metadata.reflection = GCDoublePay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDailyGiftInfo::kDailyGiftListFieldNumber;
#endif  // !_MSC_VER

GCDailyGiftInfo::GCDailyGiftInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDailyGiftInfo)
}

void GCDailyGiftInfo::InitAsDefaultInstance() {
}

GCDailyGiftInfo::GCDailyGiftInfo(const GCDailyGiftInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDailyGiftInfo)
}

void GCDailyGiftInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDailyGiftInfo::~GCDailyGiftInfo() {
  // @@protoc_insertion_point(destructor:GCDailyGiftInfo)
  SharedDtor();
}

void GCDailyGiftInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDailyGiftInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDailyGiftInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDailyGiftInfo_descriptor_;
}

const GCDailyGiftInfo& GCDailyGiftInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCDailyGiftInfo* GCDailyGiftInfo::default_instance_ = NULL;

GCDailyGiftInfo* GCDailyGiftInfo::New() const {
  return new GCDailyGiftInfo;
}

void GCDailyGiftInfo::Clear() {
  dailygiftlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDailyGiftInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDailyGiftInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 dailyGiftList = 1;
      case 1: {
        if (tag == 8) {
         parse_dailyGiftList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_dailygiftlist())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dailygiftlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_dailyGiftList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDailyGiftInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDailyGiftInfo)
  return false;
#undef DO_
}

void GCDailyGiftInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDailyGiftInfo)
  // repeated int32 dailyGiftList = 1;
  for (int i = 0; i < this->dailygiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->dailygiftlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDailyGiftInfo)
}

::google::protobuf::uint8* GCDailyGiftInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDailyGiftInfo)
  // repeated int32 dailyGiftList = 1;
  for (int i = 0; i < this->dailygiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->dailygiftlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDailyGiftInfo)
  return target;
}

int GCDailyGiftInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 dailyGiftList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dailygiftlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dailygiftlist(i));
    }
    total_size += 1 * this->dailygiftlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDailyGiftInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDailyGiftInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDailyGiftInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDailyGiftInfo::MergeFrom(const GCDailyGiftInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailygiftlist_.MergeFrom(from.dailygiftlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDailyGiftInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDailyGiftInfo::CopyFrom(const GCDailyGiftInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDailyGiftInfo::IsInitialized() const {

  return true;
}

void GCDailyGiftInfo::Swap(GCDailyGiftInfo* other) {
  if (other != this) {
    dailygiftlist_.Swap(&other->dailygiftlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDailyGiftInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDailyGiftInfo_descriptor_;
  metadata.reflection = GCDailyGiftInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WinnersInfo::kPlayerNameFieldNumber;
const int WinnersInfo::kPriceFieldNumber;
const int WinnersInfo::kNameFieldNumber;
#endif  // !_MSC_VER

WinnersInfo::WinnersInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WinnersInfo)
}

void WinnersInfo::InitAsDefaultInstance() {
}

WinnersInfo::WinnersInfo(const WinnersInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WinnersInfo)
}

void WinnersInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WinnersInfo::~WinnersInfo() {
  // @@protoc_insertion_point(destructor:WinnersInfo)
  SharedDtor();
}

void WinnersInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void WinnersInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WinnersInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WinnersInfo_descriptor_;
}

const WinnersInfo& WinnersInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

WinnersInfo* WinnersInfo::default_instance_ = NULL;

WinnersInfo* WinnersInfo::New() const {
  return new WinnersInfo;
}

void WinnersInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
    price_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WinnersInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WinnersInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // optional int32 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WinnersInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WinnersInfo)
  return false;
#undef DO_
}

void WinnersInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WinnersInfo)
  // optional string playerName = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playername(), output);
  }

  // optional int32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WinnersInfo)
}

::google::protobuf::uint8* WinnersInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WinnersInfo)
  // optional string playerName = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playername(), target);
  }

  // optional int32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WinnersInfo)
  return target;
}

int WinnersInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerName = 1;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WinnersInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WinnersInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WinnersInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WinnersInfo::MergeFrom(const WinnersInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WinnersInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WinnersInfo::CopyFrom(const WinnersInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinnersInfo::IsInitialized() const {

  return true;
}

void WinnersInfo::Swap(WinnersInfo* other) {
  if (other != this) {
    std::swap(playername_, other->playername_);
    std::swap(price_, other->price_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WinnersInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WinnersInfo_descriptor_;
  metadata.reflection = WinnersInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUpdateRewardList::kTypeFieldNumber;
const int GCUpdateRewardList::kWinnersInfoListFieldNumber;
#endif  // !_MSC_VER

GCUpdateRewardList::GCUpdateRewardList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCUpdateRewardList)
}

void GCUpdateRewardList::InitAsDefaultInstance() {
}

GCUpdateRewardList::GCUpdateRewardList(const GCUpdateRewardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCUpdateRewardList)
}

void GCUpdateRewardList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUpdateRewardList::~GCUpdateRewardList() {
  // @@protoc_insertion_point(destructor:GCUpdateRewardList)
  SharedDtor();
}

void GCUpdateRewardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCUpdateRewardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUpdateRewardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUpdateRewardList_descriptor_;
}

const GCUpdateRewardList& GCUpdateRewardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCUpdateRewardList* GCUpdateRewardList::default_instance_ = NULL;

GCUpdateRewardList* GCUpdateRewardList::New() const {
  return new GCUpdateRewardList;
}

void GCUpdateRewardList::Clear() {
  type_ = 0;
  winnersinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUpdateRewardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCUpdateRewardList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_winnersInfoList;
        break;
      }

      // repeated .WinnersInfo winnersInfoList = 2;
      case 2: {
        if (tag == 18) {
         parse_winnersInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_winnersinfolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_winnersInfoList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCUpdateRewardList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCUpdateRewardList)
  return false;
#undef DO_
}

void GCUpdateRewardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCUpdateRewardList)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .WinnersInfo winnersInfoList = 2;
  for (int i = 0; i < this->winnersinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->winnersinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCUpdateRewardList)
}

::google::protobuf::uint8* GCUpdateRewardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCUpdateRewardList)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .WinnersInfo winnersInfoList = 2;
  for (int i = 0; i < this->winnersinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->winnersinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCUpdateRewardList)
  return target;
}

int GCUpdateRewardList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .WinnersInfo winnersInfoList = 2;
  total_size += 1 * this->winnersinfolist_size();
  for (int i = 0; i < this->winnersinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->winnersinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUpdateRewardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUpdateRewardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUpdateRewardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUpdateRewardList::MergeFrom(const GCUpdateRewardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  winnersinfolist_.MergeFrom(from.winnersinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUpdateRewardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUpdateRewardList::CopyFrom(const GCUpdateRewardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUpdateRewardList::IsInitialized() const {

  return true;
}

void GCUpdateRewardList::Swap(GCUpdateRewardList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    winnersinfolist_.Swap(&other->winnersinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUpdateRewardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUpdateRewardList_descriptor_;
  metadata.reflection = GCUpdateRewardList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int oneBuyInfo::kIdFieldNumber;
const int oneBuyInfo::kTypeFieldNumber;
const int oneBuyInfo::kCurTotalBuyNumFieldNumber;
const int oneBuyInfo::kCurMyBuyNumFieldNumber;
const int oneBuyInfo::kOverTimeFieldNumber;
const int oneBuyInfo::kGroupFieldNumber;
const int oneBuyInfo::kPriceFieldNumber;
const int oneBuyInfo::kNameFieldNumber;
const int oneBuyInfo::kItemFieldNumber;
const int oneBuyInfo::kNextIDFieldNumber;
const int oneBuyInfo::kChargeFieldNumber;
#endif  // !_MSC_VER

oneBuyInfo::oneBuyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:oneBuyInfo)
}

void oneBuyInfo::InitAsDefaultInstance() {
}

oneBuyInfo::oneBuyInfo(const oneBuyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:oneBuyInfo)
}

void oneBuyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  curtotalbuynum_ = 0;
  curmybuynum_ = 0;
  overtime_ = GOOGLE_LONGLONG(0);
  group_ = 0;
  price_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nextid_ = 0;
  charge_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

oneBuyInfo::~oneBuyInfo() {
  // @@protoc_insertion_point(destructor:oneBuyInfo)
  SharedDtor();
}

void oneBuyInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_;
  }
  if (charge_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charge_;
  }
  if (this != default_instance_) {
  }
}

void oneBuyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* oneBuyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return oneBuyInfo_descriptor_;
}

const oneBuyInfo& oneBuyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

oneBuyInfo* oneBuyInfo::default_instance_ = NULL;

oneBuyInfo* oneBuyInfo::New() const {
  return new oneBuyInfo;
}

void oneBuyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<oneBuyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, price_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_item()) {
      if (item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        item_->clear();
      }
    }
    nextid_ = 0;
    if (has_charge()) {
      if (charge_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charge_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool oneBuyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oneBuyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curTotalBuyNum;
        break;
      }

      // optional int32 curTotalBuyNum = 3;
      case 3: {
        if (tag == 24) {
         parse_curTotalBuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtotalbuynum_)));
          set_has_curtotalbuynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curMyBuyNum;
        break;
      }

      // optional int32 curMyBuyNum = 4;
      case 4: {
        if (tag == 32) {
         parse_curMyBuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curmybuynum_)));
          set_has_curmybuynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_overTime;
        break;
      }

      // optional int64 overTime = 5;
      case 5: {
        if (tag == 40) {
         parse_overTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &overtime_)));
          set_has_overtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_group;
        break;
      }

      // optional int32 group = 6;
      case 6: {
        if (tag == 48) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_price;
        break;
      }

      // optional int32 price = 7;
      case 7: {
        if (tag == 56) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }

      // optional string name = 8;
      case 8: {
        if (tag == 66) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_item;
        break;
      }

      // optional string item = 9;
      case 9: {
        if (tag == 74) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item().data(), this->item().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "item");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_nextID;
        break;
      }

      // optional int32 nextID = 10;
      case 10: {
        if (tag == 80) {
         parse_nextID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextid_)));
          set_has_nextid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_charge;
        break;
      }

      // optional string charge = 11;
      case 11: {
        if (tag == 90) {
         parse_charge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charge()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charge().data(), this->charge().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charge");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oneBuyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oneBuyInfo)
  return false;
#undef DO_
}

void oneBuyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oneBuyInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 curTotalBuyNum = 3;
  if (has_curtotalbuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curtotalbuynum(), output);
  }

  // optional int32 curMyBuyNum = 4;
  if (has_curmybuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curmybuynum(), output);
  }

  // optional int64 overTime = 5;
  if (has_overtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->overtime(), output);
  }

  // optional int32 group = 6;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->group(), output);
  }

  // optional int32 price = 7;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->price(), output);
  }

  // optional string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  // optional string item = 9;
  if (has_item()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->item(), output);
  }

  // optional int32 nextID = 10;
  if (has_nextid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->nextid(), output);
  }

  // optional string charge = 11;
  if (has_charge()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charge().data(), this->charge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charge");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->charge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oneBuyInfo)
}

::google::protobuf::uint8* oneBuyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oneBuyInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 curTotalBuyNum = 3;
  if (has_curtotalbuynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curtotalbuynum(), target);
  }

  // optional int32 curMyBuyNum = 4;
  if (has_curmybuynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curmybuynum(), target);
  }

  // optional int64 overTime = 5;
  if (has_overtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->overtime(), target);
  }

  // optional int32 group = 6;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->group(), target);
  }

  // optional int32 price = 7;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->price(), target);
  }

  // optional string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  // optional string item = 9;
  if (has_item()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->item(), target);
  }

  // optional int32 nextID = 10;
  if (has_nextid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->nextid(), target);
  }

  // optional string charge = 11;
  if (has_charge()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charge().data(), this->charge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charge");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->charge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oneBuyInfo)
  return target;
}

int oneBuyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 curTotalBuyNum = 3;
    if (has_curtotalbuynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curtotalbuynum());
    }

    // optional int32 curMyBuyNum = 4;
    if (has_curmybuynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curmybuynum());
    }

    // optional int64 overTime = 5;
    if (has_overtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->overtime());
    }

    // optional int32 group = 6;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 price = 7;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string item = 9;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item());
    }

    // optional int32 nextID = 10;
    if (has_nextid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextid());
    }

    // optional string charge = 11;
    if (has_charge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void oneBuyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const oneBuyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const oneBuyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void oneBuyInfo::MergeFrom(const oneBuyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_curtotalbuynum()) {
      set_curtotalbuynum(from.curtotalbuynum());
    }
    if (from.has_curmybuynum()) {
      set_curmybuynum(from.curmybuynum());
    }
    if (from.has_overtime()) {
      set_overtime(from.overtime());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_nextid()) {
      set_nextid(from.nextid());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void oneBuyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void oneBuyInfo::CopyFrom(const oneBuyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool oneBuyInfo::IsInitialized() const {

  return true;
}

void oneBuyInfo::Swap(oneBuyInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(curtotalbuynum_, other->curtotalbuynum_);
    std::swap(curmybuynum_, other->curmybuynum_);
    std::swap(overtime_, other->overtime_);
    std::swap(group_, other->group_);
    std::swap(price_, other->price_);
    std::swap(name_, other->name_);
    std::swap(item_, other->item_);
    std::swap(nextid_, other->nextid_);
    std::swap(charge_, other->charge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata oneBuyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = oneBuyInfo_descriptor_;
  metadata.reflection = oneBuyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUpdateOneBuyList::kTypeFieldNumber;
const int GCUpdateOneBuyList::kBuyInfoListFieldNumber;
#endif  // !_MSC_VER

GCUpdateOneBuyList::GCUpdateOneBuyList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCUpdateOneBuyList)
}

void GCUpdateOneBuyList::InitAsDefaultInstance() {
}

GCUpdateOneBuyList::GCUpdateOneBuyList(const GCUpdateOneBuyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCUpdateOneBuyList)
}

void GCUpdateOneBuyList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUpdateOneBuyList::~GCUpdateOneBuyList() {
  // @@protoc_insertion_point(destructor:GCUpdateOneBuyList)
  SharedDtor();
}

void GCUpdateOneBuyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCUpdateOneBuyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUpdateOneBuyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUpdateOneBuyList_descriptor_;
}

const GCUpdateOneBuyList& GCUpdateOneBuyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCUpdateOneBuyList* GCUpdateOneBuyList::default_instance_ = NULL;

GCUpdateOneBuyList* GCUpdateOneBuyList::New() const {
  return new GCUpdateOneBuyList;
}

void GCUpdateOneBuyList::Clear() {
  type_ = 0;
  buyinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUpdateOneBuyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCUpdateOneBuyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buyInfoList;
        break;
      }

      // repeated .oneBuyInfo buyInfoList = 2;
      case 2: {
        if (tag == 18) {
         parse_buyInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buyinfolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buyInfoList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCUpdateOneBuyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCUpdateOneBuyList)
  return false;
#undef DO_
}

void GCUpdateOneBuyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCUpdateOneBuyList)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .oneBuyInfo buyInfoList = 2;
  for (int i = 0; i < this->buyinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buyinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCUpdateOneBuyList)
}

::google::protobuf::uint8* GCUpdateOneBuyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCUpdateOneBuyList)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .oneBuyInfo buyInfoList = 2;
  for (int i = 0; i < this->buyinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buyinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCUpdateOneBuyList)
  return target;
}

int GCUpdateOneBuyList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .oneBuyInfo buyInfoList = 2;
  total_size += 1 * this->buyinfolist_size();
  for (int i = 0; i < this->buyinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buyinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUpdateOneBuyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUpdateOneBuyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUpdateOneBuyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUpdateOneBuyList::MergeFrom(const GCUpdateOneBuyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  buyinfolist_.MergeFrom(from.buyinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUpdateOneBuyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUpdateOneBuyList::CopyFrom(const GCUpdateOneBuyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUpdateOneBuyList::IsInitialized() const {

  return true;
}

void GCUpdateOneBuyList::Swap(GCUpdateOneBuyList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    buyinfolist_.Swap(&other->buyinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUpdateOneBuyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUpdateOneBuyList_descriptor_;
  metadata.reflection = GCUpdateOneBuyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCanBuy::kIdFieldNumber;
#endif  // !_MSC_VER

CGCanBuy::CGCanBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCanBuy)
}

void CGCanBuy::InitAsDefaultInstance() {
}

CGCanBuy::CGCanBuy(const CGCanBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCanBuy)
}

void CGCanBuy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCanBuy::~CGCanBuy() {
  // @@protoc_insertion_point(destructor:CGCanBuy)
  SharedDtor();
}

void CGCanBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCanBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCanBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCanBuy_descriptor_;
}

const CGCanBuy& CGCanBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGCanBuy* CGCanBuy::default_instance_ = NULL;

CGCanBuy* CGCanBuy::New() const {
  return new CGCanBuy;
}

void CGCanBuy::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCanBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCanBuy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCanBuy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCanBuy)
  return false;
#undef DO_
}

void CGCanBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCanBuy)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCanBuy)
}

::google::protobuf::uint8* CGCanBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCanBuy)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCanBuy)
  return target;
}

int CGCanBuy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCanBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCanBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCanBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCanBuy::MergeFrom(const CGCanBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCanBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCanBuy::CopyFrom(const CGCanBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCanBuy::IsInitialized() const {

  return true;
}

void CGCanBuy::Swap(CGCanBuy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCanBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCanBuy_descriptor_;
  metadata.reflection = CGCanBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCanBuyBack::kTypeFieldNumber;
#endif  // !_MSC_VER

GCCanBuyBack::GCCanBuyBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCanBuyBack)
}

void GCCanBuyBack::InitAsDefaultInstance() {
}

GCCanBuyBack::GCCanBuyBack(const GCCanBuyBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCanBuyBack)
}

void GCCanBuyBack::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCanBuyBack::~GCCanBuyBack() {
  // @@protoc_insertion_point(destructor:GCCanBuyBack)
  SharedDtor();
}

void GCCanBuyBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCCanBuyBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCanBuyBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCanBuyBack_descriptor_;
}

const GCCanBuyBack& GCCanBuyBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCCanBuyBack* GCCanBuyBack::default_instance_ = NULL;

GCCanBuyBack* GCCanBuyBack::New() const {
  return new GCCanBuyBack;
}

void GCCanBuyBack::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCanBuyBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCanBuyBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCanBuyBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCanBuyBack)
  return false;
#undef DO_
}

void GCCanBuyBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCanBuyBack)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCanBuyBack)
}

::google::protobuf::uint8* GCCanBuyBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCanBuyBack)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCanBuyBack)
  return target;
}

int GCCanBuyBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCanBuyBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCanBuyBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCanBuyBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCanBuyBack::MergeFrom(const GCCanBuyBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCanBuyBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCanBuyBack::CopyFrom(const GCCanBuyBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCanBuyBack::IsInitialized() const {

  return true;
}

void GCCanBuyBack::Swap(GCCanBuyBack* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCanBuyBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCanBuyBack_descriptor_;
  metadata.reflection = GCCanBuyBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCHoliday::kIdFieldNumber;
const int GCHoliday::kResultFieldNumber;
const int GCHoliday::kParaMapFieldNumber;
const int GCHoliday::kItemLstFieldNumber;
#endif  // !_MSC_VER

GCHoliday::GCHoliday()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCHoliday)
}

void GCHoliday::InitAsDefaultInstance() {
}

GCHoliday::GCHoliday(const GCHoliday& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCHoliday)
}

void GCHoliday::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCHoliday::~GCHoliday() {
  // @@protoc_insertion_point(destructor:GCHoliday)
  SharedDtor();
}

void GCHoliday::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCHoliday::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCHoliday::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCHoliday_descriptor_;
}

const GCHoliday& GCHoliday::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCHoliday* GCHoliday::default_instance_ = NULL;

GCHoliday* GCHoliday::New() const {
  return new GCHoliday;
}

void GCHoliday::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCHoliday*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  paramap_.Clear();
  itemlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCHoliday::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCHoliday)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_paraMap;
        break;
      }

      // repeated .EntryIntInt paraMap = 3;
      case 3: {
        if (tag == 26) {
         parse_paraMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paramap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_paraMap;
        if (input->ExpectTag(34)) goto parse_itemLst;
        break;
      }

      // repeated .ItemInfo itemLst = 4;
      case 4: {
        if (tag == 34) {
         parse_itemLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_itemLst;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCHoliday)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCHoliday)
  return false;
#undef DO_
}

void GCHoliday::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCHoliday)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .EntryIntInt paraMap = 3;
  for (int i = 0; i < this->paramap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->paramap(i), output);
  }

  // repeated .ItemInfo itemLst = 4;
  for (int i = 0; i < this->itemlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->itemlst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCHoliday)
}

::google::protobuf::uint8* GCHoliday::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCHoliday)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .EntryIntInt paraMap = 3;
  for (int i = 0; i < this->paramap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->paramap(i), target);
  }

  // repeated .ItemInfo itemLst = 4;
  for (int i = 0; i < this->itemlst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->itemlst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCHoliday)
  return target;
}

int GCHoliday::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .EntryIntInt paraMap = 3;
  total_size += 1 * this->paramap_size();
  for (int i = 0; i < this->paramap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paramap(i));
  }

  // repeated .ItemInfo itemLst = 4;
  total_size += 1 * this->itemlst_size();
  for (int i = 0; i < this->itemlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCHoliday::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCHoliday* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCHoliday*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCHoliday::MergeFrom(const GCHoliday& from) {
  GOOGLE_CHECK_NE(&from, this);
  paramap_.MergeFrom(from.paramap_);
  itemlst_.MergeFrom(from.itemlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCHoliday::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCHoliday::CopyFrom(const GCHoliday& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHoliday::IsInitialized() const {

  return true;
}

void GCHoliday::Swap(GCHoliday* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    paramap_.Swap(&other->paramap_);
    itemlst_.Swap(&other->itemlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCHoliday::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCHoliday_descriptor_;
  metadata.reflection = GCHoliday_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGHoliday::kIdFieldNumber;
const int CGHoliday::kTypeFieldNumber;
const int CGHoliday::kKeyFieldNumber;
#endif  // !_MSC_VER

CGHoliday::CGHoliday()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGHoliday)
}

void CGHoliday::InitAsDefaultInstance() {
}

CGHoliday::CGHoliday(const CGHoliday& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGHoliday)
}

void CGHoliday::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGHoliday::~CGHoliday() {
  // @@protoc_insertion_point(destructor:CGHoliday)
  SharedDtor();
}

void CGHoliday::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGHoliday::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGHoliday::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGHoliday_descriptor_;
}

const CGHoliday& CGHoliday::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGHoliday* CGHoliday::default_instance_ = NULL;

CGHoliday* CGHoliday::New() const {
  return new CGHoliday;
}

void CGHoliday::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGHoliday*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, key_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGHoliday::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGHoliday)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_key;
        break;
      }

      // optional int32 key = 3;
      case 3: {
        if (tag == 24) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGHoliday)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGHoliday)
  return false;
#undef DO_
}

void CGHoliday::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGHoliday)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGHoliday)
}

::google::protobuf::uint8* CGHoliday::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGHoliday)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGHoliday)
  return target;
}

int CGHoliday::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGHoliday::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGHoliday* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGHoliday*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGHoliday::MergeFrom(const CGHoliday& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGHoliday::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGHoliday::CopyFrom(const CGHoliday& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGHoliday::IsInitialized() const {

  return true;
}

void CGHoliday::Swap(CGHoliday* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGHoliday::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGHoliday_descriptor_;
  metadata.reflection = CGHoliday_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCFeelGold::kIdFieldNumber;
const int GCFeelGold::kTypeFieldNumber;
const int GCFeelGold::kResultFieldNumber;
const int GCFeelGold::kLastCountFieldNumber;
const int GCFeelGold::kItem1FieldNumber;
const int GCFeelGold::kItem2FieldNumber;
const int GCFeelGold::kItem3FieldNumber;
const int GCFeelGold::kStartDateFieldNumber;
const int GCFeelGold::kEndDateFieldNumber;
const int GCFeelGold::kNextNeedGoldFieldNumber;
const int GCFeelGold::kBuyTypeFieldNumber;
const int GCFeelGold::kSingleMoneyFieldNumber;
const int GCFeelGold::kItemShowFieldNumber;
const int GCFeelGold::kBuyOneMoneyFieldNumber;
const int GCFeelGold::kBuyTenMoneyFieldNumber;
#endif  // !_MSC_VER

GCFeelGold::GCFeelGold()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCFeelGold)
}

void GCFeelGold::InitAsDefaultInstance() {
}

GCFeelGold::GCFeelGold(const GCFeelGold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCFeelGold)
}

void GCFeelGold::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  result_ = 0;
  lastcount_ = 0;
  startdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nextneedgold_ = 0;
  buytype_ = 0;
  singlemoney_ = 0;
  itemshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyonemoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buytenmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCFeelGold::~GCFeelGold() {
  // @@protoc_insertion_point(destructor:GCFeelGold)
  SharedDtor();
}

void GCFeelGold::SharedDtor() {
  if (startdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete startdate_;
  }
  if (enddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enddate_;
  }
  if (itemshow_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemshow_;
  }
  if (buyonemoney_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyonemoney_;
  }
  if (buytenmoney_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buytenmoney_;
  }
  if (this != default_instance_) {
  }
}

void GCFeelGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCFeelGold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCFeelGold_descriptor_;
}

const GCFeelGold& GCFeelGold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCFeelGold* GCFeelGold::default_instance_ = NULL;

GCFeelGold* GCFeelGold::New() const {
  return new GCFeelGold;
}

void GCFeelGold::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCFeelGold*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 143) {
    ZR_(id_, lastcount_);
    if (has_startdate()) {
      if (startdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        startdate_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(nextneedgold_, buytype_);
    if (has_enddate()) {
      if (enddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        enddate_->clear();
      }
    }
    singlemoney_ = 0;
    if (has_itemshow()) {
      if (itemshow_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemshow_->clear();
      }
    }
    if (has_buyonemoney()) {
      if (buyonemoney_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buyonemoney_->clear();
      }
    }
    if (has_buytenmoney()) {
      if (buytenmoney_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buytenmoney_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  item1_.Clear();
  item2_.Clear();
  item3_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCFeelGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCFeelGold)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lastCount;
        break;
      }

      // optional int32 lastCount = 4;
      case 4: {
        if (tag == 32) {
         parse_lastCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastcount_)));
          set_has_lastcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_item1;
        break;
      }

      // repeated .ItemInfo item1 = 5;
      case 5: {
        if (tag == 42) {
         parse_item1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_item1;
        if (input->ExpectTag(50)) goto parse_item2;
        break;
      }

      // repeated .ItemInfo item2 = 6;
      case 6: {
        if (tag == 50) {
         parse_item2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_item2;
        if (input->ExpectTag(58)) goto parse_item3;
        break;
      }

      // repeated .ItemInfo item3 = 7;
      case 7: {
        if (tag == 58) {
         parse_item3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_item3;
        if (input->ExpectTag(66)) goto parse_startDate;
        break;
      }

      // optional string startDate = 8;
      case 8: {
        if (tag == 66) {
         parse_startDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->startdate().data(), this->startdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "startdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_endDate;
        break;
      }

      // optional string endDate = 9;
      case 9: {
        if (tag == 74) {
         parse_endDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enddate().data(), this->enddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "enddate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_nextNeedGold;
        break;
      }

      // optional int32 nextNeedGold = 10;
      case 10: {
        if (tag == 80) {
         parse_nextNeedGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextneedgold_)));
          set_has_nextneedgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_buyType;
        break;
      }

      // optional int32 buyType = 11;
      case 11: {
        if (tag == 88) {
         parse_buyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buytype_)));
          set_has_buytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_singleMoney;
        break;
      }

      // optional int32 singleMoney = 12;
      case 12: {
        if (tag == 96) {
         parse_singleMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &singlemoney_)));
          set_has_singlemoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_itemShow;
        break;
      }

      // optional string itemShow = 13;
      case 13: {
        if (tag == 106) {
         parse_itemShow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemshow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemshow().data(), this->itemshow().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemshow");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_buyOneMoney;
        break;
      }

      // optional string buyOneMoney = 14;
      case 14: {
        if (tag == 114) {
         parse_buyOneMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyonemoney()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buyonemoney().data(), this->buyonemoney().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buyonemoney");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_buyTenMoney;
        break;
      }

      // optional string buyTenMoney = 15;
      case 15: {
        if (tag == 122) {
         parse_buyTenMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buytenmoney()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buytenmoney().data(), this->buytenmoney().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buytenmoney");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCFeelGold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCFeelGold)
  return false;
#undef DO_
}

void GCFeelGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCFeelGold)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional int32 lastCount = 4;
  if (has_lastcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastcount(), output);
  }

  // repeated .ItemInfo item1 = 5;
  for (int i = 0; i < this->item1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item1(i), output);
  }

  // repeated .ItemInfo item2 = 6;
  for (int i = 0; i < this->item2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->item2(i), output);
  }

  // repeated .ItemInfo item3 = 7;
  for (int i = 0; i < this->item3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item3(i), output);
  }

  // optional string startDate = 8;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "startdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->startdate(), output);
  }

  // optional string endDate = 9;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enddate().data(), this->enddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enddate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->enddate(), output);
  }

  // optional int32 nextNeedGold = 10;
  if (has_nextneedgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->nextneedgold(), output);
  }

  // optional int32 buyType = 11;
  if (has_buytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->buytype(), output);
  }

  // optional int32 singleMoney = 12;
  if (has_singlemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->singlemoney(), output);
  }

  // optional string itemShow = 13;
  if (has_itemshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemshow().data(), this->itemshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemshow");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->itemshow(), output);
  }

  // optional string buyOneMoney = 14;
  if (has_buyonemoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyonemoney().data(), this->buyonemoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyonemoney");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->buyonemoney(), output);
  }

  // optional string buyTenMoney = 15;
  if (has_buytenmoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buytenmoney().data(), this->buytenmoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buytenmoney");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->buytenmoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCFeelGold)
}

::google::protobuf::uint8* GCFeelGold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCFeelGold)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional int32 lastCount = 4;
  if (has_lastcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastcount(), target);
  }

  // repeated .ItemInfo item1 = 5;
  for (int i = 0; i < this->item1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item1(i), target);
  }

  // repeated .ItemInfo item2 = 6;
  for (int i = 0; i < this->item2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->item2(i), target);
  }

  // repeated .ItemInfo item3 = 7;
  for (int i = 0; i < this->item3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->item3(i), target);
  }

  // optional string startDate = 8;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "startdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->startdate(), target);
  }

  // optional string endDate = 9;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enddate().data(), this->enddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enddate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->enddate(), target);
  }

  // optional int32 nextNeedGold = 10;
  if (has_nextneedgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->nextneedgold(), target);
  }

  // optional int32 buyType = 11;
  if (has_buytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->buytype(), target);
  }

  // optional int32 singleMoney = 12;
  if (has_singlemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->singlemoney(), target);
  }

  // optional string itemShow = 13;
  if (has_itemshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemshow().data(), this->itemshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemshow");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->itemshow(), target);
  }

  // optional string buyOneMoney = 14;
  if (has_buyonemoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyonemoney().data(), this->buyonemoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyonemoney");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->buyonemoney(), target);
  }

  // optional string buyTenMoney = 15;
  if (has_buytenmoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buytenmoney().data(), this->buytenmoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buytenmoney");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->buytenmoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCFeelGold)
  return target;
}

int GCFeelGold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 lastCount = 4;
    if (has_lastcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastcount());
    }

    // optional string startDate = 8;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startdate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string endDate = 9;
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enddate());
    }

    // optional int32 nextNeedGold = 10;
    if (has_nextneedgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextneedgold());
    }

    // optional int32 buyType = 11;
    if (has_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buytype());
    }

    // optional int32 singleMoney = 12;
    if (has_singlemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->singlemoney());
    }

    // optional string itemShow = 13;
    if (has_itemshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemshow());
    }

    // optional string buyOneMoney = 14;
    if (has_buyonemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyonemoney());
    }

    // optional string buyTenMoney = 15;
    if (has_buytenmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buytenmoney());
    }

  }
  // repeated .ItemInfo item1 = 5;
  total_size += 1 * this->item1_size();
  for (int i = 0; i < this->item1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item1(i));
  }

  // repeated .ItemInfo item2 = 6;
  total_size += 1 * this->item2_size();
  for (int i = 0; i < this->item2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item2(i));
  }

  // repeated .ItemInfo item3 = 7;
  total_size += 1 * this->item3_size();
  for (int i = 0; i < this->item3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item3(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCFeelGold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCFeelGold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCFeelGold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCFeelGold::MergeFrom(const GCFeelGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  item1_.MergeFrom(from.item1_);
  item2_.MergeFrom(from.item2_);
  item3_.MergeFrom(from.item3_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_lastcount()) {
      set_lastcount(from.lastcount());
    }
    if (from.has_startdate()) {
      set_startdate(from.startdate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enddate()) {
      set_enddate(from.enddate());
    }
    if (from.has_nextneedgold()) {
      set_nextneedgold(from.nextneedgold());
    }
    if (from.has_buytype()) {
      set_buytype(from.buytype());
    }
    if (from.has_singlemoney()) {
      set_singlemoney(from.singlemoney());
    }
    if (from.has_itemshow()) {
      set_itemshow(from.itemshow());
    }
    if (from.has_buyonemoney()) {
      set_buyonemoney(from.buyonemoney());
    }
    if (from.has_buytenmoney()) {
      set_buytenmoney(from.buytenmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCFeelGold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCFeelGold::CopyFrom(const GCFeelGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFeelGold::IsInitialized() const {

  return true;
}

void GCFeelGold::Swap(GCFeelGold* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(lastcount_, other->lastcount_);
    item1_.Swap(&other->item1_);
    item2_.Swap(&other->item2_);
    item3_.Swap(&other->item3_);
    std::swap(startdate_, other->startdate_);
    std::swap(enddate_, other->enddate_);
    std::swap(nextneedgold_, other->nextneedgold_);
    std::swap(buytype_, other->buytype_);
    std::swap(singlemoney_, other->singlemoney_);
    std::swap(itemshow_, other->itemshow_);
    std::swap(buyonemoney_, other->buyonemoney_);
    std::swap(buytenmoney_, other->buytenmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCFeelGold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCFeelGold_descriptor_;
  metadata.reflection = GCFeelGold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGFeelGold::kIdFieldNumber;
const int CGFeelGold::kTypeFieldNumber;
const int CGFeelGold::kKeyFieldNumber;
#endif  // !_MSC_VER

CGFeelGold::CGFeelGold()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGFeelGold)
}

void CGFeelGold::InitAsDefaultInstance() {
}

CGFeelGold::CGFeelGold(const CGFeelGold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGFeelGold)
}

void CGFeelGold::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGFeelGold::~CGFeelGold() {
  // @@protoc_insertion_point(destructor:CGFeelGold)
  SharedDtor();
}

void CGFeelGold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGFeelGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGFeelGold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGFeelGold_descriptor_;
}

const CGFeelGold& CGFeelGold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGFeelGold* CGFeelGold::default_instance_ = NULL;

CGFeelGold* CGFeelGold::New() const {
  return new CGFeelGold;
}

void CGFeelGold::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGFeelGold*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, key_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGFeelGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGFeelGold)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_key;
        break;
      }

      // optional int32 key = 3;
      case 3: {
        if (tag == 24) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGFeelGold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGFeelGold)
  return false;
#undef DO_
}

void CGFeelGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGFeelGold)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGFeelGold)
}

::google::protobuf::uint8* CGFeelGold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGFeelGold)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGFeelGold)
  return target;
}

int CGFeelGold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGFeelGold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGFeelGold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGFeelGold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGFeelGold::MergeFrom(const CGFeelGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGFeelGold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGFeelGold::CopyFrom(const CGFeelGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGFeelGold::IsInitialized() const {

  return true;
}

void CGFeelGold::Swap(CGFeelGold* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGFeelGold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGFeelGold_descriptor_;
  metadata.reflection = CGFeelGold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelQuotaInfo::kIdFieldNumber;
const int LevelQuotaInfo::kLevelLimitFieldNumber;
const int LevelQuotaInfo::kGoodsGroupFieldNumber;
const int LevelQuotaInfo::kChargeIdFieldNumber;
const int LevelQuotaInfo::kOriginalPriceFieldNumber;
const int LevelQuotaInfo::kCurrentPriceFieldNumber;
const int LevelQuotaInfo::kNoSeeLevelFieldNumber;
const int LevelQuotaInfo::kMoneyTypeFieldNumber;
#endif  // !_MSC_VER

LevelQuotaInfo::LevelQuotaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LevelQuotaInfo)
}

void LevelQuotaInfo::InitAsDefaultInstance() {
}

LevelQuotaInfo::LevelQuotaInfo(const LevelQuotaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LevelQuotaInfo)
}

void LevelQuotaInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  levellimit_ = 0;
  goodsgroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chargeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originalprice_ = 0;
  currentprice_ = 0;
  noseelevel_ = 0;
  moneytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelQuotaInfo::~LevelQuotaInfo() {
  // @@protoc_insertion_point(destructor:LevelQuotaInfo)
  SharedDtor();
}

void LevelQuotaInfo::SharedDtor() {
  if (goodsgroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete goodsgroup_;
  }
  if (chargeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chargeid_;
  }
  if (this != default_instance_) {
  }
}

void LevelQuotaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelQuotaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelQuotaInfo_descriptor_;
}

const LevelQuotaInfo& LevelQuotaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

LevelQuotaInfo* LevelQuotaInfo::default_instance_ = NULL;

LevelQuotaInfo* LevelQuotaInfo::New() const {
  return new LevelQuotaInfo;
}

void LevelQuotaInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LevelQuotaInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, levellimit_);
    ZR_(originalprice_, moneytype_);
    if (has_goodsgroup()) {
      if (goodsgroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        goodsgroup_->clear();
      }
    }
    if (has_chargeid()) {
      if (chargeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chargeid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelQuotaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LevelQuotaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_levelLimit;
        break;
      }

      // optional int32 levelLimit = 2;
      case 2: {
        if (tag == 16) {
         parse_levelLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levellimit_)));
          set_has_levellimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_goodsGroup;
        break;
      }

      // optional string goodsGroup = 3;
      case 3: {
        if (tag == 26) {
         parse_goodsGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_goodsgroup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->goodsgroup().data(), this->goodsgroup().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "goodsgroup");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ChargeId;
        break;
      }

      // optional string ChargeId = 4;
      case 4: {
        if (tag == 34) {
         parse_ChargeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chargeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chargeid().data(), this->chargeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chargeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_originalPrice;
        break;
      }

      // optional int32 originalPrice = 5;
      case 5: {
        if (tag == 40) {
         parse_originalPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &originalprice_)));
          set_has_originalprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_currentPrice;
        break;
      }

      // optional int32 currentPrice = 6;
      case 6: {
        if (tag == 48) {
         parse_currentPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentprice_)));
          set_has_currentprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_noSeeLevel;
        break;
      }

      // optional int32 noSeeLevel = 7;
      case 7: {
        if (tag == 56) {
         parse_noSeeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noseelevel_)));
          set_has_noseelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_moneyType;
        break;
      }

      // optional int32 moneyType = 8;
      case 8: {
        if (tag == 64) {
         parse_moneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LevelQuotaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LevelQuotaInfo)
  return false;
#undef DO_
}

void LevelQuotaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LevelQuotaInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 levelLimit = 2;
  if (has_levellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->levellimit(), output);
  }

  // optional string goodsGroup = 3;
  if (has_goodsgroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->goodsgroup().data(), this->goodsgroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "goodsgroup");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->goodsgroup(), output);
  }

  // optional string ChargeId = 4;
  if (has_chargeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chargeid().data(), this->chargeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chargeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chargeid(), output);
  }

  // optional int32 originalPrice = 5;
  if (has_originalprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->originalprice(), output);
  }

  // optional int32 currentPrice = 6;
  if (has_currentprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currentprice(), output);
  }

  // optional int32 noSeeLevel = 7;
  if (has_noseelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->noseelevel(), output);
  }

  // optional int32 moneyType = 8;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->moneytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LevelQuotaInfo)
}

::google::protobuf::uint8* LevelQuotaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LevelQuotaInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 levelLimit = 2;
  if (has_levellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->levellimit(), target);
  }

  // optional string goodsGroup = 3;
  if (has_goodsgroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->goodsgroup().data(), this->goodsgroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "goodsgroup");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->goodsgroup(), target);
  }

  // optional string ChargeId = 4;
  if (has_chargeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chargeid().data(), this->chargeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chargeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chargeid(), target);
  }

  // optional int32 originalPrice = 5;
  if (has_originalprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->originalprice(), target);
  }

  // optional int32 currentPrice = 6;
  if (has_currentprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->currentprice(), target);
  }

  // optional int32 noSeeLevel = 7;
  if (has_noseelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->noseelevel(), target);
  }

  // optional int32 moneyType = 8;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->moneytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LevelQuotaInfo)
  return target;
}

int LevelQuotaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 levelLimit = 2;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levellimit());
    }

    // optional string goodsGroup = 3;
    if (has_goodsgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->goodsgroup());
    }

    // optional string ChargeId = 4;
    if (has_chargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chargeid());
    }

    // optional int32 originalPrice = 5;
    if (has_originalprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->originalprice());
    }

    // optional int32 currentPrice = 6;
    if (has_currentprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentprice());
    }

    // optional int32 noSeeLevel = 7;
    if (has_noseelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noseelevel());
    }

    // optional int32 moneyType = 8;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelQuotaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelQuotaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelQuotaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelQuotaInfo::MergeFrom(const LevelQuotaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_levellimit()) {
      set_levellimit(from.levellimit());
    }
    if (from.has_goodsgroup()) {
      set_goodsgroup(from.goodsgroup());
    }
    if (from.has_chargeid()) {
      set_chargeid(from.chargeid());
    }
    if (from.has_originalprice()) {
      set_originalprice(from.originalprice());
    }
    if (from.has_currentprice()) {
      set_currentprice(from.currentprice());
    }
    if (from.has_noseelevel()) {
      set_noseelevel(from.noseelevel());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelQuotaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelQuotaInfo::CopyFrom(const LevelQuotaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelQuotaInfo::IsInitialized() const {

  return true;
}

void LevelQuotaInfo::Swap(LevelQuotaInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(goodsgroup_, other->goodsgroup_);
    std::swap(chargeid_, other->chargeid_);
    std::swap(originalprice_, other->originalprice_);
    std::swap(currentprice_, other->currentprice_);
    std::swap(noseelevel_, other->noseelevel_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelQuotaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelQuotaInfo_descriptor_;
  metadata.reflection = LevelQuotaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCLevelQuota::kInfoListFieldNumber;
#endif  // !_MSC_VER

GCLevelQuota::GCLevelQuota()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCLevelQuota)
}

void GCLevelQuota::InitAsDefaultInstance() {
}

GCLevelQuota::GCLevelQuota(const GCLevelQuota& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCLevelQuota)
}

void GCLevelQuota::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCLevelQuota::~GCLevelQuota() {
  // @@protoc_insertion_point(destructor:GCLevelQuota)
  SharedDtor();
}

void GCLevelQuota::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCLevelQuota::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCLevelQuota::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCLevelQuota_descriptor_;
}

const GCLevelQuota& GCLevelQuota::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCLevelQuota* GCLevelQuota::default_instance_ = NULL;

GCLevelQuota* GCLevelQuota::New() const {
  return new GCLevelQuota;
}

void GCLevelQuota::Clear() {
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCLevelQuota::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCLevelQuota)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LevelQuotaInfo infoList = 1;
      case 1: {
        if (tag == 10) {
         parse_infoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_infoList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCLevelQuota)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCLevelQuota)
  return false;
#undef DO_
}

void GCLevelQuota::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCLevelQuota)
  // repeated .LevelQuotaInfo infoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCLevelQuota)
}

::google::protobuf::uint8* GCLevelQuota::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCLevelQuota)
  // repeated .LevelQuotaInfo infoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCLevelQuota)
  return target;
}

int GCLevelQuota::ByteSize() const {
  int total_size = 0;

  // repeated .LevelQuotaInfo infoList = 1;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCLevelQuota::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCLevelQuota* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCLevelQuota*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCLevelQuota::MergeFrom(const GCLevelQuota& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCLevelQuota::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCLevelQuota::CopyFrom(const GCLevelQuota& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLevelQuota::IsInitialized() const {

  return true;
}

void GCLevelQuota::Swap(GCLevelQuota* other) {
  if (other != this) {
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCLevelQuota::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCLevelQuota_descriptor_;
  metadata.reflection = GCLevelQuota_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBuyLevelQuota::kIdFieldNumber;
#endif  // !_MSC_VER

CGBuyLevelQuota::CGBuyLevelQuota()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBuyLevelQuota)
}

void CGBuyLevelQuota::InitAsDefaultInstance() {
}

CGBuyLevelQuota::CGBuyLevelQuota(const CGBuyLevelQuota& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBuyLevelQuota)
}

void CGBuyLevelQuota::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBuyLevelQuota::~CGBuyLevelQuota() {
  // @@protoc_insertion_point(destructor:CGBuyLevelQuota)
  SharedDtor();
}

void CGBuyLevelQuota::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBuyLevelQuota::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBuyLevelQuota::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBuyLevelQuota_descriptor_;
}

const CGBuyLevelQuota& CGBuyLevelQuota::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGBuyLevelQuota* CGBuyLevelQuota::default_instance_ = NULL;

CGBuyLevelQuota* CGBuyLevelQuota::New() const {
  return new CGBuyLevelQuota;
}

void CGBuyLevelQuota::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBuyLevelQuota::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBuyLevelQuota)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBuyLevelQuota)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBuyLevelQuota)
  return false;
#undef DO_
}

void CGBuyLevelQuota::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBuyLevelQuota)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBuyLevelQuota)
}

::google::protobuf::uint8* CGBuyLevelQuota::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBuyLevelQuota)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBuyLevelQuota)
  return target;
}

int CGBuyLevelQuota::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBuyLevelQuota::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBuyLevelQuota* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBuyLevelQuota*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBuyLevelQuota::MergeFrom(const CGBuyLevelQuota& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBuyLevelQuota::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBuyLevelQuota::CopyFrom(const CGBuyLevelQuota& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBuyLevelQuota::IsInitialized() const {

  return true;
}

void CGBuyLevelQuota::Swap(CGBuyLevelQuota* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBuyLevelQuota::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBuyLevelQuota_descriptor_;
  metadata.reflection = CGBuyLevelQuota_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCLevelQuotaUpdate::kIdFieldNumber;
const int GCLevelQuotaUpdate::kResultFieldNumber;
#endif  // !_MSC_VER

GCLevelQuotaUpdate::GCLevelQuotaUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCLevelQuotaUpdate)
}

void GCLevelQuotaUpdate::InitAsDefaultInstance() {
}

GCLevelQuotaUpdate::GCLevelQuotaUpdate(const GCLevelQuotaUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCLevelQuotaUpdate)
}

void GCLevelQuotaUpdate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCLevelQuotaUpdate::~GCLevelQuotaUpdate() {
  // @@protoc_insertion_point(destructor:GCLevelQuotaUpdate)
  SharedDtor();
}

void GCLevelQuotaUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCLevelQuotaUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCLevelQuotaUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCLevelQuotaUpdate_descriptor_;
}

const GCLevelQuotaUpdate& GCLevelQuotaUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCLevelQuotaUpdate* GCLevelQuotaUpdate::default_instance_ = NULL;

GCLevelQuotaUpdate* GCLevelQuotaUpdate::New() const {
  return new GCLevelQuotaUpdate;
}

void GCLevelQuotaUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCLevelQuotaUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCLevelQuotaUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCLevelQuotaUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCLevelQuotaUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCLevelQuotaUpdate)
  return false;
#undef DO_
}

void GCLevelQuotaUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCLevelQuotaUpdate)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCLevelQuotaUpdate)
}

::google::protobuf::uint8* GCLevelQuotaUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCLevelQuotaUpdate)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCLevelQuotaUpdate)
  return target;
}

int GCLevelQuotaUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCLevelQuotaUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCLevelQuotaUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCLevelQuotaUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCLevelQuotaUpdate::MergeFrom(const GCLevelQuotaUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCLevelQuotaUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCLevelQuotaUpdate::CopyFrom(const GCLevelQuotaUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLevelQuotaUpdate::IsInitialized() const {

  return true;
}

void GCLevelQuotaUpdate::Swap(GCLevelQuotaUpdate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCLevelQuotaUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCLevelQuotaUpdate_descriptor_;
  metadata.reflection = GCLevelQuotaUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FreeBackInfo::kIdFieldNumber;
const int FreeBackInfo::kItemShopFieldNumber;
const int FreeBackInfo::kShowPriceFieldNumber;
const int FreeBackInfo::kSellPriceFieldNumber;
const int FreeBackInfo::kChargeIDFieldNumber;
#endif  // !_MSC_VER

FreeBackInfo::FreeBackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FreeBackInfo)
}

void FreeBackInfo::InitAsDefaultInstance() {
}

FreeBackInfo::FreeBackInfo(const FreeBackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FreeBackInfo)
}

void FreeBackInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  itemshop_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  showprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sellprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chargeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreeBackInfo::~FreeBackInfo() {
  // @@protoc_insertion_point(destructor:FreeBackInfo)
  SharedDtor();
}

void FreeBackInfo::SharedDtor() {
  if (itemshop_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemshop_;
  }
  if (showprice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete showprice_;
  }
  if (sellprice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sellprice_;
  }
  if (chargeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chargeid_;
  }
  if (this != default_instance_) {
  }
}

void FreeBackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreeBackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreeBackInfo_descriptor_;
}

const FreeBackInfo& FreeBackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

FreeBackInfo* FreeBackInfo::default_instance_ = NULL;

FreeBackInfo* FreeBackInfo::New() const {
  return new FreeBackInfo;
}

void FreeBackInfo::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    id_ = 0;
    if (has_itemshop()) {
      if (itemshop_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemshop_->clear();
      }
    }
    if (has_showprice()) {
      if (showprice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        showprice_->clear();
      }
    }
    if (has_sellprice()) {
      if (sellprice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sellprice_->clear();
      }
    }
    if (has_chargeid()) {
      if (chargeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chargeid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreeBackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FreeBackInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemShop;
        break;
      }

      // optional string itemShop = 2;
      case 2: {
        if (tag == 18) {
         parse_itemShop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemshop()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemshop().data(), this->itemshop().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemshop");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_showPrice;
        break;
      }

      // optional string showPrice = 3;
      case 3: {
        if (tag == 26) {
         parse_showPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_showprice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->showprice().data(), this->showprice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "showprice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sellPrice;
        break;
      }

      // optional string sellPrice = 4;
      case 4: {
        if (tag == 34) {
         parse_sellPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sellprice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sellprice().data(), this->sellprice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sellprice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_chargeID;
        break;
      }

      // optional string chargeID = 5;
      case 5: {
        if (tag == 42) {
         parse_chargeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chargeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chargeid().data(), this->chargeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chargeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FreeBackInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FreeBackInfo)
  return false;
#undef DO_
}

void FreeBackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FreeBackInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string itemShop = 2;
  if (has_itemshop()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemshop().data(), this->itemshop().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemshop");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemshop(), output);
  }

  // optional string showPrice = 3;
  if (has_showprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->showprice().data(), this->showprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "showprice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->showprice(), output);
  }

  // optional string sellPrice = 4;
  if (has_sellprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sellprice().data(), this->sellprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sellprice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sellprice(), output);
  }

  // optional string chargeID = 5;
  if (has_chargeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chargeid().data(), this->chargeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chargeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->chargeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FreeBackInfo)
}

::google::protobuf::uint8* FreeBackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FreeBackInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string itemShop = 2;
  if (has_itemshop()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemshop().data(), this->itemshop().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemshop");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemshop(), target);
  }

  // optional string showPrice = 3;
  if (has_showprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->showprice().data(), this->showprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "showprice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->showprice(), target);
  }

  // optional string sellPrice = 4;
  if (has_sellprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sellprice().data(), this->sellprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sellprice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sellprice(), target);
  }

  // optional string chargeID = 5;
  if (has_chargeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chargeid().data(), this->chargeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chargeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->chargeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FreeBackInfo)
  return target;
}

int FreeBackInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string itemShop = 2;
    if (has_itemshop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemshop());
    }

    // optional string showPrice = 3;
    if (has_showprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->showprice());
    }

    // optional string sellPrice = 4;
    if (has_sellprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sellprice());
    }

    // optional string chargeID = 5;
    if (has_chargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chargeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreeBackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreeBackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreeBackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreeBackInfo::MergeFrom(const FreeBackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemshop()) {
      set_itemshop(from.itemshop());
    }
    if (from.has_showprice()) {
      set_showprice(from.showprice());
    }
    if (from.has_sellprice()) {
      set_sellprice(from.sellprice());
    }
    if (from.has_chargeid()) {
      set_chargeid(from.chargeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreeBackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeBackInfo::CopyFrom(const FreeBackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeBackInfo::IsInitialized() const {

  return true;
}

void FreeBackInfo::Swap(FreeBackInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemshop_, other->itemshop_);
    std::swap(showprice_, other->showprice_);
    std::swap(sellprice_, other->sellprice_);
    std::swap(chargeid_, other->chargeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreeBackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreeBackInfo_descriptor_;
  metadata.reflection = FreeBackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBuyFreeBack::kIdFieldNumber;
#endif  // !_MSC_VER

CGBuyFreeBack::CGBuyFreeBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBuyFreeBack)
}

void CGBuyFreeBack::InitAsDefaultInstance() {
}

CGBuyFreeBack::CGBuyFreeBack(const CGBuyFreeBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBuyFreeBack)
}

void CGBuyFreeBack::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBuyFreeBack::~CGBuyFreeBack() {
  // @@protoc_insertion_point(destructor:CGBuyFreeBack)
  SharedDtor();
}

void CGBuyFreeBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBuyFreeBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBuyFreeBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBuyFreeBack_descriptor_;
}

const CGBuyFreeBack& CGBuyFreeBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGBuyFreeBack* CGBuyFreeBack::default_instance_ = NULL;

CGBuyFreeBack* CGBuyFreeBack::New() const {
  return new CGBuyFreeBack;
}

void CGBuyFreeBack::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBuyFreeBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBuyFreeBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBuyFreeBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBuyFreeBack)
  return false;
#undef DO_
}

void CGBuyFreeBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBuyFreeBack)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBuyFreeBack)
}

::google::protobuf::uint8* CGBuyFreeBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBuyFreeBack)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBuyFreeBack)
  return target;
}

int CGBuyFreeBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBuyFreeBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBuyFreeBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBuyFreeBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBuyFreeBack::MergeFrom(const CGBuyFreeBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBuyFreeBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBuyFreeBack::CopyFrom(const CGBuyFreeBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBuyFreeBack::IsInitialized() const {

  return true;
}

void CGBuyFreeBack::Swap(CGBuyFreeBack* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBuyFreeBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBuyFreeBack_descriptor_;
  metadata.reflection = CGBuyFreeBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCFreeBack::kOperateTypeFieldNumber;
const int GCFreeBack::kFreeBackInfoFieldNumber;
#endif  // !_MSC_VER

GCFreeBack::GCFreeBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCFreeBack)
}

void GCFreeBack::InitAsDefaultInstance() {
  freebackinfo_ = const_cast< ::FreeBackInfo*>(&::FreeBackInfo::default_instance());
}

GCFreeBack::GCFreeBack(const GCFreeBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCFreeBack)
}

void GCFreeBack::SharedCtor() {
  _cached_size_ = 0;
  operatetype_ = 0;
  freebackinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCFreeBack::~GCFreeBack() {
  // @@protoc_insertion_point(destructor:GCFreeBack)
  SharedDtor();
}

void GCFreeBack::SharedDtor() {
  if (this != default_instance_) {
    delete freebackinfo_;
  }
}

void GCFreeBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCFreeBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCFreeBack_descriptor_;
}

const GCFreeBack& GCFreeBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCFreeBack* GCFreeBack::default_instance_ = NULL;

GCFreeBack* GCFreeBack::New() const {
  return new GCFreeBack;
}

void GCFreeBack::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    operatetype_ = 0;
    if (has_freebackinfo()) {
      if (freebackinfo_ != NULL) freebackinfo_->::FreeBackInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCFreeBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCFreeBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operateType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatetype_)));
          set_has_operatetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_freeBackInfo;
        break;
      }

      // optional .FreeBackInfo freeBackInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_freeBackInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_freebackinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCFreeBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCFreeBack)
  return false;
#undef DO_
}

void GCFreeBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCFreeBack)
  // optional int32 operateType = 1;
  if (has_operatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operatetype(), output);
  }

  // optional .FreeBackInfo freeBackInfo = 2;
  if (has_freebackinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->freebackinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCFreeBack)
}

::google::protobuf::uint8* GCFreeBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCFreeBack)
  // optional int32 operateType = 1;
  if (has_operatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operatetype(), target);
  }

  // optional .FreeBackInfo freeBackInfo = 2;
  if (has_freebackinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->freebackinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCFreeBack)
  return target;
}

int GCFreeBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operateType = 1;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatetype());
    }

    // optional .FreeBackInfo freeBackInfo = 2;
    if (has_freebackinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->freebackinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCFreeBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCFreeBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCFreeBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCFreeBack::MergeFrom(const GCFreeBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operatetype()) {
      set_operatetype(from.operatetype());
    }
    if (from.has_freebackinfo()) {
      mutable_freebackinfo()->::FreeBackInfo::MergeFrom(from.freebackinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCFreeBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCFreeBack::CopyFrom(const GCFreeBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFreeBack::IsInitialized() const {

  return true;
}

void GCFreeBack::Swap(GCFreeBack* other) {
  if (other != this) {
    std::swap(operatetype_, other->operatetype_);
    std::swap(freebackinfo_, other->freebackinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCFreeBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCFreeBack_descriptor_;
  metadata.reflection = GCFreeBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperRebateItem::kTypeFieldNumber;
const int SuperRebateItem::kItemInfoFieldNumber;
const int SuperRebateItem::kStatusFieldNumber;
#endif  // !_MSC_VER

SuperRebateItem::SuperRebateItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SuperRebateItem)
}

void SuperRebateItem::InitAsDefaultInstance() {
}

SuperRebateItem::SuperRebateItem(const SuperRebateItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SuperRebateItem)
}

void SuperRebateItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  iteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperRebateItem::~SuperRebateItem() {
  // @@protoc_insertion_point(destructor:SuperRebateItem)
  SharedDtor();
}

void SuperRebateItem::SharedDtor() {
  if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iteminfo_;
  }
  if (this != default_instance_) {
  }
}

void SuperRebateItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperRebateItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperRebateItem_descriptor_;
}

const SuperRebateItem& SuperRebateItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

SuperRebateItem* SuperRebateItem::default_instance_ = NULL;

SuperRebateItem* SuperRebateItem::New() const {
  return new SuperRebateItem;
}

void SuperRebateItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SuperRebateItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, status_);
    if (has_iteminfo()) {
      if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iteminfo_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperRebateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SuperRebateItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemInfo;
        break;
      }

      // optional string itemInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iteminfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iteminfo().data(), this->iteminfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iteminfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SuperRebateItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SuperRebateItem)
  return false;
#undef DO_
}

void SuperRebateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SuperRebateItem)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string itemInfo = 2;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iteminfo().data(), this->iteminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iteminfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->iteminfo(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SuperRebateItem)
}

::google::protobuf::uint8* SuperRebateItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SuperRebateItem)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string itemInfo = 2;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iteminfo().data(), this->iteminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iteminfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->iteminfo(), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SuperRebateItem)
  return target;
}

int SuperRebateItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string itemInfo = 2;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iteminfo());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperRebateItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperRebateItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperRebateItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperRebateItem::MergeFrom(const SuperRebateItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_iteminfo()) {
      set_iteminfo(from.iteminfo());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperRebateItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperRebateItem::CopyFrom(const SuperRebateItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperRebateItem::IsInitialized() const {

  return true;
}

void SuperRebateItem::Swap(SuperRebateItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperRebateItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperRebateItem_descriptor_;
  metadata.reflection = SuperRebateItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperRebateInfo::kIdFieldNumber;
const int SuperRebateInfo::kPriceFieldNumber;
const int SuperRebateInfo::kNoteFieldNumber;
const int SuperRebateInfo::kItemListFieldNumber;
#endif  // !_MSC_VER

SuperRebateInfo::SuperRebateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SuperRebateInfo)
}

void SuperRebateInfo::InitAsDefaultInstance() {
}

SuperRebateInfo::SuperRebateInfo(const SuperRebateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SuperRebateInfo)
}

void SuperRebateInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  price_ = 0;
  note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperRebateInfo::~SuperRebateInfo() {
  // @@protoc_insertion_point(destructor:SuperRebateInfo)
  SharedDtor();
}

void SuperRebateInfo::SharedDtor() {
  if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete note_;
  }
  if (this != default_instance_) {
  }
}

void SuperRebateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperRebateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperRebateInfo_descriptor_;
}

const SuperRebateInfo& SuperRebateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

SuperRebateInfo* SuperRebateInfo::default_instance_ = NULL;

SuperRebateInfo* SuperRebateInfo::New() const {
  return new SuperRebateInfo;
}

void SuperRebateInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SuperRebateInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, price_);
    if (has_note()) {
      if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        note_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperRebateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SuperRebateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // optional int32 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_note;
        break;
      }

      // optional string note = 3;
      case 3: {
        if (tag == 26) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "note");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_itemList;
        break;
      }

      // repeated .SuperRebateItem itemList = 4;
      case 4: {
        if (tag == 34) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_itemList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SuperRebateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SuperRebateInfo)
  return false;
#undef DO_
}

void SuperRebateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SuperRebateInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // optional string note = 3;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->note(), output);
  }

  // repeated .SuperRebateItem itemList = 4;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->itemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SuperRebateInfo)
}

::google::protobuf::uint8* SuperRebateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SuperRebateInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // optional string note = 3;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->note(), target);
  }

  // repeated .SuperRebateItem itemList = 4;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->itemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SuperRebateInfo)
  return target;
}

int SuperRebateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional string note = 3;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }

  }
  // repeated .SuperRebateItem itemList = 4;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperRebateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperRebateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperRebateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperRebateInfo::MergeFrom(const SuperRebateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_note()) {
      set_note(from.note());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperRebateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperRebateInfo::CopyFrom(const SuperRebateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperRebateInfo::IsInitialized() const {

  return true;
}

void SuperRebateInfo::Swap(SuperRebateInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(price_, other->price_);
    std::swap(note_, other->note_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperRebateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperRebateInfo_descriptor_;
  metadata.reflection = SuperRebateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetSuperRebateReward::kIdFieldNumber;
const int CGGetSuperRebateReward::kIndexFieldNumber;
#endif  // !_MSC_VER

CGGetSuperRebateReward::CGGetSuperRebateReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetSuperRebateReward)
}

void CGGetSuperRebateReward::InitAsDefaultInstance() {
}

CGGetSuperRebateReward::CGGetSuperRebateReward(const CGGetSuperRebateReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetSuperRebateReward)
}

void CGGetSuperRebateReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetSuperRebateReward::~CGGetSuperRebateReward() {
  // @@protoc_insertion_point(destructor:CGGetSuperRebateReward)
  SharedDtor();
}

void CGGetSuperRebateReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetSuperRebateReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetSuperRebateReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetSuperRebateReward_descriptor_;
}

const CGGetSuperRebateReward& CGGetSuperRebateReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGGetSuperRebateReward* CGGetSuperRebateReward::default_instance_ = NULL;

CGGetSuperRebateReward* CGGetSuperRebateReward::New() const {
  return new CGGetSuperRebateReward;
}

void CGGetSuperRebateReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetSuperRebateReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetSuperRebateReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetSuperRebateReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetSuperRebateReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetSuperRebateReward)
  return false;
#undef DO_
}

void CGGetSuperRebateReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetSuperRebateReward)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetSuperRebateReward)
}

::google::protobuf::uint8* CGGetSuperRebateReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetSuperRebateReward)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetSuperRebateReward)
  return target;
}

int CGGetSuperRebateReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetSuperRebateReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetSuperRebateReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetSuperRebateReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetSuperRebateReward::MergeFrom(const CGGetSuperRebateReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetSuperRebateReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetSuperRebateReward::CopyFrom(const CGGetSuperRebateReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetSuperRebateReward::IsInitialized() const {

  return true;
}

void CGGetSuperRebateReward::Swap(CGGetSuperRebateReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetSuperRebateReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetSuperRebateReward_descriptor_;
  metadata.reflection = CGGetSuperRebateReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSuperRebateBack::kOperateTypeFieldNumber;
const int GCSuperRebateBack::kNoteFieldNumber;
const int GCSuperRebateBack::kInfoListFieldNumber;
const int GCSuperRebateBack::kRebateInfoFieldNumber;
#endif  // !_MSC_VER

GCSuperRebateBack::GCSuperRebateBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSuperRebateBack)
}

void GCSuperRebateBack::InitAsDefaultInstance() {
  rebateinfo_ = const_cast< ::SuperRebateInfo*>(&::SuperRebateInfo::default_instance());
}

GCSuperRebateBack::GCSuperRebateBack(const GCSuperRebateBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSuperRebateBack)
}

void GCSuperRebateBack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operatetype_ = 0;
  note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rebateinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSuperRebateBack::~GCSuperRebateBack() {
  // @@protoc_insertion_point(destructor:GCSuperRebateBack)
  SharedDtor();
}

void GCSuperRebateBack::SharedDtor() {
  if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete note_;
  }
  if (this != default_instance_) {
    delete rebateinfo_;
  }
}

void GCSuperRebateBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSuperRebateBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSuperRebateBack_descriptor_;
}

const GCSuperRebateBack& GCSuperRebateBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCSuperRebateBack* GCSuperRebateBack::default_instance_ = NULL;

GCSuperRebateBack* GCSuperRebateBack::New() const {
  return new GCSuperRebateBack;
}

void GCSuperRebateBack::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    operatetype_ = 0;
    if (has_note()) {
      if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        note_->clear();
      }
    }
    if (has_rebateinfo()) {
      if (rebateinfo_ != NULL) rebateinfo_->::SuperRebateInfo::Clear();
    }
  }
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSuperRebateBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSuperRebateBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operateType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatetype_)));
          set_has_operatetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_note;
        break;
      }

      // optional string note = 2;
      case 2: {
        if (tag == 18) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "note");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infoList;
        break;
      }

      // repeated .SuperRebateInfo infoList = 3;
      case 3: {
        if (tag == 26) {
         parse_infoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infoList;
        if (input->ExpectTag(34)) goto parse_rebateInfo;
        break;
      }

      // optional .SuperRebateInfo rebateInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_rebateInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rebateinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSuperRebateBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSuperRebateBack)
  return false;
#undef DO_
}

void GCSuperRebateBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSuperRebateBack)
  // optional int32 operateType = 1;
  if (has_operatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operatetype(), output);
  }

  // optional string note = 2;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->note(), output);
  }

  // repeated .SuperRebateInfo infoList = 3;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infolist(i), output);
  }

  // optional .SuperRebateInfo rebateInfo = 4;
  if (has_rebateinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rebateinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSuperRebateBack)
}

::google::protobuf::uint8* GCSuperRebateBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSuperRebateBack)
  // optional int32 operateType = 1;
  if (has_operatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operatetype(), target);
  }

  // optional string note = 2;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->note(), target);
  }

  // repeated .SuperRebateInfo infoList = 3;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infolist(i), target);
  }

  // optional .SuperRebateInfo rebateInfo = 4;
  if (has_rebateinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rebateinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSuperRebateBack)
  return target;
}

int GCSuperRebateBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operateType = 1;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatetype());
    }

    // optional string note = 2;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }

    // optional .SuperRebateInfo rebateInfo = 4;
    if (has_rebateinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rebateinfo());
    }

  }
  // repeated .SuperRebateInfo infoList = 3;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSuperRebateBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSuperRebateBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSuperRebateBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSuperRebateBack::MergeFrom(const GCSuperRebateBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operatetype()) {
      set_operatetype(from.operatetype());
    }
    if (from.has_note()) {
      set_note(from.note());
    }
    if (from.has_rebateinfo()) {
      mutable_rebateinfo()->::SuperRebateInfo::MergeFrom(from.rebateinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSuperRebateBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSuperRebateBack::CopyFrom(const GCSuperRebateBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSuperRebateBack::IsInitialized() const {

  return true;
}

void GCSuperRebateBack::Swap(GCSuperRebateBack* other) {
  if (other != this) {
    std::swap(operatetype_, other->operatetype_);
    std::swap(note_, other->note_);
    infolist_.Swap(&other->infolist_);
    std::swap(rebateinfo_, other->rebateinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSuperRebateBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSuperRebateBack_descriptor_;
  metadata.reflection = GCSuperRebateBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeDailyGiftItem::kIdFieldNumber;
const int RechargeDailyGiftItem::kStatusFieldNumber;
#endif  // !_MSC_VER

RechargeDailyGiftItem::RechargeDailyGiftItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RechargeDailyGiftItem)
}

void RechargeDailyGiftItem::InitAsDefaultInstance() {
}

RechargeDailyGiftItem::RechargeDailyGiftItem(const RechargeDailyGiftItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RechargeDailyGiftItem)
}

void RechargeDailyGiftItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeDailyGiftItem::~RechargeDailyGiftItem() {
  // @@protoc_insertion_point(destructor:RechargeDailyGiftItem)
  SharedDtor();
}

void RechargeDailyGiftItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RechargeDailyGiftItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeDailyGiftItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeDailyGiftItem_descriptor_;
}

const RechargeDailyGiftItem& RechargeDailyGiftItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

RechargeDailyGiftItem* RechargeDailyGiftItem::default_instance_ = NULL;

RechargeDailyGiftItem* RechargeDailyGiftItem::New() const {
  return new RechargeDailyGiftItem;
}

void RechargeDailyGiftItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RechargeDailyGiftItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeDailyGiftItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RechargeDailyGiftItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RechargeDailyGiftItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RechargeDailyGiftItem)
  return false;
#undef DO_
}

void RechargeDailyGiftItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RechargeDailyGiftItem)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RechargeDailyGiftItem)
}

::google::protobuf::uint8* RechargeDailyGiftItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RechargeDailyGiftItem)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RechargeDailyGiftItem)
  return target;
}

int RechargeDailyGiftItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeDailyGiftItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeDailyGiftItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeDailyGiftItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeDailyGiftItem::MergeFrom(const RechargeDailyGiftItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeDailyGiftItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeDailyGiftItem::CopyFrom(const RechargeDailyGiftItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeDailyGiftItem::IsInitialized() const {

  return true;
}

void RechargeDailyGiftItem::Swap(RechargeDailyGiftItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeDailyGiftItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeDailyGiftItem_descriptor_;
  metadata.reflection = RechargeDailyGiftItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRechargeDailyGiftInfo::kDailyGiftListFieldNumber;
#endif  // !_MSC_VER

GCRechargeDailyGiftInfo::GCRechargeDailyGiftInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRechargeDailyGiftInfo)
}

void GCRechargeDailyGiftInfo::InitAsDefaultInstance() {
}

GCRechargeDailyGiftInfo::GCRechargeDailyGiftInfo(const GCRechargeDailyGiftInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRechargeDailyGiftInfo)
}

void GCRechargeDailyGiftInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRechargeDailyGiftInfo::~GCRechargeDailyGiftInfo() {
  // @@protoc_insertion_point(destructor:GCRechargeDailyGiftInfo)
  SharedDtor();
}

void GCRechargeDailyGiftInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRechargeDailyGiftInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRechargeDailyGiftInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRechargeDailyGiftInfo_descriptor_;
}

const GCRechargeDailyGiftInfo& GCRechargeDailyGiftInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCRechargeDailyGiftInfo* GCRechargeDailyGiftInfo::default_instance_ = NULL;

GCRechargeDailyGiftInfo* GCRechargeDailyGiftInfo::New() const {
  return new GCRechargeDailyGiftInfo;
}

void GCRechargeDailyGiftInfo::Clear() {
  dailygiftlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRechargeDailyGiftInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRechargeDailyGiftInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RechargeDailyGiftItem dailyGiftList = 1;
      case 1: {
        if (tag == 10) {
         parse_dailyGiftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailygiftlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_dailyGiftList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRechargeDailyGiftInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRechargeDailyGiftInfo)
  return false;
#undef DO_
}

void GCRechargeDailyGiftInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRechargeDailyGiftInfo)
  // repeated .RechargeDailyGiftItem dailyGiftList = 1;
  for (int i = 0; i < this->dailygiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dailygiftlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRechargeDailyGiftInfo)
}

::google::protobuf::uint8* GCRechargeDailyGiftInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRechargeDailyGiftInfo)
  // repeated .RechargeDailyGiftItem dailyGiftList = 1;
  for (int i = 0; i < this->dailygiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dailygiftlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRechargeDailyGiftInfo)
  return target;
}

int GCRechargeDailyGiftInfo::ByteSize() const {
  int total_size = 0;

  // repeated .RechargeDailyGiftItem dailyGiftList = 1;
  total_size += 1 * this->dailygiftlist_size();
  for (int i = 0; i < this->dailygiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailygiftlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRechargeDailyGiftInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRechargeDailyGiftInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRechargeDailyGiftInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRechargeDailyGiftInfo::MergeFrom(const GCRechargeDailyGiftInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailygiftlist_.MergeFrom(from.dailygiftlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRechargeDailyGiftInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRechargeDailyGiftInfo::CopyFrom(const GCRechargeDailyGiftInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRechargeDailyGiftInfo::IsInitialized() const {

  return true;
}

void GCRechargeDailyGiftInfo::Swap(GCRechargeDailyGiftInfo* other) {
  if (other != this) {
    dailygiftlist_.Swap(&other->dailygiftlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRechargeDailyGiftInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRechargeDailyGiftInfo_descriptor_;
  metadata.reflection = GCRechargeDailyGiftInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetRechargeDailyGiftReward::kIdFieldNumber;
#endif  // !_MSC_VER

CGGetRechargeDailyGiftReward::CGGetRechargeDailyGiftReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetRechargeDailyGiftReward)
}

void CGGetRechargeDailyGiftReward::InitAsDefaultInstance() {
}

CGGetRechargeDailyGiftReward::CGGetRechargeDailyGiftReward(const CGGetRechargeDailyGiftReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetRechargeDailyGiftReward)
}

void CGGetRechargeDailyGiftReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetRechargeDailyGiftReward::~CGGetRechargeDailyGiftReward() {
  // @@protoc_insertion_point(destructor:CGGetRechargeDailyGiftReward)
  SharedDtor();
}

void CGGetRechargeDailyGiftReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetRechargeDailyGiftReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetRechargeDailyGiftReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetRechargeDailyGiftReward_descriptor_;
}

const CGGetRechargeDailyGiftReward& CGGetRechargeDailyGiftReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGGetRechargeDailyGiftReward* CGGetRechargeDailyGiftReward::default_instance_ = NULL;

CGGetRechargeDailyGiftReward* CGGetRechargeDailyGiftReward::New() const {
  return new CGGetRechargeDailyGiftReward;
}

void CGGetRechargeDailyGiftReward::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetRechargeDailyGiftReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetRechargeDailyGiftReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetRechargeDailyGiftReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetRechargeDailyGiftReward)
  return false;
#undef DO_
}

void CGGetRechargeDailyGiftReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetRechargeDailyGiftReward)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetRechargeDailyGiftReward)
}

::google::protobuf::uint8* CGGetRechargeDailyGiftReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetRechargeDailyGiftReward)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetRechargeDailyGiftReward)
  return target;
}

int CGGetRechargeDailyGiftReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetRechargeDailyGiftReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetRechargeDailyGiftReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetRechargeDailyGiftReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetRechargeDailyGiftReward::MergeFrom(const CGGetRechargeDailyGiftReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetRechargeDailyGiftReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetRechargeDailyGiftReward::CopyFrom(const CGGetRechargeDailyGiftReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetRechargeDailyGiftReward::IsInitialized() const {

  return true;
}

void CGGetRechargeDailyGiftReward::Swap(CGGetRechargeDailyGiftReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetRechargeDailyGiftReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetRechargeDailyGiftReward_descriptor_;
  metadata.reflection = CGGetRechargeDailyGiftReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetRechargeDailyGiftRewardBack::kResultFieldNumber;
#endif  // !_MSC_VER

GCGetRechargeDailyGiftRewardBack::GCGetRechargeDailyGiftRewardBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetRechargeDailyGiftRewardBack)
}

void GCGetRechargeDailyGiftRewardBack::InitAsDefaultInstance() {
}

GCGetRechargeDailyGiftRewardBack::GCGetRechargeDailyGiftRewardBack(const GCGetRechargeDailyGiftRewardBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetRechargeDailyGiftRewardBack)
}

void GCGetRechargeDailyGiftRewardBack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetRechargeDailyGiftRewardBack::~GCGetRechargeDailyGiftRewardBack() {
  // @@protoc_insertion_point(destructor:GCGetRechargeDailyGiftRewardBack)
  SharedDtor();
}

void GCGetRechargeDailyGiftRewardBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetRechargeDailyGiftRewardBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetRechargeDailyGiftRewardBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetRechargeDailyGiftRewardBack_descriptor_;
}

const GCGetRechargeDailyGiftRewardBack& GCGetRechargeDailyGiftRewardBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCGetRechargeDailyGiftRewardBack* GCGetRechargeDailyGiftRewardBack::default_instance_ = NULL;

GCGetRechargeDailyGiftRewardBack* GCGetRechargeDailyGiftRewardBack::New() const {
  return new GCGetRechargeDailyGiftRewardBack;
}

void GCGetRechargeDailyGiftRewardBack::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetRechargeDailyGiftRewardBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetRechargeDailyGiftRewardBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetRechargeDailyGiftRewardBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetRechargeDailyGiftRewardBack)
  return false;
#undef DO_
}

void GCGetRechargeDailyGiftRewardBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetRechargeDailyGiftRewardBack)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetRechargeDailyGiftRewardBack)
}

::google::protobuf::uint8* GCGetRechargeDailyGiftRewardBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetRechargeDailyGiftRewardBack)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetRechargeDailyGiftRewardBack)
  return target;
}

int GCGetRechargeDailyGiftRewardBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetRechargeDailyGiftRewardBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetRechargeDailyGiftRewardBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetRechargeDailyGiftRewardBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetRechargeDailyGiftRewardBack::MergeFrom(const GCGetRechargeDailyGiftRewardBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetRechargeDailyGiftRewardBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetRechargeDailyGiftRewardBack::CopyFrom(const GCGetRechargeDailyGiftRewardBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetRechargeDailyGiftRewardBack::IsInitialized() const {

  return true;
}

void GCGetRechargeDailyGiftRewardBack::Swap(GCGetRechargeDailyGiftRewardBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetRechargeDailyGiftRewardBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetRechargeDailyGiftRewardBack_descriptor_;
  metadata.reflection = GCGetRechargeDailyGiftRewardBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPointsBuyHisInfo::kTypeFieldNumber;
const int GCPointsBuyHisInfo::kWinnersInfoListFieldNumber;
#endif  // !_MSC_VER

GCPointsBuyHisInfo::GCPointsBuyHisInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPointsBuyHisInfo)
}

void GCPointsBuyHisInfo::InitAsDefaultInstance() {
}

GCPointsBuyHisInfo::GCPointsBuyHisInfo(const GCPointsBuyHisInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPointsBuyHisInfo)
}

void GCPointsBuyHisInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPointsBuyHisInfo::~GCPointsBuyHisInfo() {
  // @@protoc_insertion_point(destructor:GCPointsBuyHisInfo)
  SharedDtor();
}

void GCPointsBuyHisInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPointsBuyHisInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPointsBuyHisInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPointsBuyHisInfo_descriptor_;
}

const GCPointsBuyHisInfo& GCPointsBuyHisInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCPointsBuyHisInfo* GCPointsBuyHisInfo::default_instance_ = NULL;

GCPointsBuyHisInfo* GCPointsBuyHisInfo::New() const {
  return new GCPointsBuyHisInfo;
}

void GCPointsBuyHisInfo::Clear() {
  type_ = 0;
  winnersinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPointsBuyHisInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPointsBuyHisInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_winnersInfoList;
        break;
      }

      // repeated .WinnersInfo winnersInfoList = 2;
      case 2: {
        if (tag == 18) {
         parse_winnersInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_winnersinfolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_winnersInfoList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPointsBuyHisInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPointsBuyHisInfo)
  return false;
#undef DO_
}

void GCPointsBuyHisInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPointsBuyHisInfo)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .WinnersInfo winnersInfoList = 2;
  for (int i = 0; i < this->winnersinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->winnersinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPointsBuyHisInfo)
}

::google::protobuf::uint8* GCPointsBuyHisInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPointsBuyHisInfo)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .WinnersInfo winnersInfoList = 2;
  for (int i = 0; i < this->winnersinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->winnersinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPointsBuyHisInfo)
  return target;
}

int GCPointsBuyHisInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .WinnersInfo winnersInfoList = 2;
  total_size += 1 * this->winnersinfolist_size();
  for (int i = 0; i < this->winnersinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->winnersinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPointsBuyHisInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPointsBuyHisInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPointsBuyHisInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPointsBuyHisInfo::MergeFrom(const GCPointsBuyHisInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  winnersinfolist_.MergeFrom(from.winnersinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPointsBuyHisInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPointsBuyHisInfo::CopyFrom(const GCPointsBuyHisInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPointsBuyHisInfo::IsInitialized() const {

  return true;
}

void GCPointsBuyHisInfo::Swap(GCPointsBuyHisInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    winnersinfolist_.Swap(&other->winnersinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPointsBuyHisInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPointsBuyHisInfo_descriptor_;
  metadata.reflection = GCPointsBuyHisInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPointsBuyList::kTypeFieldNumber;
const int GCPointsBuyList::kPointsFieldNumber;
const int GCPointsBuyList::kBuyInfoListFieldNumber;
#endif  // !_MSC_VER

GCPointsBuyList::GCPointsBuyList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPointsBuyList)
}

void GCPointsBuyList::InitAsDefaultInstance() {
}

GCPointsBuyList::GCPointsBuyList(const GCPointsBuyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPointsBuyList)
}

void GCPointsBuyList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  points_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPointsBuyList::~GCPointsBuyList() {
  // @@protoc_insertion_point(destructor:GCPointsBuyList)
  SharedDtor();
}

void GCPointsBuyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPointsBuyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPointsBuyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPointsBuyList_descriptor_;
}

const GCPointsBuyList& GCPointsBuyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

GCPointsBuyList* GCPointsBuyList::default_instance_ = NULL;

GCPointsBuyList* GCPointsBuyList::New() const {
  return new GCPointsBuyList;
}

void GCPointsBuyList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPointsBuyList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, points_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  buyinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPointsBuyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPointsBuyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_points;
        break;
      }

      // optional int32 points = 2;
      case 2: {
        if (tag == 16) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_buyInfoList;
        break;
      }

      // repeated .oneBuyInfo buyInfoList = 3;
      case 3: {
        if (tag == 26) {
         parse_buyInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buyinfolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_buyInfoList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPointsBuyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPointsBuyList)
  return false;
#undef DO_
}

void GCPointsBuyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPointsBuyList)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 points = 2;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->points(), output);
  }

  // repeated .oneBuyInfo buyInfoList = 3;
  for (int i = 0; i < this->buyinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buyinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPointsBuyList)
}

::google::protobuf::uint8* GCPointsBuyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPointsBuyList)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 points = 2;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->points(), target);
  }

  // repeated .oneBuyInfo buyInfoList = 3;
  for (int i = 0; i < this->buyinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buyinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPointsBuyList)
  return target;
}

int GCPointsBuyList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 points = 2;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

  }
  // repeated .oneBuyInfo buyInfoList = 3;
  total_size += 1 * this->buyinfolist_size();
  for (int i = 0; i < this->buyinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buyinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPointsBuyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPointsBuyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPointsBuyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPointsBuyList::MergeFrom(const GCPointsBuyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  buyinfolist_.MergeFrom(from.buyinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPointsBuyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPointsBuyList::CopyFrom(const GCPointsBuyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPointsBuyList::IsInitialized() const {

  return true;
}

void GCPointsBuyList::Swap(GCPointsBuyList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(points_, other->points_);
    buyinfolist_.Swap(&other->buyinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPointsBuyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPointsBuyList_descriptor_;
  metadata.reflection = GCPointsBuyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBuyPoints::kIdFieldNumber;
const int CGBuyPoints::kNumFieldNumber;
#endif  // !_MSC_VER

CGBuyPoints::CGBuyPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBuyPoints)
}

void CGBuyPoints::InitAsDefaultInstance() {
}

CGBuyPoints::CGBuyPoints(const CGBuyPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBuyPoints)
}

void CGBuyPoints::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBuyPoints::~CGBuyPoints() {
  // @@protoc_insertion_point(destructor:CGBuyPoints)
  SharedDtor();
}

void CGBuyPoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBuyPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBuyPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBuyPoints_descriptor_;
}

const CGBuyPoints& CGBuyPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SuperGiftMessage_2eproto();
  return *default_instance_;
}

CGBuyPoints* CGBuyPoints::default_instance_ = NULL;

CGBuyPoints* CGBuyPoints::New() const {
  return new CGBuyPoints;
}

void CGBuyPoints::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGBuyPoints*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBuyPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBuyPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBuyPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBuyPoints)
  return false;
#undef DO_
}

void CGBuyPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBuyPoints)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBuyPoints)
}

::google::protobuf::uint8* CGBuyPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBuyPoints)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBuyPoints)
  return target;
}

int CGBuyPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBuyPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBuyPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBuyPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBuyPoints::MergeFrom(const CGBuyPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBuyPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBuyPoints::CopyFrom(const CGBuyPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBuyPoints::IsInitialized() const {

  return true;
}

void CGBuyPoints::Swap(CGBuyPoints* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBuyPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBuyPoints_descriptor_;
  metadata.reflection = CGBuyPoints_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
