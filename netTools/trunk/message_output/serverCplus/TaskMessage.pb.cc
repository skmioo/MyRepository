// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TaskMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TaskInfor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskInfor_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGDeliverTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGDeliverTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGFinishTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGFinishTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCTaskListBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCTaskListBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCTaskInforBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCTaskInforBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGReciveTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGReciveTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCatchComplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCatchComplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCatchCreatMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCatchCreatMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCatchGiveUpTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCatchGiveUpTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGOpenDialog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGOpenDialog_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCMenverOpenDialog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCMenverOpenDialog_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendTaskOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendTaskOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendMainTasks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendMainTasks_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendTaskReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendTaskReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCreatMonsterBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCreatMonsterBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendTaskMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendTaskMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCatchCreatProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCatchCreatProp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TaskMessage_2eproto() {
  protobuf_AddDesc_TaskMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TaskMessage.proto");
  GOOGLE_CHECK(file != NULL);
  TaskInfor_descriptor_ = file->message_type(0);
  static const int TaskInfor_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfor, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfor, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfor, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfor, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfor, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfor, level_),
  };
  TaskInfor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskInfor_descriptor_,
      TaskInfor::default_instance_,
      TaskInfor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskInfor));
  TaskStatus_descriptor_ = file->message_type(1);
  static const int TaskStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, total_),
  };
  TaskStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskStatus_descriptor_,
      TaskStatus::default_instance_,
      TaskStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskStatus));
  CGDeliverTask_descriptor_ = file->message_type(2);
  static const int CGDeliverTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDeliverTask, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDeliverTask, isdouble_),
  };
  CGDeliverTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGDeliverTask_descriptor_,
      CGDeliverTask::default_instance_,
      CGDeliverTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDeliverTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDeliverTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGDeliverTask));
  CGFinishTask_descriptor_ = file->message_type(3);
  static const int CGFinishTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFinishTask, taskid_),
  };
  CGFinishTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGFinishTask_descriptor_,
      CGFinishTask::default_instance_,
      CGFinishTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFinishTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFinishTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGFinishTask));
  GCTaskListBack_descriptor_ = file->message_type(4);
  static const int GCTaskListBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTaskListBack, taskinfors_),
  };
  GCTaskListBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCTaskListBack_descriptor_,
      GCTaskListBack::default_instance_,
      GCTaskListBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTaskListBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTaskListBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCTaskListBack));
  GCTaskInforBack_descriptor_ = file->message_type(5);
  static const int GCTaskInforBack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTaskInforBack, taskinfors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTaskInforBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTaskInforBack, oldtaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTaskInforBack, stageinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTaskInforBack, taskstatus_),
  };
  GCTaskInforBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCTaskInforBack_descriptor_,
      GCTaskInforBack::default_instance_,
      GCTaskInforBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTaskInforBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTaskInforBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCTaskInforBack));
  CGReciveTask_descriptor_ = file->message_type(6);
  static const int CGReciveTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReciveTask, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReciveTask, taskid_),
  };
  CGReciveTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGReciveTask_descriptor_,
      CGReciveTask::default_instance_,
      CGReciveTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReciveTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReciveTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGReciveTask));
  CGCatchComplate_descriptor_ = file->message_type(7);
  static const int CGCatchComplate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCatchComplate, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCatchComplate, stage_),
  };
  CGCatchComplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCatchComplate_descriptor_,
      CGCatchComplate::default_instance_,
      CGCatchComplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCatchComplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCatchComplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCatchComplate));
  CGCatchCreatMonster_descriptor_ = file->message_type(8);
  static const int CGCatchCreatMonster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCatchCreatMonster, taskid_),
  };
  CGCatchCreatMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCatchCreatMonster_descriptor_,
      CGCatchCreatMonster::default_instance_,
      CGCatchCreatMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCatchCreatMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCatchCreatMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCatchCreatMonster));
  CGCatchGiveUpTask_descriptor_ = file->message_type(9);
  static const int CGCatchGiveUpTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCatchGiveUpTask, taskid_),
  };
  CGCatchGiveUpTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCatchGiveUpTask_descriptor_,
      CGCatchGiveUpTask::default_instance_,
      CGCatchGiveUpTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCatchGiveUpTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCatchGiveUpTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCatchGiveUpTask));
  CGOpenDialog_descriptor_ = file->message_type(10);
  static const int CGOpenDialog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpenDialog, taskid_),
  };
  CGOpenDialog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGOpenDialog_descriptor_,
      CGOpenDialog::default_instance_,
      CGOpenDialog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpenDialog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpenDialog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGOpenDialog));
  GCMenverOpenDialog_descriptor_ = file->message_type(11);
  static const int GCMenverOpenDialog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMenverOpenDialog, taskid_),
  };
  GCMenverOpenDialog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCMenverOpenDialog_descriptor_,
      GCMenverOpenDialog::default_instance_,
      GCMenverOpenDialog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMenverOpenDialog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMenverOpenDialog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCMenverOpenDialog));
  GCSendTaskOver_descriptor_ = file->message_type(12);
  static const int GCSendTaskOver_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTaskOver, type_),
  };
  GCSendTaskOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendTaskOver_descriptor_,
      GCSendTaskOver::default_instance_,
      GCSendTaskOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTaskOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTaskOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendTaskOver));
  GCSendMainTasks_descriptor_ = file->message_type(13);
  static const int GCSendMainTasks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMainTasks, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMainTasks, taskids_),
  };
  GCSendMainTasks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendMainTasks_descriptor_,
      GCSendMainTasks::default_instance_,
      GCSendMainTasks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMainTasks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMainTasks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendMainTasks));
  GCSendTaskReward_descriptor_ = file->message_type(14);
  static const int GCSendTaskReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTaskReward, rewarditems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTaskReward, attrrewards_),
  };
  GCSendTaskReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendTaskReward_descriptor_,
      GCSendTaskReward::default_instance_,
      GCSendTaskReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTaskReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTaskReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendTaskReward));
  GCCreatMonsterBack_descriptor_ = file->message_type(15);
  static const int GCCreatMonsterBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreatMonsterBack, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreatMonsterBack, taskid_),
  };
  GCCreatMonsterBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCreatMonsterBack_descriptor_,
      GCCreatMonsterBack::default_instance_,
      GCCreatMonsterBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreatMonsterBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreatMonsterBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCreatMonsterBack));
  GCSendTaskMonster_descriptor_ = file->message_type(16);
  static const int GCSendTaskMonster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTaskMonster, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTaskMonster, mosnterid_),
  };
  GCSendTaskMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendTaskMonster_descriptor_,
      GCSendTaskMonster::default_instance_,
      GCSendTaskMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTaskMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTaskMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendTaskMonster));
  CGCatchCreatProp_descriptor_ = file->message_type(17);
  static const int CGCatchCreatProp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCatchCreatProp, taskid_),
  };
  CGCatchCreatProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCatchCreatProp_descriptor_,
      CGCatchCreatProp::default_instance_,
      CGCatchCreatProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCatchCreatProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCatchCreatProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCatchCreatProp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TaskMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskInfor_descriptor_, &TaskInfor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskStatus_descriptor_, &TaskStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGDeliverTask_descriptor_, &CGDeliverTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGFinishTask_descriptor_, &CGFinishTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCTaskListBack_descriptor_, &GCTaskListBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCTaskInforBack_descriptor_, &GCTaskInforBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGReciveTask_descriptor_, &CGReciveTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCatchComplate_descriptor_, &CGCatchComplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCatchCreatMonster_descriptor_, &CGCatchCreatMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCatchGiveUpTask_descriptor_, &CGCatchGiveUpTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGOpenDialog_descriptor_, &CGOpenDialog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCMenverOpenDialog_descriptor_, &GCMenverOpenDialog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendTaskOver_descriptor_, &GCSendTaskOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendMainTasks_descriptor_, &GCSendMainTasks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendTaskReward_descriptor_, &GCSendTaskReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCreatMonsterBack_descriptor_, &GCCreatMonsterBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendTaskMonster_descriptor_, &GCSendTaskMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCatchCreatProp_descriptor_, &CGCatchCreatProp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TaskMessage_2eproto() {
  delete TaskInfor::default_instance_;
  delete TaskInfor_reflection_;
  delete TaskStatus::default_instance_;
  delete TaskStatus_reflection_;
  delete CGDeliverTask::default_instance_;
  delete CGDeliverTask_reflection_;
  delete CGFinishTask::default_instance_;
  delete CGFinishTask_reflection_;
  delete GCTaskListBack::default_instance_;
  delete GCTaskListBack_reflection_;
  delete GCTaskInforBack::default_instance_;
  delete GCTaskInforBack_reflection_;
  delete CGReciveTask::default_instance_;
  delete CGReciveTask_reflection_;
  delete CGCatchComplate::default_instance_;
  delete CGCatchComplate_reflection_;
  delete CGCatchCreatMonster::default_instance_;
  delete CGCatchCreatMonster_reflection_;
  delete CGCatchGiveUpTask::default_instance_;
  delete CGCatchGiveUpTask_reflection_;
  delete CGOpenDialog::default_instance_;
  delete CGOpenDialog_reflection_;
  delete GCMenverOpenDialog::default_instance_;
  delete GCMenverOpenDialog_reflection_;
  delete GCSendTaskOver::default_instance_;
  delete GCSendTaskOver_reflection_;
  delete GCSendMainTasks::default_instance_;
  delete GCSendMainTasks_reflection_;
  delete GCSendTaskReward::default_instance_;
  delete GCSendTaskReward_reflection_;
  delete GCCreatMonsterBack::default_instance_;
  delete GCCreatMonsterBack_reflection_;
  delete GCSendTaskMonster::default_instance_;
  delete GCSendTaskMonster_reflection_;
  delete CGCatchCreatProp::default_instance_;
  delete CGCatchCreatProp_reflection_;
}

void protobuf_AddDesc_TaskMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_TowerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021TaskMessage.proto\032\022TowerMessage.proto\""
    "s\n\tTaskInfor\022\016\n\006taskID\030\001 \001(\005\022\016\n\006status\030\002"
    " \001(\005\022\013\n\003num\030\003 \001(\005\022\r\n\005stage\030\004 \001(\005\022\r\n\005tota"
    "l\030\005 \001(\005\022\014\n\004type\030\006 \001(\005\022\r\n\005level\030\007 \001(\005\"H\n\n"
    "TaskStatus\022\014\n\004type\030\001 \001(\005\022\016\n\006status\030\002 \001(\005"
    "\022\r\n\005stage\030\003 \001(\005\022\r\n\005total\030\004 \001(\005\"1\n\rCGDeli"
    "verTask\022\016\n\006taskID\030\001 \001(\005\022\020\n\010isDouble\030\002 \001("
    "\005\"\036\n\014CGFinishTask\022\016\n\006taskID\030\001 \001(\005\"0\n\016GCT"
    "askListBack\022\036\n\ntaskInfors\030\001 \003(\0132\n.TaskIn"
    "for\"\222\001\n\017GCTaskInforBack\022\036\n\ntaskInfors\030\001 "
    "\001(\0132\n.TaskInfor\022\014\n\004type\030\002 \001(\005\022\021\n\toldTask"
    "ID\030\003 \001(\005\022\035\n\tstageInfo\030\004 \003(\0132\n.TaskInfor\022"
    "\037\n\ntaskStatus\030\005 \003(\0132\013.TaskStatus\",\n\014CGRe"
    "civeTask\022\014\n\004type\030\001 \001(\005\022\016\n\006taskID\030\002 \001(\005\"0"
    "\n\017CGCatchComplate\022\016\n\006taskID\030\001 \001(\005\022\r\n\005sta"
    "ge\030\002 \001(\005\"%\n\023CGCatchCreatMonster\022\016\n\006taskI"
    "D\030\001 \001(\005\"#\n\021CGCatchGiveUpTask\022\016\n\006taskID\030\001"
    " \001(\005\"\036\n\014CGOpenDialog\022\016\n\006taskID\030\001 \001(\005\"$\n\022"
    "GCMenverOpenDialog\022\016\n\006taskID\030\001 \001(\005\"\036\n\016GC"
    "SendTaskOver\022\014\n\004type\030\001 \001(\005\"0\n\017GCSendMain"
    "Tasks\022\014\n\004type\030\001 \001(\005\022\017\n\007taskIds\030\002 \003(\005\"V\n\020"
    "GCSendTaskReward\022 \n\013rewardItems\030\001 \003(\0132\013."
    "RewardItem\022 \n\013attrRewards\030\002 \003(\0132\013.Reward"
    "Item\"5\n\022GCCreatMonsterBack\022\017\n\007success\030\001 "
    "\001(\005\022\016\n\006taskID\030\002 \001(\005\"6\n\021GCSendTaskMonster"
    "\022\016\n\006taskID\030\001 \001(\005\022\021\n\tmosnterID\030\002 \001(\005\"\"\n\020C"
    "GCatchCreatProp\022\016\n\006taskID\030\001 \001(\005B\031\n\027com.m"
    "ile.common.message", 1098);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TaskMessage.proto", &protobuf_RegisterTypes);
  TaskInfor::default_instance_ = new TaskInfor();
  TaskStatus::default_instance_ = new TaskStatus();
  CGDeliverTask::default_instance_ = new CGDeliverTask();
  CGFinishTask::default_instance_ = new CGFinishTask();
  GCTaskListBack::default_instance_ = new GCTaskListBack();
  GCTaskInforBack::default_instance_ = new GCTaskInforBack();
  CGReciveTask::default_instance_ = new CGReciveTask();
  CGCatchComplate::default_instance_ = new CGCatchComplate();
  CGCatchCreatMonster::default_instance_ = new CGCatchCreatMonster();
  CGCatchGiveUpTask::default_instance_ = new CGCatchGiveUpTask();
  CGOpenDialog::default_instance_ = new CGOpenDialog();
  GCMenverOpenDialog::default_instance_ = new GCMenverOpenDialog();
  GCSendTaskOver::default_instance_ = new GCSendTaskOver();
  GCSendMainTasks::default_instance_ = new GCSendMainTasks();
  GCSendTaskReward::default_instance_ = new GCSendTaskReward();
  GCCreatMonsterBack::default_instance_ = new GCCreatMonsterBack();
  GCSendTaskMonster::default_instance_ = new GCSendTaskMonster();
  CGCatchCreatProp::default_instance_ = new CGCatchCreatProp();
  TaskInfor::default_instance_->InitAsDefaultInstance();
  TaskStatus::default_instance_->InitAsDefaultInstance();
  CGDeliverTask::default_instance_->InitAsDefaultInstance();
  CGFinishTask::default_instance_->InitAsDefaultInstance();
  GCTaskListBack::default_instance_->InitAsDefaultInstance();
  GCTaskInforBack::default_instance_->InitAsDefaultInstance();
  CGReciveTask::default_instance_->InitAsDefaultInstance();
  CGCatchComplate::default_instance_->InitAsDefaultInstance();
  CGCatchCreatMonster::default_instance_->InitAsDefaultInstance();
  CGCatchGiveUpTask::default_instance_->InitAsDefaultInstance();
  CGOpenDialog::default_instance_->InitAsDefaultInstance();
  GCMenverOpenDialog::default_instance_->InitAsDefaultInstance();
  GCSendTaskOver::default_instance_->InitAsDefaultInstance();
  GCSendMainTasks::default_instance_->InitAsDefaultInstance();
  GCSendTaskReward::default_instance_->InitAsDefaultInstance();
  GCCreatMonsterBack::default_instance_->InitAsDefaultInstance();
  GCSendTaskMonster::default_instance_->InitAsDefaultInstance();
  CGCatchCreatProp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TaskMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TaskMessage_2eproto {
  StaticDescriptorInitializer_TaskMessage_2eproto() {
    protobuf_AddDesc_TaskMessage_2eproto();
  }
} static_descriptor_initializer_TaskMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TaskInfor::kTaskIDFieldNumber;
const int TaskInfor::kStatusFieldNumber;
const int TaskInfor::kNumFieldNumber;
const int TaskInfor::kStageFieldNumber;
const int TaskInfor::kTotalFieldNumber;
const int TaskInfor::kTypeFieldNumber;
const int TaskInfor::kLevelFieldNumber;
#endif  // !_MSC_VER

TaskInfor::TaskInfor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskInfor)
}

void TaskInfor::InitAsDefaultInstance() {
}

TaskInfor::TaskInfor(const TaskInfor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TaskInfor)
}

void TaskInfor::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  status_ = 0;
  num_ = 0;
  stage_ = 0;
  total_ = 0;
  type_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskInfor::~TaskInfor() {
  // @@protoc_insertion_point(destructor:TaskInfor)
  SharedDtor();
}

void TaskInfor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskInfor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskInfor_descriptor_;
}

const TaskInfor& TaskInfor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

TaskInfor* TaskInfor::default_instance_ = NULL;

TaskInfor* TaskInfor::New() const {
  return new TaskInfor;
}

void TaskInfor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaskInfor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(taskid_, level_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskInfor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskInfor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stage;
        break;
      }

      // optional int32 stage = 4;
      case 4: {
        if (tag == 32) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_total;
        break;
      }

      // optional int32 total = 5;
      case 5: {
        if (tag == 40) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional int32 type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (tag == 56) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskInfor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskInfor)
  return false;
#undef DO_
}

void TaskInfor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskInfor)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 stage = 4;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stage(), output);
  }

  // optional int32 total = 5;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total(), output);
  }

  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskInfor)
}

::google::protobuf::uint8* TaskInfor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TaskInfor)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 stage = 4;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stage(), target);
  }

  // optional int32 total = 5;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total(), target);
  }

  // optional int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskInfor)
  return target;
}

int TaskInfor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 stage = 4;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional int32 total = 5;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskInfor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskInfor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskInfor::MergeFrom(const TaskInfor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskInfor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfor::CopyFrom(const TaskInfor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfor::IsInitialized() const {

  return true;
}

void TaskInfor::Swap(TaskInfor* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(status_, other->status_);
    std::swap(num_, other->num_);
    std::swap(stage_, other->stage_);
    std::swap(total_, other->total_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskInfor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskInfor_descriptor_;
  metadata.reflection = TaskInfor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskStatus::kTypeFieldNumber;
const int TaskStatus::kStatusFieldNumber;
const int TaskStatus::kStageFieldNumber;
const int TaskStatus::kTotalFieldNumber;
#endif  // !_MSC_VER

TaskStatus::TaskStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskStatus)
}

void TaskStatus::InitAsDefaultInstance() {
}

TaskStatus::TaskStatus(const TaskStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TaskStatus)
}

void TaskStatus::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  status_ = 0;
  stage_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskStatus::~TaskStatus() {
  // @@protoc_insertion_point(destructor:TaskStatus)
  SharedDtor();
}

void TaskStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStatus_descriptor_;
}

const TaskStatus& TaskStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

TaskStatus* TaskStatus::default_instance_ = NULL;

TaskStatus* TaskStatus::New() const {
  return new TaskStatus;
}

void TaskStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaskStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, total_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stage;
        break;
      }

      // optional int32 stage = 3;
      case 3: {
        if (tag == 24) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total;
        break;
      }

      // optional int32 total = 4;
      case 4: {
        if (tag == 32) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskStatus)
  return false;
#undef DO_
}

void TaskStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskStatus)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int32 stage = 3;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stage(), output);
  }

  // optional int32 total = 4;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskStatus)
}

::google::protobuf::uint8* TaskStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TaskStatus)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int32 stage = 3;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stage(), target);
  }

  // optional int32 total = 4;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskStatus)
  return target;
}

int TaskStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 stage = 3;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional int32 total = 4;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskStatus::MergeFrom(const TaskStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStatus::CopyFrom(const TaskStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStatus::IsInitialized() const {

  return true;
}

void TaskStatus::Swap(TaskStatus* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(stage_, other->stage_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskStatus_descriptor_;
  metadata.reflection = TaskStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGDeliverTask::kTaskIDFieldNumber;
const int CGDeliverTask::kIsDoubleFieldNumber;
#endif  // !_MSC_VER

CGDeliverTask::CGDeliverTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGDeliverTask)
}

void CGDeliverTask::InitAsDefaultInstance() {
}

CGDeliverTask::CGDeliverTask(const CGDeliverTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGDeliverTask)
}

void CGDeliverTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  isdouble_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGDeliverTask::~CGDeliverTask() {
  // @@protoc_insertion_point(destructor:CGDeliverTask)
  SharedDtor();
}

void CGDeliverTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGDeliverTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGDeliverTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGDeliverTask_descriptor_;
}

const CGDeliverTask& CGDeliverTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

CGDeliverTask* CGDeliverTask::default_instance_ = NULL;

CGDeliverTask* CGDeliverTask::New() const {
  return new CGDeliverTask;
}

void CGDeliverTask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGDeliverTask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(taskid_, isdouble_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGDeliverTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGDeliverTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isDouble;
        break;
      }

      // optional int32 isDouble = 2;
      case 2: {
        if (tag == 16) {
         parse_isDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdouble_)));
          set_has_isdouble();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGDeliverTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGDeliverTask)
  return false;
#undef DO_
}

void CGDeliverTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGDeliverTask)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional int32 isDouble = 2;
  if (has_isdouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isdouble(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGDeliverTask)
}

::google::protobuf::uint8* CGDeliverTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGDeliverTask)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // optional int32 isDouble = 2;
  if (has_isdouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isdouble(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGDeliverTask)
  return target;
}

int CGDeliverTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

    // optional int32 isDouble = 2;
    if (has_isdouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdouble());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGDeliverTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGDeliverTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGDeliverTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGDeliverTask::MergeFrom(const CGDeliverTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_isdouble()) {
      set_isdouble(from.isdouble());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGDeliverTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGDeliverTask::CopyFrom(const CGDeliverTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGDeliverTask::IsInitialized() const {

  return true;
}

void CGDeliverTask::Swap(CGDeliverTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(isdouble_, other->isdouble_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGDeliverTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGDeliverTask_descriptor_;
  metadata.reflection = CGDeliverTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGFinishTask::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CGFinishTask::CGFinishTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGFinishTask)
}

void CGFinishTask::InitAsDefaultInstance() {
}

CGFinishTask::CGFinishTask(const CGFinishTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGFinishTask)
}

void CGFinishTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGFinishTask::~CGFinishTask() {
  // @@protoc_insertion_point(destructor:CGFinishTask)
  SharedDtor();
}

void CGFinishTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGFinishTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGFinishTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGFinishTask_descriptor_;
}

const CGFinishTask& CGFinishTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

CGFinishTask* CGFinishTask::default_instance_ = NULL;

CGFinishTask* CGFinishTask::New() const {
  return new CGFinishTask;
}

void CGFinishTask::Clear() {
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGFinishTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGFinishTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGFinishTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGFinishTask)
  return false;
#undef DO_
}

void CGFinishTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGFinishTask)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGFinishTask)
}

::google::protobuf::uint8* CGFinishTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGFinishTask)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGFinishTask)
  return target;
}

int CGFinishTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGFinishTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGFinishTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGFinishTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGFinishTask::MergeFrom(const CGFinishTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGFinishTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGFinishTask::CopyFrom(const CGFinishTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGFinishTask::IsInitialized() const {

  return true;
}

void CGFinishTask::Swap(CGFinishTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGFinishTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGFinishTask_descriptor_;
  metadata.reflection = CGFinishTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCTaskListBack::kTaskInforsFieldNumber;
#endif  // !_MSC_VER

GCTaskListBack::GCTaskListBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCTaskListBack)
}

void GCTaskListBack::InitAsDefaultInstance() {
}

GCTaskListBack::GCTaskListBack(const GCTaskListBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCTaskListBack)
}

void GCTaskListBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCTaskListBack::~GCTaskListBack() {
  // @@protoc_insertion_point(destructor:GCTaskListBack)
  SharedDtor();
}

void GCTaskListBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCTaskListBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCTaskListBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCTaskListBack_descriptor_;
}

const GCTaskListBack& GCTaskListBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

GCTaskListBack* GCTaskListBack::default_instance_ = NULL;

GCTaskListBack* GCTaskListBack::New() const {
  return new GCTaskListBack;
}

void GCTaskListBack::Clear() {
  taskinfors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCTaskListBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCTaskListBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TaskInfor taskInfors = 1;
      case 1: {
        if (tag == 10) {
         parse_taskInfors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskinfors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_taskInfors;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCTaskListBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCTaskListBack)
  return false;
#undef DO_
}

void GCTaskListBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCTaskListBack)
  // repeated .TaskInfor taskInfors = 1;
  for (int i = 0; i < this->taskinfors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskinfors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCTaskListBack)
}

::google::protobuf::uint8* GCTaskListBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCTaskListBack)
  // repeated .TaskInfor taskInfors = 1;
  for (int i = 0; i < this->taskinfors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskinfors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCTaskListBack)
  return target;
}

int GCTaskListBack::ByteSize() const {
  int total_size = 0;

  // repeated .TaskInfor taskInfors = 1;
  total_size += 1 * this->taskinfors_size();
  for (int i = 0; i < this->taskinfors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskinfors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCTaskListBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCTaskListBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCTaskListBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCTaskListBack::MergeFrom(const GCTaskListBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskinfors_.MergeFrom(from.taskinfors_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCTaskListBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCTaskListBack::CopyFrom(const GCTaskListBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTaskListBack::IsInitialized() const {

  return true;
}

void GCTaskListBack::Swap(GCTaskListBack* other) {
  if (other != this) {
    taskinfors_.Swap(&other->taskinfors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCTaskListBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCTaskListBack_descriptor_;
  metadata.reflection = GCTaskListBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCTaskInforBack::kTaskInforsFieldNumber;
const int GCTaskInforBack::kTypeFieldNumber;
const int GCTaskInforBack::kOldTaskIDFieldNumber;
const int GCTaskInforBack::kStageInfoFieldNumber;
const int GCTaskInforBack::kTaskStatusFieldNumber;
#endif  // !_MSC_VER

GCTaskInforBack::GCTaskInforBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCTaskInforBack)
}

void GCTaskInforBack::InitAsDefaultInstance() {
  taskinfors_ = const_cast< ::TaskInfor*>(&::TaskInfor::default_instance());
}

GCTaskInforBack::GCTaskInforBack(const GCTaskInforBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCTaskInforBack)
}

void GCTaskInforBack::SharedCtor() {
  _cached_size_ = 0;
  taskinfors_ = NULL;
  type_ = 0;
  oldtaskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCTaskInforBack::~GCTaskInforBack() {
  // @@protoc_insertion_point(destructor:GCTaskInforBack)
  SharedDtor();
}

void GCTaskInforBack::SharedDtor() {
  if (this != default_instance_) {
    delete taskinfors_;
  }
}

void GCTaskInforBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCTaskInforBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCTaskInforBack_descriptor_;
}

const GCTaskInforBack& GCTaskInforBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

GCTaskInforBack* GCTaskInforBack::default_instance_ = NULL;

GCTaskInforBack* GCTaskInforBack::New() const {
  return new GCTaskInforBack;
}

void GCTaskInforBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCTaskInforBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, oldtaskid_);
    if (has_taskinfors()) {
      if (taskinfors_ != NULL) taskinfors_->::TaskInfor::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  stageinfo_.Clear();
  taskstatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCTaskInforBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCTaskInforBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TaskInfor taskInfors = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taskinfors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_oldTaskID;
        break;
      }

      // optional int32 oldTaskID = 3;
      case 3: {
        if (tag == 24) {
         parse_oldTaskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldtaskid_)));
          set_has_oldtaskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stageInfo;
        break;
      }

      // repeated .TaskInfor stageInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_stageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stageinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stageInfo;
        if (input->ExpectTag(42)) goto parse_taskStatus;
        break;
      }

      // repeated .TaskStatus taskStatus = 5;
      case 5: {
        if (tag == 42) {
         parse_taskStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_taskStatus;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCTaskInforBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCTaskInforBack)
  return false;
#undef DO_
}

void GCTaskInforBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCTaskInforBack)
  // optional .TaskInfor taskInfors = 1;
  if (has_taskinfors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskinfors(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 oldTaskID = 3;
  if (has_oldtaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oldtaskid(), output);
  }

  // repeated .TaskInfor stageInfo = 4;
  for (int i = 0; i < this->stageinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stageinfo(i), output);
  }

  // repeated .TaskStatus taskStatus = 5;
  for (int i = 0; i < this->taskstatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->taskstatus(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCTaskInforBack)
}

::google::protobuf::uint8* GCTaskInforBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCTaskInforBack)
  // optional .TaskInfor taskInfors = 1;
  if (has_taskinfors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskinfors(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 oldTaskID = 3;
  if (has_oldtaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oldtaskid(), target);
  }

  // repeated .TaskInfor stageInfo = 4;
  for (int i = 0; i < this->stageinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stageinfo(i), target);
  }

  // repeated .TaskStatus taskStatus = 5;
  for (int i = 0; i < this->taskstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->taskstatus(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCTaskInforBack)
  return target;
}

int GCTaskInforBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TaskInfor taskInfors = 1;
    if (has_taskinfors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taskinfors());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 oldTaskID = 3;
    if (has_oldtaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oldtaskid());
    }

  }
  // repeated .TaskInfor stageInfo = 4;
  total_size += 1 * this->stageinfo_size();
  for (int i = 0; i < this->stageinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stageinfo(i));
  }

  // repeated .TaskStatus taskStatus = 5;
  total_size += 1 * this->taskstatus_size();
  for (int i = 0; i < this->taskstatus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskstatus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCTaskInforBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCTaskInforBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCTaskInforBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCTaskInforBack::MergeFrom(const GCTaskInforBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  stageinfo_.MergeFrom(from.stageinfo_);
  taskstatus_.MergeFrom(from.taskstatus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskinfors()) {
      mutable_taskinfors()->::TaskInfor::MergeFrom(from.taskinfors());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_oldtaskid()) {
      set_oldtaskid(from.oldtaskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCTaskInforBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCTaskInforBack::CopyFrom(const GCTaskInforBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTaskInforBack::IsInitialized() const {

  return true;
}

void GCTaskInforBack::Swap(GCTaskInforBack* other) {
  if (other != this) {
    std::swap(taskinfors_, other->taskinfors_);
    std::swap(type_, other->type_);
    std::swap(oldtaskid_, other->oldtaskid_);
    stageinfo_.Swap(&other->stageinfo_);
    taskstatus_.Swap(&other->taskstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCTaskInforBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCTaskInforBack_descriptor_;
  metadata.reflection = GCTaskInforBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGReciveTask::kTypeFieldNumber;
const int CGReciveTask::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CGReciveTask::CGReciveTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGReciveTask)
}

void CGReciveTask::InitAsDefaultInstance() {
}

CGReciveTask::CGReciveTask(const CGReciveTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGReciveTask)
}

void CGReciveTask::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGReciveTask::~CGReciveTask() {
  // @@protoc_insertion_point(destructor:CGReciveTask)
  SharedDtor();
}

void CGReciveTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGReciveTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGReciveTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGReciveTask_descriptor_;
}

const CGReciveTask& CGReciveTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

CGReciveTask* CGReciveTask::default_instance_ = NULL;

CGReciveTask* CGReciveTask::New() const {
  return new CGReciveTask;
}

void CGReciveTask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGReciveTask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, taskid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGReciveTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGReciveTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_taskID;
        break;
      }

      // optional int32 taskID = 2;
      case 2: {
        if (tag == 16) {
         parse_taskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGReciveTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGReciveTask)
  return false;
#undef DO_
}

void CGReciveTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGReciveTask)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 taskID = 2;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGReciveTask)
}

::google::protobuf::uint8* CGReciveTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGReciveTask)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 taskID = 2;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGReciveTask)
  return target;
}

int CGReciveTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 taskID = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGReciveTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGReciveTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGReciveTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGReciveTask::MergeFrom(const CGReciveTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGReciveTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGReciveTask::CopyFrom(const CGReciveTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGReciveTask::IsInitialized() const {

  return true;
}

void CGReciveTask::Swap(CGReciveTask* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGReciveTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGReciveTask_descriptor_;
  metadata.reflection = CGReciveTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCatchComplate::kTaskIDFieldNumber;
const int CGCatchComplate::kStageFieldNumber;
#endif  // !_MSC_VER

CGCatchComplate::CGCatchComplate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCatchComplate)
}

void CGCatchComplate::InitAsDefaultInstance() {
}

CGCatchComplate::CGCatchComplate(const CGCatchComplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCatchComplate)
}

void CGCatchComplate::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  stage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCatchComplate::~CGCatchComplate() {
  // @@protoc_insertion_point(destructor:CGCatchComplate)
  SharedDtor();
}

void CGCatchComplate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCatchComplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCatchComplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCatchComplate_descriptor_;
}

const CGCatchComplate& CGCatchComplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

CGCatchComplate* CGCatchComplate::default_instance_ = NULL;

CGCatchComplate* CGCatchComplate::New() const {
  return new CGCatchComplate;
}

void CGCatchComplate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGCatchComplate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(taskid_, stage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCatchComplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCatchComplate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stage;
        break;
      }

      // optional int32 stage = 2;
      case 2: {
        if (tag == 16) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCatchComplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCatchComplate)
  return false;
#undef DO_
}

void CGCatchComplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCatchComplate)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCatchComplate)
}

::google::protobuf::uint8* CGCatchComplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCatchComplate)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCatchComplate)
  return target;
}

int CGCatchComplate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

    // optional int32 stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCatchComplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCatchComplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCatchComplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCatchComplate::MergeFrom(const CGCatchComplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCatchComplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCatchComplate::CopyFrom(const CGCatchComplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCatchComplate::IsInitialized() const {

  return true;
}

void CGCatchComplate::Swap(CGCatchComplate* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCatchComplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCatchComplate_descriptor_;
  metadata.reflection = CGCatchComplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCatchCreatMonster::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CGCatchCreatMonster::CGCatchCreatMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCatchCreatMonster)
}

void CGCatchCreatMonster::InitAsDefaultInstance() {
}

CGCatchCreatMonster::CGCatchCreatMonster(const CGCatchCreatMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCatchCreatMonster)
}

void CGCatchCreatMonster::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCatchCreatMonster::~CGCatchCreatMonster() {
  // @@protoc_insertion_point(destructor:CGCatchCreatMonster)
  SharedDtor();
}

void CGCatchCreatMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCatchCreatMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCatchCreatMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCatchCreatMonster_descriptor_;
}

const CGCatchCreatMonster& CGCatchCreatMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

CGCatchCreatMonster* CGCatchCreatMonster::default_instance_ = NULL;

CGCatchCreatMonster* CGCatchCreatMonster::New() const {
  return new CGCatchCreatMonster;
}

void CGCatchCreatMonster::Clear() {
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCatchCreatMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCatchCreatMonster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCatchCreatMonster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCatchCreatMonster)
  return false;
#undef DO_
}

void CGCatchCreatMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCatchCreatMonster)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCatchCreatMonster)
}

::google::protobuf::uint8* CGCatchCreatMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCatchCreatMonster)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCatchCreatMonster)
  return target;
}

int CGCatchCreatMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCatchCreatMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCatchCreatMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCatchCreatMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCatchCreatMonster::MergeFrom(const CGCatchCreatMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCatchCreatMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCatchCreatMonster::CopyFrom(const CGCatchCreatMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCatchCreatMonster::IsInitialized() const {

  return true;
}

void CGCatchCreatMonster::Swap(CGCatchCreatMonster* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCatchCreatMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCatchCreatMonster_descriptor_;
  metadata.reflection = CGCatchCreatMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCatchGiveUpTask::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CGCatchGiveUpTask::CGCatchGiveUpTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCatchGiveUpTask)
}

void CGCatchGiveUpTask::InitAsDefaultInstance() {
}

CGCatchGiveUpTask::CGCatchGiveUpTask(const CGCatchGiveUpTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCatchGiveUpTask)
}

void CGCatchGiveUpTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCatchGiveUpTask::~CGCatchGiveUpTask() {
  // @@protoc_insertion_point(destructor:CGCatchGiveUpTask)
  SharedDtor();
}

void CGCatchGiveUpTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCatchGiveUpTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCatchGiveUpTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCatchGiveUpTask_descriptor_;
}

const CGCatchGiveUpTask& CGCatchGiveUpTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

CGCatchGiveUpTask* CGCatchGiveUpTask::default_instance_ = NULL;

CGCatchGiveUpTask* CGCatchGiveUpTask::New() const {
  return new CGCatchGiveUpTask;
}

void CGCatchGiveUpTask::Clear() {
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCatchGiveUpTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCatchGiveUpTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCatchGiveUpTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCatchGiveUpTask)
  return false;
#undef DO_
}

void CGCatchGiveUpTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCatchGiveUpTask)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCatchGiveUpTask)
}

::google::protobuf::uint8* CGCatchGiveUpTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCatchGiveUpTask)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCatchGiveUpTask)
  return target;
}

int CGCatchGiveUpTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCatchGiveUpTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCatchGiveUpTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCatchGiveUpTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCatchGiveUpTask::MergeFrom(const CGCatchGiveUpTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCatchGiveUpTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCatchGiveUpTask::CopyFrom(const CGCatchGiveUpTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCatchGiveUpTask::IsInitialized() const {

  return true;
}

void CGCatchGiveUpTask::Swap(CGCatchGiveUpTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCatchGiveUpTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCatchGiveUpTask_descriptor_;
  metadata.reflection = CGCatchGiveUpTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGOpenDialog::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CGOpenDialog::CGOpenDialog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGOpenDialog)
}

void CGOpenDialog::InitAsDefaultInstance() {
}

CGOpenDialog::CGOpenDialog(const CGOpenDialog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGOpenDialog)
}

void CGOpenDialog::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGOpenDialog::~CGOpenDialog() {
  // @@protoc_insertion_point(destructor:CGOpenDialog)
  SharedDtor();
}

void CGOpenDialog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGOpenDialog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGOpenDialog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGOpenDialog_descriptor_;
}

const CGOpenDialog& CGOpenDialog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

CGOpenDialog* CGOpenDialog::default_instance_ = NULL;

CGOpenDialog* CGOpenDialog::New() const {
  return new CGOpenDialog;
}

void CGOpenDialog::Clear() {
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGOpenDialog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGOpenDialog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGOpenDialog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGOpenDialog)
  return false;
#undef DO_
}

void CGOpenDialog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGOpenDialog)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGOpenDialog)
}

::google::protobuf::uint8* CGOpenDialog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGOpenDialog)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGOpenDialog)
  return target;
}

int CGOpenDialog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGOpenDialog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGOpenDialog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGOpenDialog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGOpenDialog::MergeFrom(const CGOpenDialog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGOpenDialog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGOpenDialog::CopyFrom(const CGOpenDialog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOpenDialog::IsInitialized() const {

  return true;
}

void CGOpenDialog::Swap(CGOpenDialog* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGOpenDialog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGOpenDialog_descriptor_;
  metadata.reflection = CGOpenDialog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCMenverOpenDialog::kTaskIDFieldNumber;
#endif  // !_MSC_VER

GCMenverOpenDialog::GCMenverOpenDialog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCMenverOpenDialog)
}

void GCMenverOpenDialog::InitAsDefaultInstance() {
}

GCMenverOpenDialog::GCMenverOpenDialog(const GCMenverOpenDialog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCMenverOpenDialog)
}

void GCMenverOpenDialog::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCMenverOpenDialog::~GCMenverOpenDialog() {
  // @@protoc_insertion_point(destructor:GCMenverOpenDialog)
  SharedDtor();
}

void GCMenverOpenDialog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCMenverOpenDialog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCMenverOpenDialog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCMenverOpenDialog_descriptor_;
}

const GCMenverOpenDialog& GCMenverOpenDialog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

GCMenverOpenDialog* GCMenverOpenDialog::default_instance_ = NULL;

GCMenverOpenDialog* GCMenverOpenDialog::New() const {
  return new GCMenverOpenDialog;
}

void GCMenverOpenDialog::Clear() {
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCMenverOpenDialog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCMenverOpenDialog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCMenverOpenDialog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCMenverOpenDialog)
  return false;
#undef DO_
}

void GCMenverOpenDialog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCMenverOpenDialog)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCMenverOpenDialog)
}

::google::protobuf::uint8* GCMenverOpenDialog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCMenverOpenDialog)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCMenverOpenDialog)
  return target;
}

int GCMenverOpenDialog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCMenverOpenDialog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCMenverOpenDialog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCMenverOpenDialog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCMenverOpenDialog::MergeFrom(const GCMenverOpenDialog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCMenverOpenDialog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCMenverOpenDialog::CopyFrom(const GCMenverOpenDialog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMenverOpenDialog::IsInitialized() const {

  return true;
}

void GCMenverOpenDialog::Swap(GCMenverOpenDialog* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCMenverOpenDialog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCMenverOpenDialog_descriptor_;
  metadata.reflection = GCMenverOpenDialog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendTaskOver::kTypeFieldNumber;
#endif  // !_MSC_VER

GCSendTaskOver::GCSendTaskOver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendTaskOver)
}

void GCSendTaskOver::InitAsDefaultInstance() {
}

GCSendTaskOver::GCSendTaskOver(const GCSendTaskOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendTaskOver)
}

void GCSendTaskOver::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendTaskOver::~GCSendTaskOver() {
  // @@protoc_insertion_point(destructor:GCSendTaskOver)
  SharedDtor();
}

void GCSendTaskOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSendTaskOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendTaskOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendTaskOver_descriptor_;
}

const GCSendTaskOver& GCSendTaskOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

GCSendTaskOver* GCSendTaskOver::default_instance_ = NULL;

GCSendTaskOver* GCSendTaskOver::New() const {
  return new GCSendTaskOver;
}

void GCSendTaskOver::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendTaskOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendTaskOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendTaskOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendTaskOver)
  return false;
#undef DO_
}

void GCSendTaskOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendTaskOver)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendTaskOver)
}

::google::protobuf::uint8* GCSendTaskOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendTaskOver)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendTaskOver)
  return target;
}

int GCSendTaskOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendTaskOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendTaskOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendTaskOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendTaskOver::MergeFrom(const GCSendTaskOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendTaskOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendTaskOver::CopyFrom(const GCSendTaskOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendTaskOver::IsInitialized() const {

  return true;
}

void GCSendTaskOver::Swap(GCSendTaskOver* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendTaskOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendTaskOver_descriptor_;
  metadata.reflection = GCSendTaskOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendMainTasks::kTypeFieldNumber;
const int GCSendMainTasks::kTaskIdsFieldNumber;
#endif  // !_MSC_VER

GCSendMainTasks::GCSendMainTasks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendMainTasks)
}

void GCSendMainTasks::InitAsDefaultInstance() {
}

GCSendMainTasks::GCSendMainTasks(const GCSendMainTasks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendMainTasks)
}

void GCSendMainTasks::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendMainTasks::~GCSendMainTasks() {
  // @@protoc_insertion_point(destructor:GCSendMainTasks)
  SharedDtor();
}

void GCSendMainTasks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSendMainTasks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendMainTasks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendMainTasks_descriptor_;
}

const GCSendMainTasks& GCSendMainTasks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

GCSendMainTasks* GCSendMainTasks::default_instance_ = NULL;

GCSendMainTasks* GCSendMainTasks::New() const {
  return new GCSendMainTasks;
}

void GCSendMainTasks::Clear() {
  type_ = 0;
  taskids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendMainTasks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendMainTasks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_taskIds;
        break;
      }

      // repeated int32 taskIds = 2;
      case 2: {
        if (tag == 16) {
         parse_taskIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_taskids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_taskids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_taskIds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendMainTasks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendMainTasks)
  return false;
#undef DO_
}

void GCSendMainTasks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendMainTasks)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 taskIds = 2;
  for (int i = 0; i < this->taskids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->taskids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendMainTasks)
}

::google::protobuf::uint8* GCSendMainTasks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendMainTasks)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated int32 taskIds = 2;
  for (int i = 0; i < this->taskids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->taskids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendMainTasks)
  return target;
}

int GCSendMainTasks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 taskIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->taskids(i));
    }
    total_size += 1 * this->taskids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendMainTasks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendMainTasks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendMainTasks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendMainTasks::MergeFrom(const GCSendMainTasks& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskids_.MergeFrom(from.taskids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendMainTasks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendMainTasks::CopyFrom(const GCSendMainTasks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendMainTasks::IsInitialized() const {

  return true;
}

void GCSendMainTasks::Swap(GCSendMainTasks* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    taskids_.Swap(&other->taskids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendMainTasks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendMainTasks_descriptor_;
  metadata.reflection = GCSendMainTasks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendTaskReward::kRewardItemsFieldNumber;
const int GCSendTaskReward::kAttrRewardsFieldNumber;
#endif  // !_MSC_VER

GCSendTaskReward::GCSendTaskReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendTaskReward)
}

void GCSendTaskReward::InitAsDefaultInstance() {
}

GCSendTaskReward::GCSendTaskReward(const GCSendTaskReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendTaskReward)
}

void GCSendTaskReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendTaskReward::~GCSendTaskReward() {
  // @@protoc_insertion_point(destructor:GCSendTaskReward)
  SharedDtor();
}

void GCSendTaskReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSendTaskReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendTaskReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendTaskReward_descriptor_;
}

const GCSendTaskReward& GCSendTaskReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

GCSendTaskReward* GCSendTaskReward::default_instance_ = NULL;

GCSendTaskReward* GCSendTaskReward::New() const {
  return new GCSendTaskReward;
}

void GCSendTaskReward::Clear() {
  rewarditems_.Clear();
  attrrewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendTaskReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendTaskReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RewardItem rewardItems = 1;
      case 1: {
        if (tag == 10) {
         parse_rewardItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewarditems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rewardItems;
        if (input->ExpectTag(18)) goto parse_attrRewards;
        break;
      }

      // repeated .RewardItem attrRewards = 2;
      case 2: {
        if (tag == 18) {
         parse_attrRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrrewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attrRewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendTaskReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendTaskReward)
  return false;
#undef DO_
}

void GCSendTaskReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendTaskReward)
  // repeated .RewardItem rewardItems = 1;
  for (int i = 0; i < this->rewarditems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewarditems(i), output);
  }

  // repeated .RewardItem attrRewards = 2;
  for (int i = 0; i < this->attrrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attrrewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendTaskReward)
}

::google::protobuf::uint8* GCSendTaskReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendTaskReward)
  // repeated .RewardItem rewardItems = 1;
  for (int i = 0; i < this->rewarditems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewarditems(i), target);
  }

  // repeated .RewardItem attrRewards = 2;
  for (int i = 0; i < this->attrrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attrrewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendTaskReward)
  return target;
}

int GCSendTaskReward::ByteSize() const {
  int total_size = 0;

  // repeated .RewardItem rewardItems = 1;
  total_size += 1 * this->rewarditems_size();
  for (int i = 0; i < this->rewarditems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewarditems(i));
  }

  // repeated .RewardItem attrRewards = 2;
  total_size += 1 * this->attrrewards_size();
  for (int i = 0; i < this->attrrewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrrewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendTaskReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendTaskReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendTaskReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendTaskReward::MergeFrom(const GCSendTaskReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewarditems_.MergeFrom(from.rewarditems_);
  attrrewards_.MergeFrom(from.attrrewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendTaskReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendTaskReward::CopyFrom(const GCSendTaskReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendTaskReward::IsInitialized() const {

  return true;
}

void GCSendTaskReward::Swap(GCSendTaskReward* other) {
  if (other != this) {
    rewarditems_.Swap(&other->rewarditems_);
    attrrewards_.Swap(&other->attrrewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendTaskReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendTaskReward_descriptor_;
  metadata.reflection = GCSendTaskReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCreatMonsterBack::kSuccessFieldNumber;
const int GCCreatMonsterBack::kTaskIDFieldNumber;
#endif  // !_MSC_VER

GCCreatMonsterBack::GCCreatMonsterBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCreatMonsterBack)
}

void GCCreatMonsterBack::InitAsDefaultInstance() {
}

GCCreatMonsterBack::GCCreatMonsterBack(const GCCreatMonsterBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCreatMonsterBack)
}

void GCCreatMonsterBack::SharedCtor() {
  _cached_size_ = 0;
  success_ = 0;
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCreatMonsterBack::~GCCreatMonsterBack() {
  // @@protoc_insertion_point(destructor:GCCreatMonsterBack)
  SharedDtor();
}

void GCCreatMonsterBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCCreatMonsterBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCreatMonsterBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCreatMonsterBack_descriptor_;
}

const GCCreatMonsterBack& GCCreatMonsterBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

GCCreatMonsterBack* GCCreatMonsterBack::default_instance_ = NULL;

GCCreatMonsterBack* GCCreatMonsterBack::New() const {
  return new GCCreatMonsterBack;
}

void GCCreatMonsterBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCCreatMonsterBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(success_, taskid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCreatMonsterBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCreatMonsterBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_taskID;
        break;
      }

      // optional int32 taskID = 2;
      case 2: {
        if (tag == 16) {
         parse_taskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCreatMonsterBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCreatMonsterBack)
  return false;
#undef DO_
}

void GCCreatMonsterBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCreatMonsterBack)
  // optional int32 success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->success(), output);
  }

  // optional int32 taskID = 2;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCreatMonsterBack)
}

::google::protobuf::uint8* GCCreatMonsterBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCreatMonsterBack)
  // optional int32 success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->success(), target);
  }

  // optional int32 taskID = 2;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCreatMonsterBack)
  return target;
}

int GCCreatMonsterBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }

    // optional int32 taskID = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCreatMonsterBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCreatMonsterBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCreatMonsterBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCreatMonsterBack::MergeFrom(const GCCreatMonsterBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCreatMonsterBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCreatMonsterBack::CopyFrom(const GCCreatMonsterBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCreatMonsterBack::IsInitialized() const {

  return true;
}

void GCCreatMonsterBack::Swap(GCCreatMonsterBack* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCreatMonsterBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCreatMonsterBack_descriptor_;
  metadata.reflection = GCCreatMonsterBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendTaskMonster::kTaskIDFieldNumber;
const int GCSendTaskMonster::kMosnterIDFieldNumber;
#endif  // !_MSC_VER

GCSendTaskMonster::GCSendTaskMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendTaskMonster)
}

void GCSendTaskMonster::InitAsDefaultInstance() {
}

GCSendTaskMonster::GCSendTaskMonster(const GCSendTaskMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendTaskMonster)
}

void GCSendTaskMonster::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  mosnterid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendTaskMonster::~GCSendTaskMonster() {
  // @@protoc_insertion_point(destructor:GCSendTaskMonster)
  SharedDtor();
}

void GCSendTaskMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSendTaskMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendTaskMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendTaskMonster_descriptor_;
}

const GCSendTaskMonster& GCSendTaskMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

GCSendTaskMonster* GCSendTaskMonster::default_instance_ = NULL;

GCSendTaskMonster* GCSendTaskMonster::New() const {
  return new GCSendTaskMonster;
}

void GCSendTaskMonster::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSendTaskMonster*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(taskid_, mosnterid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendTaskMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendTaskMonster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mosnterID;
        break;
      }

      // optional int32 mosnterID = 2;
      case 2: {
        if (tag == 16) {
         parse_mosnterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mosnterid_)));
          set_has_mosnterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendTaskMonster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendTaskMonster)
  return false;
#undef DO_
}

void GCSendTaskMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendTaskMonster)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional int32 mosnterID = 2;
  if (has_mosnterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mosnterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendTaskMonster)
}

::google::protobuf::uint8* GCSendTaskMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendTaskMonster)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // optional int32 mosnterID = 2;
  if (has_mosnterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mosnterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendTaskMonster)
  return target;
}

int GCSendTaskMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

    // optional int32 mosnterID = 2;
    if (has_mosnterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mosnterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendTaskMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendTaskMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendTaskMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendTaskMonster::MergeFrom(const GCSendTaskMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_mosnterid()) {
      set_mosnterid(from.mosnterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendTaskMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendTaskMonster::CopyFrom(const GCSendTaskMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendTaskMonster::IsInitialized() const {

  return true;
}

void GCSendTaskMonster::Swap(GCSendTaskMonster* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(mosnterid_, other->mosnterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendTaskMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendTaskMonster_descriptor_;
  metadata.reflection = GCSendTaskMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCatchCreatProp::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CGCatchCreatProp::CGCatchCreatProp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCatchCreatProp)
}

void CGCatchCreatProp::InitAsDefaultInstance() {
}

CGCatchCreatProp::CGCatchCreatProp(const CGCatchCreatProp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCatchCreatProp)
}

void CGCatchCreatProp::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCatchCreatProp::~CGCatchCreatProp() {
  // @@protoc_insertion_point(destructor:CGCatchCreatProp)
  SharedDtor();
}

void CGCatchCreatProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCatchCreatProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCatchCreatProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCatchCreatProp_descriptor_;
}

const CGCatchCreatProp& CGCatchCreatProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskMessage_2eproto();
  return *default_instance_;
}

CGCatchCreatProp* CGCatchCreatProp::default_instance_ = NULL;

CGCatchCreatProp* CGCatchCreatProp::New() const {
  return new CGCatchCreatProp;
}

void CGCatchCreatProp::Clear() {
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCatchCreatProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCatchCreatProp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCatchCreatProp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCatchCreatProp)
  return false;
#undef DO_
}

void CGCatchCreatProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCatchCreatProp)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCatchCreatProp)
}

::google::protobuf::uint8* CGCatchCreatProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCatchCreatProp)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCatchCreatProp)
  return target;
}

int CGCatchCreatProp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCatchCreatProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCatchCreatProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCatchCreatProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCatchCreatProp::MergeFrom(const CGCatchCreatProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCatchCreatProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCatchCreatProp::CopyFrom(const CGCatchCreatProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCatchCreatProp::IsInitialized() const {

  return true;
}

void CGCatchCreatProp::Swap(CGCatchCreatProp* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCatchCreatProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCatchCreatProp_descriptor_;
  metadata.reflection = CGCatchCreatProp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
