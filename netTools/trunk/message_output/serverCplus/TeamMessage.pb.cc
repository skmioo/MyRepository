// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TeamMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamSampleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamSampleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCreateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCreateTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreashMyTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreashMyTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGOpenTeamView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGOpenTeamView_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCOPenTeamView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCOPenTeamView_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGLeaveTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGLeaveTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCLeaveTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCLeaveTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAddTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAddTeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDelTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDelTeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUpdateTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUpdateTeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGApplyTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGApplyTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCApplyTeamLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCApplyTeamLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAgreeApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAgreeApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGInviteOther_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGInviteOther_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCInviteOther_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCInviteOther_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAgreeInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAgreeInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGKickedOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGKickedOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGTransferCaption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGTransferCaption_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSetTeamAuthority_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSetTeamAuthority_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSetTeamAuthority_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSetTeamAuthority_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSetAutoAgree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSetAutoAgree_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSetAutoAgree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSetAutoAgree_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCallFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCallFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCallFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCallFlow_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMemberFolw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMemberFolw_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCMemberFolw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCMemberFolw_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGQuickTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGQuickTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCQuickTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCQuickTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCFllowQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCFllowQueue_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TeamMessage_2eproto() {
  protobuf_AddDesc_TeamMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TeamMessage.proto");
  GOOGLE_CHECK(file != NULL);
  TeamMember_descriptor_ = file->message_type(0);
  static const int TeamMember_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, fightvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, isfollow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, iconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, changeequipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, sceneid_),
  };
  TeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMember_descriptor_,
      TeamMember::default_instance_,
      TeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMember));
  TeamInfo_descriptor_ = file->message_type(1);
  static const int TeamInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, teamname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, memberinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, captionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, fightvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, minfight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, isfollow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, automate_),
  };
  TeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfo_descriptor_,
      TeamInfo::default_instance_,
      TeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfo));
  TeamSampleInfo_descriptor_ = file->message_type(2);
  static const int TeamSampleInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSampleInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSampleInfo, teamname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSampleInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSampleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSampleInfo, iconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSampleInfo, professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSampleInfo, isnear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSampleInfo, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSampleInfo, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSampleInfo, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSampleInfo, sex_),
  };
  TeamSampleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamSampleInfo_descriptor_,
      TeamSampleInfo::default_instance_,
      TeamSampleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSampleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSampleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamSampleInfo));
  CGCreateTeam_descriptor_ = file->message_type(3);
  static const int CGCreateTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreateTeam, targetid_),
  };
  CGCreateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCreateTeam_descriptor_,
      CGCreateTeam::default_instance_,
      CGCreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCreateTeam));
  GCRefreashMyTeam_descriptor_ = file->message_type(4);
  static const int GCRefreashMyTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreashMyTeam, teaminfo_),
  };
  GCRefreashMyTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreashMyTeam_descriptor_,
      GCRefreashMyTeam::default_instance_,
      GCRefreashMyTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreashMyTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreashMyTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreashMyTeam));
  CGOpenTeamView_descriptor_ = file->message_type(5);
  static const int CGOpenTeamView_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpenTeamView, type_),
  };
  CGOpenTeamView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGOpenTeamView_descriptor_,
      CGOpenTeamView::default_instance_,
      CGOpenTeamView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpenTeamView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpenTeamView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGOpenTeamView));
  GCOPenTeamView_descriptor_ = file->message_type(6);
  static const int GCOPenTeamView_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOPenTeamView, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOPenTeamView, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOPenTeamView, autoagree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOPenTeamView, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOPenTeamView, automate_),
  };
  GCOPenTeamView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCOPenTeamView_descriptor_,
      GCOPenTeamView::default_instance_,
      GCOPenTeamView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOPenTeamView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOPenTeamView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCOPenTeamView));
  CGLeaveTeam_descriptor_ = file->message_type(7);
  static const int CGLeaveTeam_offsets_[1] = {
  };
  CGLeaveTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGLeaveTeam_descriptor_,
      CGLeaveTeam::default_instance_,
      CGLeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLeaveTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLeaveTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGLeaveTeam));
  GCLeaveTeam_descriptor_ = file->message_type(8);
  static const int GCLeaveTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLeaveTeam, isinitiative_),
  };
  GCLeaveTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCLeaveTeam_descriptor_,
      GCLeaveTeam::default_instance_,
      GCLeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLeaveTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLeaveTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCLeaveTeam));
  GCAddTeamMember_descriptor_ = file->message_type(9);
  static const int GCAddTeamMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddTeamMember, member_),
  };
  GCAddTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAddTeamMember_descriptor_,
      GCAddTeamMember::default_instance_,
      GCAddTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAddTeamMember));
  GCDelTeamMember_descriptor_ = file->message_type(10);
  static const int GCDelTeamMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelTeamMember, playerid_),
  };
  GCDelTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDelTeamMember_descriptor_,
      GCDelTeamMember::default_instance_,
      GCDelTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDelTeamMember));
  GCUpdateTeamMember_descriptor_ = file->message_type(11);
  static const int GCUpdateTeamMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateTeamMember, member_),
  };
  GCUpdateTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUpdateTeamMember_descriptor_,
      GCUpdateTeamMember::default_instance_,
      GCUpdateTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUpdateTeamMember));
  CGApplyTeam_descriptor_ = file->message_type(12);
  static const int CGApplyTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGApplyTeam, teamid_),
  };
  CGApplyTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGApplyTeam_descriptor_,
      CGApplyTeam::default_instance_,
      CGApplyTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGApplyTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGApplyTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGApplyTeam));
  GCApplyTeamLeader_descriptor_ = file->message_type(13);
  static const int GCApplyTeamLeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCApplyTeamLeader, applyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCApplyTeamLeader, applyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCApplyTeamLeader, battlenumber_),
  };
  GCApplyTeamLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCApplyTeamLeader_descriptor_,
      GCApplyTeamLeader::default_instance_,
      GCApplyTeamLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCApplyTeamLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCApplyTeamLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCApplyTeamLeader));
  CGAgreeApply_descriptor_ = file->message_type(14);
  static const int CGAgreeApply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAgreeApply, applyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAgreeApply, sts_),
  };
  CGAgreeApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAgreeApply_descriptor_,
      CGAgreeApply::default_instance_,
      CGAgreeApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAgreeApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAgreeApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAgreeApply));
  CGInviteOther_descriptor_ = file->message_type(15);
  static const int CGInviteOther_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGInviteOther, inviteplayerid_),
  };
  CGInviteOther_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGInviteOther_descriptor_,
      CGInviteOther::default_instance_,
      CGInviteOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGInviteOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGInviteOther, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGInviteOther));
  GCInviteOther_descriptor_ = file->message_type(16);
  static const int GCInviteOther_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInviteOther, leaderplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInviteOther, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInviteOther, battlenumber_),
  };
  GCInviteOther_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCInviteOther_descriptor_,
      GCInviteOther::default_instance_,
      GCInviteOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInviteOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInviteOther, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCInviteOther));
  CGAgreeInvite_descriptor_ = file->message_type(17);
  static const int CGAgreeInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAgreeInvite, leaderplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAgreeInvite, type_),
  };
  CGAgreeInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAgreeInvite_descriptor_,
      CGAgreeInvite::default_instance_,
      CGAgreeInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAgreeInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAgreeInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAgreeInvite));
  CGKickedOut_descriptor_ = file->message_type(18);
  static const int CGKickedOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGKickedOut, otherplayerid_),
  };
  CGKickedOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGKickedOut_descriptor_,
      CGKickedOut::default_instance_,
      CGKickedOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGKickedOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGKickedOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGKickedOut));
  CGTransferCaption_descriptor_ = file->message_type(19);
  static const int CGTransferCaption_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTransferCaption, otherplayerid_),
  };
  CGTransferCaption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGTransferCaption_descriptor_,
      CGTransferCaption::default_instance_,
      CGTransferCaption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTransferCaption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTransferCaption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGTransferCaption));
  CGSetTeamAuthority_descriptor_ = file->message_type(20);
  static const int CGSetTeamAuthority_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSetTeamAuthority, minlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSetTeamAuthority, maxlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSetTeamAuthority, minbattlenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSetTeamAuthority, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSetTeamAuthority, autofollw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSetTeamAuthority, autoagree_),
  };
  CGSetTeamAuthority_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSetTeamAuthority_descriptor_,
      CGSetTeamAuthority::default_instance_,
      CGSetTeamAuthority_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSetTeamAuthority, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSetTeamAuthority, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSetTeamAuthority));
  GCSetTeamAuthority_descriptor_ = file->message_type(21);
  static const int GCSetTeamAuthority_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSetTeamAuthority, minlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSetTeamAuthority, maxlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSetTeamAuthority, minbattlenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSetTeamAuthority, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSetTeamAuthority, autofollw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSetTeamAuthority, autoagree_),
  };
  GCSetTeamAuthority_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSetTeamAuthority_descriptor_,
      GCSetTeamAuthority::default_instance_,
      GCSetTeamAuthority_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSetTeamAuthority, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSetTeamAuthority, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSetTeamAuthority));
  CGSetAutoAgree_descriptor_ = file->message_type(22);
  static const int CGSetAutoAgree_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSetAutoAgree, autoagree_),
  };
  CGSetAutoAgree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSetAutoAgree_descriptor_,
      CGSetAutoAgree::default_instance_,
      CGSetAutoAgree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSetAutoAgree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSetAutoAgree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSetAutoAgree));
  GCSetAutoAgree_descriptor_ = file->message_type(23);
  static const int GCSetAutoAgree_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSetAutoAgree, autoagree_),
  };
  GCSetAutoAgree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSetAutoAgree_descriptor_,
      GCSetAutoAgree::default_instance_,
      GCSetAutoAgree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSetAutoAgree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSetAutoAgree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSetAutoAgree));
  CGCallFlow_descriptor_ = file->message_type(24);
  static const int CGCallFlow_offsets_[1] = {
  };
  CGCallFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCallFlow_descriptor_,
      CGCallFlow::default_instance_,
      CGCallFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCallFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCallFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCallFlow));
  GCCallFlow_descriptor_ = file->message_type(25);
  static const int GCCallFlow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCallFlow, playername_),
  };
  GCCallFlow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCallFlow_descriptor_,
      GCCallFlow::default_instance_,
      GCCallFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCallFlow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCallFlow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCallFlow));
  CGMemberResponse_descriptor_ = file->message_type(26);
  static const int CGMemberResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMemberResponse, res_),
  };
  CGMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMemberResponse_descriptor_,
      CGMemberResponse::default_instance_,
      CGMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMemberResponse));
  CGMemberFolw_descriptor_ = file->message_type(27);
  static const int CGMemberFolw_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMemberFolw, autofolw_),
  };
  CGMemberFolw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMemberFolw_descriptor_,
      CGMemberFolw::default_instance_,
      CGMemberFolw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMemberFolw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMemberFolw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMemberFolw));
  GCMemberFolw_descriptor_ = file->message_type(28);
  static const int GCMemberFolw_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMemberFolw, autofolw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMemberFolw, playerid_),
  };
  GCMemberFolw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCMemberFolw_descriptor_,
      GCMemberFolw::default_instance_,
      GCMemberFolw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMemberFolw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMemberFolw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCMemberFolw));
  CGQuickTeam_descriptor_ = file->message_type(29);
  static const int CGQuickTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGQuickTeam, autoquick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGQuickTeam, targetid_),
  };
  CGQuickTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGQuickTeam_descriptor_,
      CGQuickTeam::default_instance_,
      CGQuickTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGQuickTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGQuickTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGQuickTeam));
  GCQuickTeam_descriptor_ = file->message_type(30);
  static const int GCQuickTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQuickTeam, autoquick_),
  };
  GCQuickTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCQuickTeam_descriptor_,
      GCQuickTeam::default_instance_,
      GCQuickTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQuickTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQuickTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCQuickTeam));
  GCFllowQueue_descriptor_ = file->message_type(31);
  static const int GCFllowQueue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFllowQueue, fllowids_),
  };
  GCFllowQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCFllowQueue_descriptor_,
      GCFllowQueue::default_instance_,
      GCFllowQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFllowQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFllowQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCFllowQueue));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TeamMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMember_descriptor_, &TeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfo_descriptor_, &TeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamSampleInfo_descriptor_, &TeamSampleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCreateTeam_descriptor_, &CGCreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreashMyTeam_descriptor_, &GCRefreashMyTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGOpenTeamView_descriptor_, &CGOpenTeamView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCOPenTeamView_descriptor_, &GCOPenTeamView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGLeaveTeam_descriptor_, &CGLeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCLeaveTeam_descriptor_, &GCLeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAddTeamMember_descriptor_, &GCAddTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDelTeamMember_descriptor_, &GCDelTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUpdateTeamMember_descriptor_, &GCUpdateTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGApplyTeam_descriptor_, &CGApplyTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCApplyTeamLeader_descriptor_, &GCApplyTeamLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAgreeApply_descriptor_, &CGAgreeApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGInviteOther_descriptor_, &CGInviteOther::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCInviteOther_descriptor_, &GCInviteOther::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAgreeInvite_descriptor_, &CGAgreeInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGKickedOut_descriptor_, &CGKickedOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGTransferCaption_descriptor_, &CGTransferCaption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSetTeamAuthority_descriptor_, &CGSetTeamAuthority::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSetTeamAuthority_descriptor_, &GCSetTeamAuthority::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSetAutoAgree_descriptor_, &CGSetAutoAgree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSetAutoAgree_descriptor_, &GCSetAutoAgree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCallFlow_descriptor_, &CGCallFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCallFlow_descriptor_, &GCCallFlow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMemberResponse_descriptor_, &CGMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMemberFolw_descriptor_, &CGMemberFolw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCMemberFolw_descriptor_, &GCMemberFolw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGQuickTeam_descriptor_, &CGQuickTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCQuickTeam_descriptor_, &GCQuickTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCFllowQueue_descriptor_, &GCFllowQueue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TeamMessage_2eproto() {
  delete TeamMember::default_instance_;
  delete TeamMember_reflection_;
  delete TeamInfo::default_instance_;
  delete TeamInfo_reflection_;
  delete TeamSampleInfo::default_instance_;
  delete TeamSampleInfo_reflection_;
  delete CGCreateTeam::default_instance_;
  delete CGCreateTeam_reflection_;
  delete GCRefreashMyTeam::default_instance_;
  delete GCRefreashMyTeam_reflection_;
  delete CGOpenTeamView::default_instance_;
  delete CGOpenTeamView_reflection_;
  delete GCOPenTeamView::default_instance_;
  delete GCOPenTeamView_reflection_;
  delete CGLeaveTeam::default_instance_;
  delete CGLeaveTeam_reflection_;
  delete GCLeaveTeam::default_instance_;
  delete GCLeaveTeam_reflection_;
  delete GCAddTeamMember::default_instance_;
  delete GCAddTeamMember_reflection_;
  delete GCDelTeamMember::default_instance_;
  delete GCDelTeamMember_reflection_;
  delete GCUpdateTeamMember::default_instance_;
  delete GCUpdateTeamMember_reflection_;
  delete CGApplyTeam::default_instance_;
  delete CGApplyTeam_reflection_;
  delete GCApplyTeamLeader::default_instance_;
  delete GCApplyTeamLeader_reflection_;
  delete CGAgreeApply::default_instance_;
  delete CGAgreeApply_reflection_;
  delete CGInviteOther::default_instance_;
  delete CGInviteOther_reflection_;
  delete GCInviteOther::default_instance_;
  delete GCInviteOther_reflection_;
  delete CGAgreeInvite::default_instance_;
  delete CGAgreeInvite_reflection_;
  delete CGKickedOut::default_instance_;
  delete CGKickedOut_reflection_;
  delete CGTransferCaption::default_instance_;
  delete CGTransferCaption_reflection_;
  delete CGSetTeamAuthority::default_instance_;
  delete CGSetTeamAuthority_reflection_;
  delete GCSetTeamAuthority::default_instance_;
  delete GCSetTeamAuthority_reflection_;
  delete CGSetAutoAgree::default_instance_;
  delete CGSetAutoAgree_reflection_;
  delete GCSetAutoAgree::default_instance_;
  delete GCSetAutoAgree_reflection_;
  delete CGCallFlow::default_instance_;
  delete CGCallFlow_reflection_;
  delete GCCallFlow::default_instance_;
  delete GCCallFlow_reflection_;
  delete CGMemberResponse::default_instance_;
  delete CGMemberResponse_reflection_;
  delete CGMemberFolw::default_instance_;
  delete CGMemberFolw_reflection_;
  delete GCMemberFolw::default_instance_;
  delete GCMemberFolw_reflection_;
  delete CGQuickTeam::default_instance_;
  delete CGQuickTeam_reflection_;
  delete GCQuickTeam::default_instance_;
  delete GCQuickTeam_reflection_;
  delete GCFllowQueue::default_instance_;
  delete GCFllowQueue_reflection_;
}

void protobuf_AddDesc_TeamMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021TeamMessage.proto\032\022InnerMessage.proto\""
    "\252\002\n\nTeamMember\022\020\n\010playerID\030\001 \001(\003\022\020\n\010nick"
    "Name\030\002 \001(\t\022\r\n\005level\030\003 \001(\005\022\022\n\nfightValue\030"
    "\004 \001(\005\022\016\n\006onLine\030\005 \001(\005\022\024\n\014professionId\030\006 "
    "\001(\005\022\013\n\003sex\030\007 \001(\005\022\020\n\010isFollow\030\010 \001(\005\022\016\n\006te"
    "amID\030\t \001(\003\022\n\n\002hp\030\n \001(\005\022\r\n\005maxHp\030\013 \001(\005\022\016\n"
    "\006iconid\030\014 \001(\005\022)\n\017changeEquipInfo\030\r \001(\0132\020"
    ".ChangeEquipInfo\022\031\n\003pos\030\016 \001(\0132\014.Vector3I"
    "nfo\022\017\n\007sceneID\030\017 \001(\005\"\340\001\n\010TeamInfo\022\016\n\006tea"
    "mID\030\001 \001(\003\022\020\n\010teamName\030\002 \001(\t\022\037\n\nmemberInf"
    "o\030\003 \003(\0132\013.TeamMember\022\021\n\tcaptionID\030\004 \001(\003\022"
    "\020\n\010targetID\030\005 \001(\005\022\022\n\nfightValue\030\006 \001(\005\022\020\n"
    "\010minFight\030\007 \001(\005\022\020\n\010maxLevel\030\010 \001(\005\022\020\n\010min"
    "Level\030\t \001(\005\022\020\n\010isFollow\030\n \001(\005\022\020\n\010autoMat"
    "e\030\013 \001(\005\"\307\001\n\016TeamSampleInfo\022\016\n\006teamID\030\001 \001"
    "(\003\022\020\n\010teamName\030\002 \001(\t\022\013\n\003num\030\003 \001(\005\022\r\n\005lev"
    "el\030\004 \001(\005\022\016\n\006iconid\030\005 \001(\005\022\024\n\014professionId"
    "\030\006 \001(\005\022\016\n\006isNear\030\007 \001(\005\022\020\n\010targetID\030\010 \001(\005"
    "\022\020\n\010maxLevel\030\t \001(\005\022\020\n\010minLevel\030\n \001(\005\022\013\n\003"
    "sex\030\013 \001(\005\" \n\014CGCreateTeam\022\020\n\010targetID\030\001 "
    "\001(\005\"/\n\020GCRefreashMyTeam\022\033\n\010teamInfo\030\001 \001("
    "\0132\t.TeamInfo\"\036\n\016CGOpenTeamView\022\014\n\004type\030\001"
    " \001(\005\"\201\001\n\016GCOPenTeamView\022\034\n\007members\030\001 \003(\013"
    "2\013.TeamMember\022\036\n\005teams\030\002 \003(\0132\017.TeamSampl"
    "eInfo\022\021\n\tautoAgree\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\022\020"
    "\n\010autoMate\030\005 \001(\005\"\r\n\013CGLeaveTeam\"#\n\013GCLea"
    "veTeam\022\024\n\014isInitiative\030\001 \001(\005\".\n\017GCAddTea"
    "mMember\022\033\n\006member\030\001 \001(\0132\013.TeamMember\"#\n\017"
    "GCDelTeamMember\022\020\n\010playerID\030\001 \001(\003\"1\n\022GCU"
    "pdateTeamMember\022\033\n\006member\030\001 \003(\0132\013.TeamMe"
    "mber\"\035\n\013CGApplyTeam\022\016\n\006teamID\030\001 \001(\003\"M\n\021G"
    "CApplyTeamLeader\022\017\n\007applyId\030\001 \001(\003\022\021\n\tapp"
    "lyName\030\002 \001(\t\022\024\n\014battleNumber\030\003 \001(\t\",\n\014CG"
    "AgreeApply\022\017\n\007applyId\030\001 \001(\003\022\013\n\003sts\030\002 \001(\005"
    "\"\'\n\rCGInviteOther\022\026\n\016invitePlayerId\030\001 \001("
    "\003\"Q\n\rGCInviteOther\022\026\n\016leaderPlayerId\030\001 \001"
    "(\003\022\022\n\nleaderName\030\002 \001(\t\022\024\n\014battleNumber\030\003"
    " \001(\t\"5\n\rCGAgreeInvite\022\026\n\016leaderPlayerId\030"
    "\001 \001(\003\022\014\n\004type\030\002 \001(\005\"$\n\013CGKickedOut\022\025\n\rot"
    "herPlayerId\030\001 \001(\003\"*\n\021CGTransferCaption\022\025"
    "\n\rotherPlayerId\030\001 \001(\003\"\203\001\n\022CGSetTeamAutho"
    "rity\022\r\n\005minLv\030\001 \001(\005\022\r\n\005maxLv\030\002 \001(\005\022\027\n\017mi"
    "nBattleNumber\030\003 \001(\005\022\020\n\010targetID\030\004 \001(\005\022\021\n"
    "\tautoFollw\030\005 \001(\005\022\021\n\tautoAgree\030\006 \001(\005\"\203\001\n\022"
    "GCSetTeamAuthority\022\r\n\005minLv\030\001 \001(\005\022\r\n\005max"
    "Lv\030\002 \001(\005\022\027\n\017minBattleNumber\030\003 \001(\005\022\020\n\010tar"
    "getID\030\004 \001(\005\022\021\n\tautoFollw\030\005 \001(\005\022\021\n\tautoAg"
    "ree\030\006 \001(\005\"#\n\016CGSetAutoAgree\022\021\n\tautoAgree"
    "\030\001 \001(\005\"#\n\016GCSetAutoAgree\022\021\n\tautoAgree\030\001 "
    "\001(\005\"\014\n\nCGCallFlow\" \n\nGCCallFlow\022\022\n\nplaye"
    "rName\030\001 \001(\t\"\037\n\020CGMemberResponse\022\013\n\003res\030\001"
    " \001(\005\" \n\014CGMemberFolw\022\020\n\010autoFolw\030\001 \001(\005\"2"
    "\n\014GCMemberFolw\022\020\n\010autoFolw\030\001 \001(\005\022\020\n\010play"
    "erId\030\002 \001(\003\"2\n\013CGQuickTeam\022\021\n\tautoQuick\030\001"
    " \001(\005\022\020\n\010targetID\030\002 \001(\005\" \n\013GCQuickTeam\022\021\n"
    "\tautoQuick\030\001 \001(\005\" \n\014GCFllowQueue\022\020\n\010fllo"
    "wIds\030\001 \003(\003B\031\n\027com.mile.common.message", 2277);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TeamMessage.proto", &protobuf_RegisterTypes);
  TeamMember::default_instance_ = new TeamMember();
  TeamInfo::default_instance_ = new TeamInfo();
  TeamSampleInfo::default_instance_ = new TeamSampleInfo();
  CGCreateTeam::default_instance_ = new CGCreateTeam();
  GCRefreashMyTeam::default_instance_ = new GCRefreashMyTeam();
  CGOpenTeamView::default_instance_ = new CGOpenTeamView();
  GCOPenTeamView::default_instance_ = new GCOPenTeamView();
  CGLeaveTeam::default_instance_ = new CGLeaveTeam();
  GCLeaveTeam::default_instance_ = new GCLeaveTeam();
  GCAddTeamMember::default_instance_ = new GCAddTeamMember();
  GCDelTeamMember::default_instance_ = new GCDelTeamMember();
  GCUpdateTeamMember::default_instance_ = new GCUpdateTeamMember();
  CGApplyTeam::default_instance_ = new CGApplyTeam();
  GCApplyTeamLeader::default_instance_ = new GCApplyTeamLeader();
  CGAgreeApply::default_instance_ = new CGAgreeApply();
  CGInviteOther::default_instance_ = new CGInviteOther();
  GCInviteOther::default_instance_ = new GCInviteOther();
  CGAgreeInvite::default_instance_ = new CGAgreeInvite();
  CGKickedOut::default_instance_ = new CGKickedOut();
  CGTransferCaption::default_instance_ = new CGTransferCaption();
  CGSetTeamAuthority::default_instance_ = new CGSetTeamAuthority();
  GCSetTeamAuthority::default_instance_ = new GCSetTeamAuthority();
  CGSetAutoAgree::default_instance_ = new CGSetAutoAgree();
  GCSetAutoAgree::default_instance_ = new GCSetAutoAgree();
  CGCallFlow::default_instance_ = new CGCallFlow();
  GCCallFlow::default_instance_ = new GCCallFlow();
  CGMemberResponse::default_instance_ = new CGMemberResponse();
  CGMemberFolw::default_instance_ = new CGMemberFolw();
  GCMemberFolw::default_instance_ = new GCMemberFolw();
  CGQuickTeam::default_instance_ = new CGQuickTeam();
  GCQuickTeam::default_instance_ = new GCQuickTeam();
  GCFllowQueue::default_instance_ = new GCFllowQueue();
  TeamMember::default_instance_->InitAsDefaultInstance();
  TeamInfo::default_instance_->InitAsDefaultInstance();
  TeamSampleInfo::default_instance_->InitAsDefaultInstance();
  CGCreateTeam::default_instance_->InitAsDefaultInstance();
  GCRefreashMyTeam::default_instance_->InitAsDefaultInstance();
  CGOpenTeamView::default_instance_->InitAsDefaultInstance();
  GCOPenTeamView::default_instance_->InitAsDefaultInstance();
  CGLeaveTeam::default_instance_->InitAsDefaultInstance();
  GCLeaveTeam::default_instance_->InitAsDefaultInstance();
  GCAddTeamMember::default_instance_->InitAsDefaultInstance();
  GCDelTeamMember::default_instance_->InitAsDefaultInstance();
  GCUpdateTeamMember::default_instance_->InitAsDefaultInstance();
  CGApplyTeam::default_instance_->InitAsDefaultInstance();
  GCApplyTeamLeader::default_instance_->InitAsDefaultInstance();
  CGAgreeApply::default_instance_->InitAsDefaultInstance();
  CGInviteOther::default_instance_->InitAsDefaultInstance();
  GCInviteOther::default_instance_->InitAsDefaultInstance();
  CGAgreeInvite::default_instance_->InitAsDefaultInstance();
  CGKickedOut::default_instance_->InitAsDefaultInstance();
  CGTransferCaption::default_instance_->InitAsDefaultInstance();
  CGSetTeamAuthority::default_instance_->InitAsDefaultInstance();
  GCSetTeamAuthority::default_instance_->InitAsDefaultInstance();
  CGSetAutoAgree::default_instance_->InitAsDefaultInstance();
  GCSetAutoAgree::default_instance_->InitAsDefaultInstance();
  CGCallFlow::default_instance_->InitAsDefaultInstance();
  GCCallFlow::default_instance_->InitAsDefaultInstance();
  CGMemberResponse::default_instance_->InitAsDefaultInstance();
  CGMemberFolw::default_instance_->InitAsDefaultInstance();
  GCMemberFolw::default_instance_->InitAsDefaultInstance();
  CGQuickTeam::default_instance_->InitAsDefaultInstance();
  GCQuickTeam::default_instance_->InitAsDefaultInstance();
  GCFllowQueue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TeamMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TeamMessage_2eproto {
  StaticDescriptorInitializer_TeamMessage_2eproto() {
    protobuf_AddDesc_TeamMessage_2eproto();
  }
} static_descriptor_initializer_TeamMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TeamMember::kPlayerIDFieldNumber;
const int TeamMember::kNickNameFieldNumber;
const int TeamMember::kLevelFieldNumber;
const int TeamMember::kFightValueFieldNumber;
const int TeamMember::kOnLineFieldNumber;
const int TeamMember::kProfessionIdFieldNumber;
const int TeamMember::kSexFieldNumber;
const int TeamMember::kIsFollowFieldNumber;
const int TeamMember::kTeamIDFieldNumber;
const int TeamMember::kHpFieldNumber;
const int TeamMember::kMaxHpFieldNumber;
const int TeamMember::kIconidFieldNumber;
const int TeamMember::kChangeEquipInfoFieldNumber;
const int TeamMember::kPosFieldNumber;
const int TeamMember::kSceneIDFieldNumber;
#endif  // !_MSC_VER

TeamMember::TeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamMember)
}

void TeamMember::InitAsDefaultInstance() {
  changeequipinfo_ = const_cast< ::ChangeEquipInfo*>(&::ChangeEquipInfo::default_instance());
  pos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

TeamMember::TeamMember(const TeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TeamMember)
}

void TeamMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  fightvalue_ = 0;
  online_ = 0;
  professionid_ = 0;
  sex_ = 0;
  isfollow_ = 0;
  teamid_ = GOOGLE_LONGLONG(0);
  hp_ = 0;
  maxhp_ = 0;
  iconid_ = 0;
  changeequipinfo_ = NULL;
  pos_ = NULL;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMember::~TeamMember() {
  // @@protoc_insertion_point(destructor:TeamMember)
  SharedDtor();
}

void TeamMember::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
    delete changeequipinfo_;
    delete pos_;
  }
}

void TeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMember_descriptor_;
}

const TeamMember& TeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

TeamMember* TeamMember::default_instance_ = NULL;

TeamMember* TeamMember::New() const {
  return new TeamMember;
}

void TeamMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(level_, isfollow_);
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(teamid_, maxhp_);
    ZR_(iconid_, sceneid_);
    if (has_changeequipinfo()) {
      if (changeequipinfo_ != NULL) changeequipinfo_->::ChangeEquipInfo::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3Info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // optional string nickName = 2;
      case 2: {
        if (tag == 18) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fightValue;
        break;
      }

      // optional int32 fightValue = 4;
      case 4: {
        if (tag == 32) {
         parse_fightValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightvalue_)));
          set_has_fightvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_onLine;
        break;
      }

      // optional int32 onLine = 5;
      case 5: {
        if (tag == 40) {
         parse_onLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_professionId;
        break;
      }

      // optional int32 professionId = 6;
      case 6: {
        if (tag == 48) {
         parse_professionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionid_)));
          set_has_professionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional int32 sex = 7;
      case 7: {
        if (tag == 56) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_isFollow;
        break;
      }

      // optional int32 isFollow = 8;
      case 8: {
        if (tag == 64) {
         parse_isFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfollow_)));
          set_has_isfollow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_teamID;
        break;
      }

      // optional int64 teamID = 9;
      case 9: {
        if (tag == 72) {
         parse_teamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_hp;
        break;
      }

      // optional int32 hp = 10;
      case 10: {
        if (tag == 80) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_maxHp;
        break;
      }

      // optional int32 maxHp = 11;
      case 11: {
        if (tag == 88) {
         parse_maxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_iconid;
        break;
      }

      // optional int32 iconid = 12;
      case 12: {
        if (tag == 96) {
         parse_iconid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_changeEquipInfo;
        break;
      }

      // optional .ChangeEquipInfo changeEquipInfo = 13;
      case 13: {
        if (tag == 106) {
         parse_changeEquipInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changeequipinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_pos;
        break;
      }

      // optional .Vector3Info pos = 14;
      case 14: {
        if (tag == 114) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_sceneID;
        break;
      }

      // optional int32 sceneID = 15;
      case 15: {
        if (tag == 120) {
         parse_sceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamMember)
  return false;
#undef DO_
}

void TeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamMember)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 fightValue = 4;
  if (has_fightvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fightvalue(), output);
  }

  // optional int32 onLine = 5;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->online(), output);
  }

  // optional int32 professionId = 6;
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->professionid(), output);
  }

  // optional int32 sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sex(), output);
  }

  // optional int32 isFollow = 8;
  if (has_isfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->isfollow(), output);
  }

  // optional int64 teamID = 9;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->teamid(), output);
  }

  // optional int32 hp = 10;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hp(), output);
  }

  // optional int32 maxHp = 11;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->maxhp(), output);
  }

  // optional int32 iconid = 12;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->iconid(), output);
  }

  // optional .ChangeEquipInfo changeEquipInfo = 13;
  if (has_changeequipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->changeequipinfo(), output);
  }

  // optional .Vector3Info pos = 14;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->pos(), output);
  }

  // optional int32 sceneID = 15;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamMember)
}

::google::protobuf::uint8* TeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamMember)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 fightValue = 4;
  if (has_fightvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fightvalue(), target);
  }

  // optional int32 onLine = 5;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->online(), target);
  }

  // optional int32 professionId = 6;
  if (has_professionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->professionid(), target);
  }

  // optional int32 sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sex(), target);
  }

  // optional int32 isFollow = 8;
  if (has_isfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->isfollow(), target);
  }

  // optional int64 teamID = 9;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->teamid(), target);
  }

  // optional int32 hp = 10;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hp(), target);
  }

  // optional int32 maxHp = 11;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->maxhp(), target);
  }

  // optional int32 iconid = 12;
  if (has_iconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->iconid(), target);
  }

  // optional .ChangeEquipInfo changeEquipInfo = 13;
  if (has_changeequipinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->changeequipinfo(), target);
  }

  // optional .Vector3Info pos = 14;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->pos(), target);
  }

  // optional int32 sceneID = 15;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamMember)
  return target;
}

int TeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 fightValue = 4;
    if (has_fightvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightvalue());
    }

    // optional int32 onLine = 5;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

    // optional int32 professionId = 6;
    if (has_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionid());
    }

    // optional int32 sex = 7;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 isFollow = 8;
    if (has_isfollow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfollow());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 teamID = 9;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

    // optional int32 hp = 10;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 maxHp = 11;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional int32 iconid = 12;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iconid());
    }

    // optional .ChangeEquipInfo changeEquipInfo = 13;
    if (has_changeequipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changeequipinfo());
    }

    // optional .Vector3Info pos = 14;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional int32 sceneID = 15;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMember::MergeFrom(const TeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fightvalue()) {
      set_fightvalue(from.fightvalue());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_isfollow()) {
      set_isfollow(from.isfollow());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
    if (from.has_changeequipinfo()) {
      mutable_changeequipinfo()->::ChangeEquipInfo::MergeFrom(from.changeequipinfo());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3Info::MergeFrom(from.pos());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMember::CopyFrom(const TeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMember::IsInitialized() const {

  return true;
}

void TeamMember::Swap(TeamMember* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(nickname_, other->nickname_);
    std::swap(level_, other->level_);
    std::swap(fightvalue_, other->fightvalue_);
    std::swap(online_, other->online_);
    std::swap(professionid_, other->professionid_);
    std::swap(sex_, other->sex_);
    std::swap(isfollow_, other->isfollow_);
    std::swap(teamid_, other->teamid_);
    std::swap(hp_, other->hp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(iconid_, other->iconid_);
    std::swap(changeequipinfo_, other->changeequipinfo_);
    std::swap(pos_, other->pos_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMember_descriptor_;
  metadata.reflection = TeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfo::kTeamIDFieldNumber;
const int TeamInfo::kTeamNameFieldNumber;
const int TeamInfo::kMemberInfoFieldNumber;
const int TeamInfo::kCaptionIDFieldNumber;
const int TeamInfo::kTargetIDFieldNumber;
const int TeamInfo::kFightValueFieldNumber;
const int TeamInfo::kMinFightFieldNumber;
const int TeamInfo::kMaxLevelFieldNumber;
const int TeamInfo::kMinLevelFieldNumber;
const int TeamInfo::kIsFollowFieldNumber;
const int TeamInfo::kAutoMateFieldNumber;
#endif  // !_MSC_VER

TeamInfo::TeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamInfo)
}

void TeamInfo::InitAsDefaultInstance() {
}

TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TeamInfo)
}

void TeamInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  teamid_ = GOOGLE_LONGLONG(0);
  teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captionid_ = GOOGLE_LONGLONG(0);
  targetid_ = 0;
  fightvalue_ = 0;
  minfight_ = 0;
  maxlevel_ = 0;
  minlevel_ = 0;
  isfollow_ = 0;
  automate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfo::~TeamInfo() {
  // @@protoc_insertion_point(destructor:TeamInfo)
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teamname_;
  }
  if (this != default_instance_) {
  }
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfo_descriptor_;
}

const TeamInfo& TeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

TeamInfo* TeamInfo::default_instance_ = NULL;

TeamInfo* TeamInfo::New() const {
  return new TeamInfo;
}

void TeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(captionid_, maxlevel_);
    teamid_ = GOOGLE_LONGLONG(0);
    if (has_teamname()) {
      if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        teamname_->clear();
      }
    }
  }
  ZR_(minlevel_, automate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  memberinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 teamID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teamName;
        break;
      }

      // optional string teamName = 2;
      case 2: {
        if (tag == 18) {
         parse_teamName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamname().data(), this->teamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "teamname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_memberInfo;
        break;
      }

      // repeated .TeamMember memberInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_memberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_memberInfo;
        if (input->ExpectTag(32)) goto parse_captionID;
        break;
      }

      // optional int64 captionID = 4;
      case 4: {
        if (tag == 32) {
         parse_captionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &captionid_)));
          set_has_captionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 5;
      case 5: {
        if (tag == 40) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fightValue;
        break;
      }

      // optional int32 fightValue = 6;
      case 6: {
        if (tag == 48) {
         parse_fightValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightvalue_)));
          set_has_fightvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_minFight;
        break;
      }

      // optional int32 minFight = 7;
      case 7: {
        if (tag == 56) {
         parse_minFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minfight_)));
          set_has_minfight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_maxLevel;
        break;
      }

      // optional int32 maxLevel = 8;
      case 8: {
        if (tag == 64) {
         parse_maxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlevel_)));
          set_has_maxlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_minLevel;
        break;
      }

      // optional int32 minLevel = 9;
      case 9: {
        if (tag == 72) {
         parse_minLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlevel_)));
          set_has_minlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_isFollow;
        break;
      }

      // optional int32 isFollow = 10;
      case 10: {
        if (tag == 80) {
         parse_isFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfollow_)));
          set_has_isfollow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_autoMate;
        break;
      }

      // optional int32 autoMate = 11;
      case 11: {
        if (tag == 88) {
         parse_autoMate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &automate_)));
          set_has_automate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamInfo)
  return false;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamInfo)
  // optional int64 teamID = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->teamid(), output);
  }

  // optional string teamName = 2;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->teamname(), output);
  }

  // repeated .TeamMember memberInfo = 3;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->memberinfo(i), output);
  }

  // optional int64 captionID = 4;
  if (has_captionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->captionid(), output);
  }

  // optional int32 targetID = 5;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->targetid(), output);
  }

  // optional int32 fightValue = 6;
  if (has_fightvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fightvalue(), output);
  }

  // optional int32 minFight = 7;
  if (has_minfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->minfight(), output);
  }

  // optional int32 maxLevel = 8;
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxlevel(), output);
  }

  // optional int32 minLevel = 9;
  if (has_minlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->minlevel(), output);
  }

  // optional int32 isFollow = 10;
  if (has_isfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->isfollow(), output);
  }

  // optional int32 autoMate = 11;
  if (has_automate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->automate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamInfo)
}

::google::protobuf::uint8* TeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamInfo)
  // optional int64 teamID = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->teamid(), target);
  }

  // optional string teamName = 2;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->teamname(), target);
  }

  // repeated .TeamMember memberInfo = 3;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->memberinfo(i), target);
  }

  // optional int64 captionID = 4;
  if (has_captionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->captionid(), target);
  }

  // optional int32 targetID = 5;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->targetid(), target);
  }

  // optional int32 fightValue = 6;
  if (has_fightvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fightvalue(), target);
  }

  // optional int32 minFight = 7;
  if (has_minfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->minfight(), target);
  }

  // optional int32 maxLevel = 8;
  if (has_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxlevel(), target);
  }

  // optional int32 minLevel = 9;
  if (has_minlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->minlevel(), target);
  }

  // optional int32 isFollow = 10;
  if (has_isfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->isfollow(), target);
  }

  // optional int32 autoMate = 11;
  if (has_automate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->automate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamInfo)
  return target;
}

int TeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 teamID = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

    // optional string teamName = 2;
    if (has_teamname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamname());
    }

    // optional int64 captionID = 4;
    if (has_captionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->captionid());
    }

    // optional int32 targetID = 5;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // optional int32 fightValue = 6;
    if (has_fightvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightvalue());
    }

    // optional int32 minFight = 7;
    if (has_minfight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minfight());
    }

    // optional int32 maxLevel = 8;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 minLevel = 9;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minlevel());
    }

    // optional int32 isFollow = 10;
    if (has_isfollow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfollow());
    }

    // optional int32 autoMate = 11;
    if (has_automate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->automate());
    }

  }
  // repeated .TeamMember memberInfo = 3;
  total_size += 1 * this->memberinfo_size();
  for (int i = 0; i < this->memberinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberinfo_.MergeFrom(from.memberinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamname()) {
      set_teamname(from.teamname());
    }
    if (from.has_captionid()) {
      set_captionid(from.captionid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_fightvalue()) {
      set_fightvalue(from.fightvalue());
    }
    if (from.has_minfight()) {
      set_minfight(from.minfight());
    }
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_minlevel()) {
      set_minlevel(from.minlevel());
    }
    if (from.has_isfollow()) {
      set_isfollow(from.isfollow());
    }
    if (from.has_automate()) {
      set_automate(from.automate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {

  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(teamname_, other->teamname_);
    memberinfo_.Swap(&other->memberinfo_);
    std::swap(captionid_, other->captionid_);
    std::swap(targetid_, other->targetid_);
    std::swap(fightvalue_, other->fightvalue_);
    std::swap(minfight_, other->minfight_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(isfollow_, other->isfollow_);
    std::swap(automate_, other->automate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfo_descriptor_;
  metadata.reflection = TeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamSampleInfo::kTeamIDFieldNumber;
const int TeamSampleInfo::kTeamNameFieldNumber;
const int TeamSampleInfo::kNumFieldNumber;
const int TeamSampleInfo::kLevelFieldNumber;
const int TeamSampleInfo::kIconidFieldNumber;
const int TeamSampleInfo::kProfessionIdFieldNumber;
const int TeamSampleInfo::kIsNearFieldNumber;
const int TeamSampleInfo::kTargetIDFieldNumber;
const int TeamSampleInfo::kMaxLevelFieldNumber;
const int TeamSampleInfo::kMinLevelFieldNumber;
const int TeamSampleInfo::kSexFieldNumber;
#endif  // !_MSC_VER

TeamSampleInfo::TeamSampleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamSampleInfo)
}

void TeamSampleInfo::InitAsDefaultInstance() {
}

TeamSampleInfo::TeamSampleInfo(const TeamSampleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TeamSampleInfo)
}

void TeamSampleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  teamid_ = GOOGLE_LONGLONG(0);
  teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0;
  level_ = 0;
  iconid_ = 0;
  professionid_ = 0;
  isnear_ = 0;
  targetid_ = 0;
  maxlevel_ = 0;
  minlevel_ = 0;
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamSampleInfo::~TeamSampleInfo() {
  // @@protoc_insertion_point(destructor:TeamSampleInfo)
  SharedDtor();
}

void TeamSampleInfo::SharedDtor() {
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teamname_;
  }
  if (this != default_instance_) {
  }
}

void TeamSampleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamSampleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamSampleInfo_descriptor_;
}

const TeamSampleInfo& TeamSampleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

TeamSampleInfo* TeamSampleInfo::default_instance_ = NULL;

TeamSampleInfo* TeamSampleInfo::New() const {
  return new TeamSampleInfo;
}

void TeamSampleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamSampleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(num_, targetid_);
    teamid_ = GOOGLE_LONGLONG(0);
    if (has_teamname()) {
      if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        teamname_->clear();
      }
    }
  }
  ZR_(maxlevel_, sex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamSampleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamSampleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 teamID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teamName;
        break;
      }

      // optional string teamName = 2;
      case 2: {
        if (tag == 18) {
         parse_teamName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamname().data(), this->teamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "teamname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iconid;
        break;
      }

      // optional int32 iconid = 5;
      case 5: {
        if (tag == 40) {
         parse_iconid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_professionId;
        break;
      }

      // optional int32 professionId = 6;
      case 6: {
        if (tag == 48) {
         parse_professionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionid_)));
          set_has_professionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isNear;
        break;
      }

      // optional int32 isNear = 7;
      case 7: {
        if (tag == 56) {
         parse_isNear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isnear_)));
          set_has_isnear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 8;
      case 8: {
        if (tag == 64) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_maxLevel;
        break;
      }

      // optional int32 maxLevel = 9;
      case 9: {
        if (tag == 72) {
         parse_maxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlevel_)));
          set_has_maxlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_minLevel;
        break;
      }

      // optional int32 minLevel = 10;
      case 10: {
        if (tag == 80) {
         parse_minLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlevel_)));
          set_has_minlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sex;
        break;
      }

      // optional int32 sex = 11;
      case 11: {
        if (tag == 88) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamSampleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamSampleInfo)
  return false;
#undef DO_
}

void TeamSampleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamSampleInfo)
  // optional int64 teamID = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->teamid(), output);
  }

  // optional string teamName = 2;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->teamname(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 iconid = 5;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->iconid(), output);
  }

  // optional int32 professionId = 6;
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->professionid(), output);
  }

  // optional int32 isNear = 7;
  if (has_isnear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->isnear(), output);
  }

  // optional int32 targetID = 8;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->targetid(), output);
  }

  // optional int32 maxLevel = 9;
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->maxlevel(), output);
  }

  // optional int32 minLevel = 10;
  if (has_minlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->minlevel(), output);
  }

  // optional int32 sex = 11;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamSampleInfo)
}

::google::protobuf::uint8* TeamSampleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamSampleInfo)
  // optional int64 teamID = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->teamid(), target);
  }

  // optional string teamName = 2;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->teamname(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 iconid = 5;
  if (has_iconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->iconid(), target);
  }

  // optional int32 professionId = 6;
  if (has_professionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->professionid(), target);
  }

  // optional int32 isNear = 7;
  if (has_isnear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->isnear(), target);
  }

  // optional int32 targetID = 8;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->targetid(), target);
  }

  // optional int32 maxLevel = 9;
  if (has_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->maxlevel(), target);
  }

  // optional int32 minLevel = 10;
  if (has_minlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->minlevel(), target);
  }

  // optional int32 sex = 11;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamSampleInfo)
  return target;
}

int TeamSampleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 teamID = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

    // optional string teamName = 2;
    if (has_teamname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamname());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 iconid = 5;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iconid());
    }

    // optional int32 professionId = 6;
    if (has_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionid());
    }

    // optional int32 isNear = 7;
    if (has_isnear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isnear());
    }

    // optional int32 targetID = 8;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 maxLevel = 9;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlevel());
    }

    // optional int32 minLevel = 10;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minlevel());
    }

    // optional int32 sex = 11;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamSampleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamSampleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamSampleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamSampleInfo::MergeFrom(const TeamSampleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamname()) {
      set_teamname(from.teamname());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
    if (from.has_isnear()) {
      set_isnear(from.isnear());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
    if (from.has_minlevel()) {
      set_minlevel(from.minlevel());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamSampleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamSampleInfo::CopyFrom(const TeamSampleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamSampleInfo::IsInitialized() const {

  return true;
}

void TeamSampleInfo::Swap(TeamSampleInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(teamname_, other->teamname_);
    std::swap(num_, other->num_);
    std::swap(level_, other->level_);
    std::swap(iconid_, other->iconid_);
    std::swap(professionid_, other->professionid_);
    std::swap(isnear_, other->isnear_);
    std::swap(targetid_, other->targetid_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamSampleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamSampleInfo_descriptor_;
  metadata.reflection = TeamSampleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCreateTeam::kTargetIDFieldNumber;
#endif  // !_MSC_VER

CGCreateTeam::CGCreateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCreateTeam)
}

void CGCreateTeam::InitAsDefaultInstance() {
}

CGCreateTeam::CGCreateTeam(const CGCreateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCreateTeam)
}

void CGCreateTeam::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCreateTeam::~CGCreateTeam() {
  // @@protoc_insertion_point(destructor:CGCreateTeam)
  SharedDtor();
}

void CGCreateTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCreateTeam_descriptor_;
}

const CGCreateTeam& CGCreateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGCreateTeam* CGCreateTeam::default_instance_ = NULL;

CGCreateTeam* CGCreateTeam::New() const {
  return new CGCreateTeam;
}

void CGCreateTeam::Clear() {
  targetid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCreateTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 targetID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCreateTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCreateTeam)
  return false;
#undef DO_
}

void CGCreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCreateTeam)
  // optional int32 targetID = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCreateTeam)
}

::google::protobuf::uint8* CGCreateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCreateTeam)
  // optional int32 targetID = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCreateTeam)
  return target;
}

int CGCreateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 targetID = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCreateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCreateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCreateTeam::MergeFrom(const CGCreateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCreateTeam::CopyFrom(const CGCreateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCreateTeam::IsInitialized() const {

  return true;
}

void CGCreateTeam::Swap(CGCreateTeam* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCreateTeam_descriptor_;
  metadata.reflection = CGCreateTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreashMyTeam::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

GCRefreashMyTeam::GCRefreashMyTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreashMyTeam)
}

void GCRefreashMyTeam::InitAsDefaultInstance() {
  teaminfo_ = const_cast< ::TeamInfo*>(&::TeamInfo::default_instance());
}

GCRefreashMyTeam::GCRefreashMyTeam(const GCRefreashMyTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreashMyTeam)
}

void GCRefreashMyTeam::SharedCtor() {
  _cached_size_ = 0;
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreashMyTeam::~GCRefreashMyTeam() {
  // @@protoc_insertion_point(destructor:GCRefreashMyTeam)
  SharedDtor();
}

void GCRefreashMyTeam::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

void GCRefreashMyTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreashMyTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreashMyTeam_descriptor_;
}

const GCRefreashMyTeam& GCRefreashMyTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

GCRefreashMyTeam* GCRefreashMyTeam::default_instance_ = NULL;

GCRefreashMyTeam* GCRefreashMyTeam::New() const {
  return new GCRefreashMyTeam;
}

void GCRefreashMyTeam::Clear() {
  if (has_teaminfo()) {
    if (teaminfo_ != NULL) teaminfo_->::TeamInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreashMyTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreashMyTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamInfo teamInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreashMyTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreashMyTeam)
  return false;
#undef DO_
}

void GCRefreashMyTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreashMyTeam)
  // optional .TeamInfo teamInfo = 1;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreashMyTeam)
}

::google::protobuf::uint8* GCRefreashMyTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreashMyTeam)
  // optional .TeamInfo teamInfo = 1;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreashMyTeam)
  return target;
}

int GCRefreashMyTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamInfo teamInfo = 1;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreashMyTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreashMyTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreashMyTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreashMyTeam::MergeFrom(const GCRefreashMyTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::TeamInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreashMyTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreashMyTeam::CopyFrom(const GCRefreashMyTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreashMyTeam::IsInitialized() const {

  return true;
}

void GCRefreashMyTeam::Swap(GCRefreashMyTeam* other) {
  if (other != this) {
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreashMyTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreashMyTeam_descriptor_;
  metadata.reflection = GCRefreashMyTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGOpenTeamView::kTypeFieldNumber;
#endif  // !_MSC_VER

CGOpenTeamView::CGOpenTeamView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGOpenTeamView)
}

void CGOpenTeamView::InitAsDefaultInstance() {
}

CGOpenTeamView::CGOpenTeamView(const CGOpenTeamView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGOpenTeamView)
}

void CGOpenTeamView::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGOpenTeamView::~CGOpenTeamView() {
  // @@protoc_insertion_point(destructor:CGOpenTeamView)
  SharedDtor();
}

void CGOpenTeamView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGOpenTeamView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGOpenTeamView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGOpenTeamView_descriptor_;
}

const CGOpenTeamView& CGOpenTeamView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGOpenTeamView* CGOpenTeamView::default_instance_ = NULL;

CGOpenTeamView* CGOpenTeamView::New() const {
  return new CGOpenTeamView;
}

void CGOpenTeamView::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGOpenTeamView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGOpenTeamView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGOpenTeamView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGOpenTeamView)
  return false;
#undef DO_
}

void CGOpenTeamView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGOpenTeamView)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGOpenTeamView)
}

::google::protobuf::uint8* CGOpenTeamView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGOpenTeamView)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGOpenTeamView)
  return target;
}

int CGOpenTeamView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGOpenTeamView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGOpenTeamView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGOpenTeamView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGOpenTeamView::MergeFrom(const CGOpenTeamView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGOpenTeamView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGOpenTeamView::CopyFrom(const CGOpenTeamView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOpenTeamView::IsInitialized() const {

  return true;
}

void CGOpenTeamView::Swap(CGOpenTeamView* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGOpenTeamView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGOpenTeamView_descriptor_;
  metadata.reflection = CGOpenTeamView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCOPenTeamView::kMembersFieldNumber;
const int GCOPenTeamView::kTeamsFieldNumber;
const int GCOPenTeamView::kAutoAgreeFieldNumber;
const int GCOPenTeamView::kTypeFieldNumber;
const int GCOPenTeamView::kAutoMateFieldNumber;
#endif  // !_MSC_VER

GCOPenTeamView::GCOPenTeamView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCOPenTeamView)
}

void GCOPenTeamView::InitAsDefaultInstance() {
}

GCOPenTeamView::GCOPenTeamView(const GCOPenTeamView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCOPenTeamView)
}

void GCOPenTeamView::SharedCtor() {
  _cached_size_ = 0;
  autoagree_ = 0;
  type_ = 0;
  automate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCOPenTeamView::~GCOPenTeamView() {
  // @@protoc_insertion_point(destructor:GCOPenTeamView)
  SharedDtor();
}

void GCOPenTeamView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCOPenTeamView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCOPenTeamView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCOPenTeamView_descriptor_;
}

const GCOPenTeamView& GCOPenTeamView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

GCOPenTeamView* GCOPenTeamView::default_instance_ = NULL;

GCOPenTeamView* GCOPenTeamView::New() const {
  return new GCOPenTeamView;
}

void GCOPenTeamView::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCOPenTeamView*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(autoagree_, automate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCOPenTeamView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCOPenTeamView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TeamMember members = 1;
      case 1: {
        if (tag == 10) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_members;
        if (input->ExpectTag(18)) goto parse_teams;
        break;
      }

      // repeated .TeamSampleInfo teams = 2;
      case 2: {
        if (tag == 18) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        if (input->ExpectTag(24)) goto parse_autoAgree;
        break;
      }

      // optional int32 autoAgree = 3;
      case 3: {
        if (tag == 24) {
         parse_autoAgree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoagree_)));
          set_has_autoagree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_autoMate;
        break;
      }

      // optional int32 autoMate = 5;
      case 5: {
        if (tag == 40) {
         parse_autoMate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &automate_)));
          set_has_automate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCOPenTeamView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCOPenTeamView)
  return false;
#undef DO_
}

void GCOPenTeamView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCOPenTeamView)
  // repeated .TeamMember members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }

  // repeated .TeamSampleInfo teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(i), output);
  }

  // optional int32 autoAgree = 3;
  if (has_autoagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->autoagree(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 autoMate = 5;
  if (has_automate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->automate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCOPenTeamView)
}

::google::protobuf::uint8* GCOPenTeamView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCOPenTeamView)
  // repeated .TeamMember members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->members(i), target);
  }

  // repeated .TeamSampleInfo teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teams(i), target);
  }

  // optional int32 autoAgree = 3;
  if (has_autoagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->autoagree(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int32 autoMate = 5;
  if (has_automate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->automate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCOPenTeamView)
  return target;
}

int GCOPenTeamView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 autoAgree = 3;
    if (has_autoagree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoagree());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 autoMate = 5;
    if (has_automate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->automate());
    }

  }
  // repeated .TeamMember members = 1;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated .TeamSampleInfo teams = 2;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCOPenTeamView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCOPenTeamView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCOPenTeamView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCOPenTeamView::MergeFrom(const GCOPenTeamView& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  teams_.MergeFrom(from.teams_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_autoagree()) {
      set_autoagree(from.autoagree());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_automate()) {
      set_automate(from.automate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCOPenTeamView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCOPenTeamView::CopyFrom(const GCOPenTeamView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCOPenTeamView::IsInitialized() const {

  return true;
}

void GCOPenTeamView::Swap(GCOPenTeamView* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    teams_.Swap(&other->teams_);
    std::swap(autoagree_, other->autoagree_);
    std::swap(type_, other->type_);
    std::swap(automate_, other->automate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCOPenTeamView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCOPenTeamView_descriptor_;
  metadata.reflection = GCOPenTeamView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGLeaveTeam::CGLeaveTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGLeaveTeam)
}

void CGLeaveTeam::InitAsDefaultInstance() {
}

CGLeaveTeam::CGLeaveTeam(const CGLeaveTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGLeaveTeam)
}

void CGLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGLeaveTeam::~CGLeaveTeam() {
  // @@protoc_insertion_point(destructor:CGLeaveTeam)
  SharedDtor();
}

void CGLeaveTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGLeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGLeaveTeam_descriptor_;
}

const CGLeaveTeam& CGLeaveTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGLeaveTeam* CGLeaveTeam::default_instance_ = NULL;

CGLeaveTeam* CGLeaveTeam::New() const {
  return new CGLeaveTeam;
}

void CGLeaveTeam::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGLeaveTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGLeaveTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGLeaveTeam)
  return false;
#undef DO_
}

void CGLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGLeaveTeam)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGLeaveTeam)
}

::google::protobuf::uint8* CGLeaveTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGLeaveTeam)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGLeaveTeam)
  return target;
}

int CGLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGLeaveTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGLeaveTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGLeaveTeam::MergeFrom(const CGLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGLeaveTeam::CopyFrom(const CGLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGLeaveTeam::IsInitialized() const {

  return true;
}

void CGLeaveTeam::Swap(CGLeaveTeam* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGLeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGLeaveTeam_descriptor_;
  metadata.reflection = CGLeaveTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCLeaveTeam::kIsInitiativeFieldNumber;
#endif  // !_MSC_VER

GCLeaveTeam::GCLeaveTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCLeaveTeam)
}

void GCLeaveTeam::InitAsDefaultInstance() {
}

GCLeaveTeam::GCLeaveTeam(const GCLeaveTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCLeaveTeam)
}

void GCLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  isinitiative_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCLeaveTeam::~GCLeaveTeam() {
  // @@protoc_insertion_point(destructor:GCLeaveTeam)
  SharedDtor();
}

void GCLeaveTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCLeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCLeaveTeam_descriptor_;
}

const GCLeaveTeam& GCLeaveTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

GCLeaveTeam* GCLeaveTeam::default_instance_ = NULL;

GCLeaveTeam* GCLeaveTeam::New() const {
  return new GCLeaveTeam;
}

void GCLeaveTeam::Clear() {
  isinitiative_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCLeaveTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isInitiative = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isinitiative_)));
          set_has_isinitiative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCLeaveTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCLeaveTeam)
  return false;
#undef DO_
}

void GCLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCLeaveTeam)
  // optional int32 isInitiative = 1;
  if (has_isinitiative()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isinitiative(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCLeaveTeam)
}

::google::protobuf::uint8* GCLeaveTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCLeaveTeam)
  // optional int32 isInitiative = 1;
  if (has_isinitiative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isinitiative(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCLeaveTeam)
  return target;
}

int GCLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isInitiative = 1;
    if (has_isinitiative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isinitiative());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCLeaveTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCLeaveTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCLeaveTeam::MergeFrom(const GCLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isinitiative()) {
      set_isinitiative(from.isinitiative());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCLeaveTeam::CopyFrom(const GCLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLeaveTeam::IsInitialized() const {

  return true;
}

void GCLeaveTeam::Swap(GCLeaveTeam* other) {
  if (other != this) {
    std::swap(isinitiative_, other->isinitiative_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCLeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCLeaveTeam_descriptor_;
  metadata.reflection = GCLeaveTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAddTeamMember::kMemberFieldNumber;
#endif  // !_MSC_VER

GCAddTeamMember::GCAddTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCAddTeamMember)
}

void GCAddTeamMember::InitAsDefaultInstance() {
  member_ = const_cast< ::TeamMember*>(&::TeamMember::default_instance());
}

GCAddTeamMember::GCAddTeamMember(const GCAddTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCAddTeamMember)
}

void GCAddTeamMember::SharedCtor() {
  _cached_size_ = 0;
  member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAddTeamMember::~GCAddTeamMember() {
  // @@protoc_insertion_point(destructor:GCAddTeamMember)
  SharedDtor();
}

void GCAddTeamMember::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
  }
}

void GCAddTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAddTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAddTeamMember_descriptor_;
}

const GCAddTeamMember& GCAddTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

GCAddTeamMember* GCAddTeamMember::default_instance_ = NULL;

GCAddTeamMember* GCAddTeamMember::New() const {
  return new GCAddTeamMember;
}

void GCAddTeamMember::Clear() {
  if (has_member()) {
    if (member_ != NULL) member_->::TeamMember::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAddTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCAddTeamMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamMember member = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCAddTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCAddTeamMember)
  return false;
#undef DO_
}

void GCAddTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCAddTeamMember)
  // optional .TeamMember member = 1;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCAddTeamMember)
}

::google::protobuf::uint8* GCAddTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCAddTeamMember)
  // optional .TeamMember member = 1;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCAddTeamMember)
  return target;
}

int GCAddTeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamMember member = 1;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAddTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAddTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAddTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAddTeamMember::MergeFrom(const GCAddTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member()) {
      mutable_member()->::TeamMember::MergeFrom(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAddTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAddTeamMember::CopyFrom(const GCAddTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAddTeamMember::IsInitialized() const {

  return true;
}

void GCAddTeamMember::Swap(GCAddTeamMember* other) {
  if (other != this) {
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAddTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAddTeamMember_descriptor_;
  metadata.reflection = GCAddTeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDelTeamMember::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

GCDelTeamMember::GCDelTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDelTeamMember)
}

void GCDelTeamMember::InitAsDefaultInstance() {
}

GCDelTeamMember::GCDelTeamMember(const GCDelTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDelTeamMember)
}

void GCDelTeamMember::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDelTeamMember::~GCDelTeamMember() {
  // @@protoc_insertion_point(destructor:GCDelTeamMember)
  SharedDtor();
}

void GCDelTeamMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDelTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDelTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDelTeamMember_descriptor_;
}

const GCDelTeamMember& GCDelTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

GCDelTeamMember* GCDelTeamMember::default_instance_ = NULL;

GCDelTeamMember* GCDelTeamMember::New() const {
  return new GCDelTeamMember;
}

void GCDelTeamMember::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDelTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDelTeamMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDelTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDelTeamMember)
  return false;
#undef DO_
}

void GCDelTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDelTeamMember)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDelTeamMember)
}

::google::protobuf::uint8* GCDelTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDelTeamMember)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDelTeamMember)
  return target;
}

int GCDelTeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDelTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDelTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDelTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDelTeamMember::MergeFrom(const GCDelTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDelTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDelTeamMember::CopyFrom(const GCDelTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDelTeamMember::IsInitialized() const {

  return true;
}

void GCDelTeamMember::Swap(GCDelTeamMember* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDelTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDelTeamMember_descriptor_;
  metadata.reflection = GCDelTeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUpdateTeamMember::kMemberFieldNumber;
#endif  // !_MSC_VER

GCUpdateTeamMember::GCUpdateTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCUpdateTeamMember)
}

void GCUpdateTeamMember::InitAsDefaultInstance() {
}

GCUpdateTeamMember::GCUpdateTeamMember(const GCUpdateTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCUpdateTeamMember)
}

void GCUpdateTeamMember::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUpdateTeamMember::~GCUpdateTeamMember() {
  // @@protoc_insertion_point(destructor:GCUpdateTeamMember)
  SharedDtor();
}

void GCUpdateTeamMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCUpdateTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUpdateTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUpdateTeamMember_descriptor_;
}

const GCUpdateTeamMember& GCUpdateTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

GCUpdateTeamMember* GCUpdateTeamMember::default_instance_ = NULL;

GCUpdateTeamMember* GCUpdateTeamMember::New() const {
  return new GCUpdateTeamMember;
}

void GCUpdateTeamMember::Clear() {
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUpdateTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCUpdateTeamMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TeamMember member = 1;
      case 1: {
        if (tag == 10) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_member;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCUpdateTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCUpdateTeamMember)
  return false;
#undef DO_
}

void GCUpdateTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCUpdateTeamMember)
  // repeated .TeamMember member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCUpdateTeamMember)
}

::google::protobuf::uint8* GCUpdateTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCUpdateTeamMember)
  // repeated .TeamMember member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCUpdateTeamMember)
  return target;
}

int GCUpdateTeamMember::ByteSize() const {
  int total_size = 0;

  // repeated .TeamMember member = 1;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUpdateTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUpdateTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUpdateTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUpdateTeamMember::MergeFrom(const GCUpdateTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUpdateTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUpdateTeamMember::CopyFrom(const GCUpdateTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUpdateTeamMember::IsInitialized() const {

  return true;
}

void GCUpdateTeamMember::Swap(GCUpdateTeamMember* other) {
  if (other != this) {
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUpdateTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUpdateTeamMember_descriptor_;
  metadata.reflection = GCUpdateTeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGApplyTeam::kTeamIDFieldNumber;
#endif  // !_MSC_VER

CGApplyTeam::CGApplyTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGApplyTeam)
}

void CGApplyTeam::InitAsDefaultInstance() {
}

CGApplyTeam::CGApplyTeam(const CGApplyTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGApplyTeam)
}

void CGApplyTeam::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGApplyTeam::~CGApplyTeam() {
  // @@protoc_insertion_point(destructor:CGApplyTeam)
  SharedDtor();
}

void CGApplyTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGApplyTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGApplyTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGApplyTeam_descriptor_;
}

const CGApplyTeam& CGApplyTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGApplyTeam* CGApplyTeam::default_instance_ = NULL;

CGApplyTeam* CGApplyTeam::New() const {
  return new CGApplyTeam;
}

void CGApplyTeam::Clear() {
  teamid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGApplyTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGApplyTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 teamID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGApplyTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGApplyTeam)
  return false;
#undef DO_
}

void CGApplyTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGApplyTeam)
  // optional int64 teamID = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGApplyTeam)
}

::google::protobuf::uint8* CGApplyTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGApplyTeam)
  // optional int64 teamID = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGApplyTeam)
  return target;
}

int CGApplyTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 teamID = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGApplyTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGApplyTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGApplyTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGApplyTeam::MergeFrom(const CGApplyTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGApplyTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGApplyTeam::CopyFrom(const CGApplyTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGApplyTeam::IsInitialized() const {

  return true;
}

void CGApplyTeam::Swap(CGApplyTeam* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGApplyTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGApplyTeam_descriptor_;
  metadata.reflection = CGApplyTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCApplyTeamLeader::kApplyIdFieldNumber;
const int GCApplyTeamLeader::kApplyNameFieldNumber;
const int GCApplyTeamLeader::kBattleNumberFieldNumber;
#endif  // !_MSC_VER

GCApplyTeamLeader::GCApplyTeamLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCApplyTeamLeader)
}

void GCApplyTeamLeader::InitAsDefaultInstance() {
}

GCApplyTeamLeader::GCApplyTeamLeader(const GCApplyTeamLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCApplyTeamLeader)
}

void GCApplyTeamLeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  applyid_ = GOOGLE_LONGLONG(0);
  applyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battlenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCApplyTeamLeader::~GCApplyTeamLeader() {
  // @@protoc_insertion_point(destructor:GCApplyTeamLeader)
  SharedDtor();
}

void GCApplyTeamLeader::SharedDtor() {
  if (applyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete applyname_;
  }
  if (battlenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battlenumber_;
  }
  if (this != default_instance_) {
  }
}

void GCApplyTeamLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCApplyTeamLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCApplyTeamLeader_descriptor_;
}

const GCApplyTeamLeader& GCApplyTeamLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

GCApplyTeamLeader* GCApplyTeamLeader::default_instance_ = NULL;

GCApplyTeamLeader* GCApplyTeamLeader::New() const {
  return new GCApplyTeamLeader;
}

void GCApplyTeamLeader::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    applyid_ = GOOGLE_LONGLONG(0);
    if (has_applyname()) {
      if (applyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        applyname_->clear();
      }
    }
    if (has_battlenumber()) {
      if (battlenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battlenumber_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCApplyTeamLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCApplyTeamLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 applyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &applyid_)));
          set_has_applyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_applyName;
        break;
      }

      // optional string applyName = 2;
      case 2: {
        if (tag == 18) {
         parse_applyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->applyname().data(), this->applyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "applyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_battleNumber;
        break;
      }

      // optional string battleNumber = 3;
      case 3: {
        if (tag == 26) {
         parse_battleNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battlenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->battlenumber().data(), this->battlenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "battlenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCApplyTeamLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCApplyTeamLeader)
  return false;
#undef DO_
}

void GCApplyTeamLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCApplyTeamLeader)
  // optional int64 applyId = 1;
  if (has_applyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->applyid(), output);
  }

  // optional string applyName = 2;
  if (has_applyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applyname().data(), this->applyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "applyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->applyname(), output);
  }

  // optional string battleNumber = 3;
  if (has_battlenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battlenumber().data(), this->battlenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battlenumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->battlenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCApplyTeamLeader)
}

::google::protobuf::uint8* GCApplyTeamLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCApplyTeamLeader)
  // optional int64 applyId = 1;
  if (has_applyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->applyid(), target);
  }

  // optional string applyName = 2;
  if (has_applyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applyname().data(), this->applyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "applyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->applyname(), target);
  }

  // optional string battleNumber = 3;
  if (has_battlenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battlenumber().data(), this->battlenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battlenumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->battlenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCApplyTeamLeader)
  return target;
}

int GCApplyTeamLeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 applyId = 1;
    if (has_applyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->applyid());
    }

    // optional string applyName = 2;
    if (has_applyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applyname());
    }

    // optional string battleNumber = 3;
    if (has_battlenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battlenumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCApplyTeamLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCApplyTeamLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCApplyTeamLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCApplyTeamLeader::MergeFrom(const GCApplyTeamLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applyid()) {
      set_applyid(from.applyid());
    }
    if (from.has_applyname()) {
      set_applyname(from.applyname());
    }
    if (from.has_battlenumber()) {
      set_battlenumber(from.battlenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCApplyTeamLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCApplyTeamLeader::CopyFrom(const GCApplyTeamLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCApplyTeamLeader::IsInitialized() const {

  return true;
}

void GCApplyTeamLeader::Swap(GCApplyTeamLeader* other) {
  if (other != this) {
    std::swap(applyid_, other->applyid_);
    std::swap(applyname_, other->applyname_);
    std::swap(battlenumber_, other->battlenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCApplyTeamLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCApplyTeamLeader_descriptor_;
  metadata.reflection = GCApplyTeamLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGAgreeApply::kApplyIdFieldNumber;
const int CGAgreeApply::kStsFieldNumber;
#endif  // !_MSC_VER

CGAgreeApply::CGAgreeApply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGAgreeApply)
}

void CGAgreeApply::InitAsDefaultInstance() {
}

CGAgreeApply::CGAgreeApply(const CGAgreeApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGAgreeApply)
}

void CGAgreeApply::SharedCtor() {
  _cached_size_ = 0;
  applyid_ = GOOGLE_LONGLONG(0);
  sts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAgreeApply::~CGAgreeApply() {
  // @@protoc_insertion_point(destructor:CGAgreeApply)
  SharedDtor();
}

void CGAgreeApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAgreeApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAgreeApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAgreeApply_descriptor_;
}

const CGAgreeApply& CGAgreeApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGAgreeApply* CGAgreeApply::default_instance_ = NULL;

CGAgreeApply* CGAgreeApply::New() const {
  return new CGAgreeApply;
}

void CGAgreeApply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGAgreeApply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(applyid_, sts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAgreeApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGAgreeApply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 applyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &applyid_)));
          set_has_applyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sts;
        break;
      }

      // optional int32 sts = 2;
      case 2: {
        if (tag == 16) {
         parse_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGAgreeApply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGAgreeApply)
  return false;
#undef DO_
}

void CGAgreeApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGAgreeApply)
  // optional int64 applyId = 1;
  if (has_applyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->applyid(), output);
  }

  // optional int32 sts = 2;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGAgreeApply)
}

::google::protobuf::uint8* CGAgreeApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGAgreeApply)
  // optional int64 applyId = 1;
  if (has_applyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->applyid(), target);
  }

  // optional int32 sts = 2;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGAgreeApply)
  return target;
}

int CGAgreeApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 applyId = 1;
    if (has_applyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->applyid());
    }

    // optional int32 sts = 2;
    if (has_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAgreeApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAgreeApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAgreeApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAgreeApply::MergeFrom(const CGAgreeApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applyid()) {
      set_applyid(from.applyid());
    }
    if (from.has_sts()) {
      set_sts(from.sts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAgreeApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAgreeApply::CopyFrom(const CGAgreeApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAgreeApply::IsInitialized() const {

  return true;
}

void CGAgreeApply::Swap(CGAgreeApply* other) {
  if (other != this) {
    std::swap(applyid_, other->applyid_);
    std::swap(sts_, other->sts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAgreeApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAgreeApply_descriptor_;
  metadata.reflection = CGAgreeApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGInviteOther::kInvitePlayerIdFieldNumber;
#endif  // !_MSC_VER

CGInviteOther::CGInviteOther()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGInviteOther)
}

void CGInviteOther::InitAsDefaultInstance() {
}

CGInviteOther::CGInviteOther(const CGInviteOther& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGInviteOther)
}

void CGInviteOther::SharedCtor() {
  _cached_size_ = 0;
  inviteplayerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGInviteOther::~CGInviteOther() {
  // @@protoc_insertion_point(destructor:CGInviteOther)
  SharedDtor();
}

void CGInviteOther::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGInviteOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGInviteOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGInviteOther_descriptor_;
}

const CGInviteOther& CGInviteOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGInviteOther* CGInviteOther::default_instance_ = NULL;

CGInviteOther* CGInviteOther::New() const {
  return new CGInviteOther;
}

void CGInviteOther::Clear() {
  inviteplayerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGInviteOther::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGInviteOther)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 invitePlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inviteplayerid_)));
          set_has_inviteplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGInviteOther)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGInviteOther)
  return false;
#undef DO_
}

void CGInviteOther::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGInviteOther)
  // optional int64 invitePlayerId = 1;
  if (has_inviteplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->inviteplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGInviteOther)
}

::google::protobuf::uint8* CGInviteOther::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGInviteOther)
  // optional int64 invitePlayerId = 1;
  if (has_inviteplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->inviteplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGInviteOther)
  return target;
}

int CGInviteOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 invitePlayerId = 1;
    if (has_inviteplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inviteplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGInviteOther::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGInviteOther* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGInviteOther*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGInviteOther::MergeFrom(const CGInviteOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviteplayerid()) {
      set_inviteplayerid(from.inviteplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGInviteOther::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGInviteOther::CopyFrom(const CGInviteOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGInviteOther::IsInitialized() const {

  return true;
}

void CGInviteOther::Swap(CGInviteOther* other) {
  if (other != this) {
    std::swap(inviteplayerid_, other->inviteplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGInviteOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGInviteOther_descriptor_;
  metadata.reflection = CGInviteOther_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCInviteOther::kLeaderPlayerIdFieldNumber;
const int GCInviteOther::kLeaderNameFieldNumber;
const int GCInviteOther::kBattleNumberFieldNumber;
#endif  // !_MSC_VER

GCInviteOther::GCInviteOther()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCInviteOther)
}

void GCInviteOther::InitAsDefaultInstance() {
}

GCInviteOther::GCInviteOther(const GCInviteOther& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCInviteOther)
}

void GCInviteOther::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  leaderplayerid_ = GOOGLE_LONGLONG(0);
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battlenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCInviteOther::~GCInviteOther() {
  // @@protoc_insertion_point(destructor:GCInviteOther)
  SharedDtor();
}

void GCInviteOther::SharedDtor() {
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (battlenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battlenumber_;
  }
  if (this != default_instance_) {
  }
}

void GCInviteOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCInviteOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCInviteOther_descriptor_;
}

const GCInviteOther& GCInviteOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

GCInviteOther* GCInviteOther::default_instance_ = NULL;

GCInviteOther* GCInviteOther::New() const {
  return new GCInviteOther;
}

void GCInviteOther::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    leaderplayerid_ = GOOGLE_LONGLONG(0);
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leadername_->clear();
      }
    }
    if (has_battlenumber()) {
      if (battlenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battlenumber_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCInviteOther::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCInviteOther)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 leaderPlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leaderplayerid_)));
          set_has_leaderplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leaderName;
        break;
      }

      // optional string leaderName = 2;
      case 2: {
        if (tag == 18) {
         parse_leaderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leadername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_battleNumber;
        break;
      }

      // optional string battleNumber = 3;
      case 3: {
        if (tag == 26) {
         parse_battleNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battlenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->battlenumber().data(), this->battlenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "battlenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCInviteOther)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCInviteOther)
  return false;
#undef DO_
}

void GCInviteOther::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCInviteOther)
  // optional int64 leaderPlayerId = 1;
  if (has_leaderplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->leaderplayerid(), output);
  }

  // optional string leaderName = 2;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leadername(), output);
  }

  // optional string battleNumber = 3;
  if (has_battlenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battlenumber().data(), this->battlenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battlenumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->battlenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCInviteOther)
}

::google::protobuf::uint8* GCInviteOther::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCInviteOther)
  // optional int64 leaderPlayerId = 1;
  if (has_leaderplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->leaderplayerid(), target);
  }

  // optional string leaderName = 2;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leadername(), target);
  }

  // optional string battleNumber = 3;
  if (has_battlenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battlenumber().data(), this->battlenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battlenumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->battlenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCInviteOther)
  return target;
}

int GCInviteOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 leaderPlayerId = 1;
    if (has_leaderplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leaderplayerid());
    }

    // optional string leaderName = 2;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

    // optional string battleNumber = 3;
    if (has_battlenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battlenumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCInviteOther::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCInviteOther* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCInviteOther*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCInviteOther::MergeFrom(const GCInviteOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leaderplayerid()) {
      set_leaderplayerid(from.leaderplayerid());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_battlenumber()) {
      set_battlenumber(from.battlenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCInviteOther::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCInviteOther::CopyFrom(const GCInviteOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCInviteOther::IsInitialized() const {

  return true;
}

void GCInviteOther::Swap(GCInviteOther* other) {
  if (other != this) {
    std::swap(leaderplayerid_, other->leaderplayerid_);
    std::swap(leadername_, other->leadername_);
    std::swap(battlenumber_, other->battlenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCInviteOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCInviteOther_descriptor_;
  metadata.reflection = GCInviteOther_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGAgreeInvite::kLeaderPlayerIdFieldNumber;
const int CGAgreeInvite::kTypeFieldNumber;
#endif  // !_MSC_VER

CGAgreeInvite::CGAgreeInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGAgreeInvite)
}

void CGAgreeInvite::InitAsDefaultInstance() {
}

CGAgreeInvite::CGAgreeInvite(const CGAgreeInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGAgreeInvite)
}

void CGAgreeInvite::SharedCtor() {
  _cached_size_ = 0;
  leaderplayerid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAgreeInvite::~CGAgreeInvite() {
  // @@protoc_insertion_point(destructor:CGAgreeInvite)
  SharedDtor();
}

void CGAgreeInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAgreeInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAgreeInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAgreeInvite_descriptor_;
}

const CGAgreeInvite& CGAgreeInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGAgreeInvite* CGAgreeInvite::default_instance_ = NULL;

CGAgreeInvite* CGAgreeInvite::New() const {
  return new CGAgreeInvite;
}

void CGAgreeInvite::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGAgreeInvite*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(leaderplayerid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAgreeInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGAgreeInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 leaderPlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leaderplayerid_)));
          set_has_leaderplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGAgreeInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGAgreeInvite)
  return false;
#undef DO_
}

void CGAgreeInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGAgreeInvite)
  // optional int64 leaderPlayerId = 1;
  if (has_leaderplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->leaderplayerid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGAgreeInvite)
}

::google::protobuf::uint8* CGAgreeInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGAgreeInvite)
  // optional int64 leaderPlayerId = 1;
  if (has_leaderplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->leaderplayerid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGAgreeInvite)
  return target;
}

int CGAgreeInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 leaderPlayerId = 1;
    if (has_leaderplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leaderplayerid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAgreeInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAgreeInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAgreeInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAgreeInvite::MergeFrom(const CGAgreeInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leaderplayerid()) {
      set_leaderplayerid(from.leaderplayerid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAgreeInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAgreeInvite::CopyFrom(const CGAgreeInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAgreeInvite::IsInitialized() const {

  return true;
}

void CGAgreeInvite::Swap(CGAgreeInvite* other) {
  if (other != this) {
    std::swap(leaderplayerid_, other->leaderplayerid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAgreeInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAgreeInvite_descriptor_;
  metadata.reflection = CGAgreeInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGKickedOut::kOtherPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGKickedOut::CGKickedOut()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGKickedOut)
}

void CGKickedOut::InitAsDefaultInstance() {
}

CGKickedOut::CGKickedOut(const CGKickedOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGKickedOut)
}

void CGKickedOut::SharedCtor() {
  _cached_size_ = 0;
  otherplayerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGKickedOut::~CGKickedOut() {
  // @@protoc_insertion_point(destructor:CGKickedOut)
  SharedDtor();
}

void CGKickedOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGKickedOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGKickedOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGKickedOut_descriptor_;
}

const CGKickedOut& CGKickedOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGKickedOut* CGKickedOut::default_instance_ = NULL;

CGKickedOut* CGKickedOut::New() const {
  return new CGKickedOut;
}

void CGKickedOut::Clear() {
  otherplayerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGKickedOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGKickedOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 otherPlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &otherplayerid_)));
          set_has_otherplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGKickedOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGKickedOut)
  return false;
#undef DO_
}

void CGKickedOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGKickedOut)
  // optional int64 otherPlayerId = 1;
  if (has_otherplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->otherplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGKickedOut)
}

::google::protobuf::uint8* CGKickedOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGKickedOut)
  // optional int64 otherPlayerId = 1;
  if (has_otherplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->otherplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGKickedOut)
  return target;
}

int CGKickedOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 otherPlayerId = 1;
    if (has_otherplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->otherplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGKickedOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGKickedOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGKickedOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGKickedOut::MergeFrom(const CGKickedOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_otherplayerid()) {
      set_otherplayerid(from.otherplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGKickedOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGKickedOut::CopyFrom(const CGKickedOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGKickedOut::IsInitialized() const {

  return true;
}

void CGKickedOut::Swap(CGKickedOut* other) {
  if (other != this) {
    std::swap(otherplayerid_, other->otherplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGKickedOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGKickedOut_descriptor_;
  metadata.reflection = CGKickedOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGTransferCaption::kOtherPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGTransferCaption::CGTransferCaption()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGTransferCaption)
}

void CGTransferCaption::InitAsDefaultInstance() {
}

CGTransferCaption::CGTransferCaption(const CGTransferCaption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGTransferCaption)
}

void CGTransferCaption::SharedCtor() {
  _cached_size_ = 0;
  otherplayerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGTransferCaption::~CGTransferCaption() {
  // @@protoc_insertion_point(destructor:CGTransferCaption)
  SharedDtor();
}

void CGTransferCaption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGTransferCaption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGTransferCaption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGTransferCaption_descriptor_;
}

const CGTransferCaption& CGTransferCaption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGTransferCaption* CGTransferCaption::default_instance_ = NULL;

CGTransferCaption* CGTransferCaption::New() const {
  return new CGTransferCaption;
}

void CGTransferCaption::Clear() {
  otherplayerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGTransferCaption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGTransferCaption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 otherPlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &otherplayerid_)));
          set_has_otherplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGTransferCaption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGTransferCaption)
  return false;
#undef DO_
}

void CGTransferCaption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGTransferCaption)
  // optional int64 otherPlayerId = 1;
  if (has_otherplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->otherplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGTransferCaption)
}

::google::protobuf::uint8* CGTransferCaption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGTransferCaption)
  // optional int64 otherPlayerId = 1;
  if (has_otherplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->otherplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGTransferCaption)
  return target;
}

int CGTransferCaption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 otherPlayerId = 1;
    if (has_otherplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->otherplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGTransferCaption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGTransferCaption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGTransferCaption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGTransferCaption::MergeFrom(const CGTransferCaption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_otherplayerid()) {
      set_otherplayerid(from.otherplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGTransferCaption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGTransferCaption::CopyFrom(const CGTransferCaption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGTransferCaption::IsInitialized() const {

  return true;
}

void CGTransferCaption::Swap(CGTransferCaption* other) {
  if (other != this) {
    std::swap(otherplayerid_, other->otherplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGTransferCaption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGTransferCaption_descriptor_;
  metadata.reflection = CGTransferCaption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSetTeamAuthority::kMinLvFieldNumber;
const int CGSetTeamAuthority::kMaxLvFieldNumber;
const int CGSetTeamAuthority::kMinBattleNumberFieldNumber;
const int CGSetTeamAuthority::kTargetIDFieldNumber;
const int CGSetTeamAuthority::kAutoFollwFieldNumber;
const int CGSetTeamAuthority::kAutoAgreeFieldNumber;
#endif  // !_MSC_VER

CGSetTeamAuthority::CGSetTeamAuthority()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSetTeamAuthority)
}

void CGSetTeamAuthority::InitAsDefaultInstance() {
}

CGSetTeamAuthority::CGSetTeamAuthority(const CGSetTeamAuthority& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSetTeamAuthority)
}

void CGSetTeamAuthority::SharedCtor() {
  _cached_size_ = 0;
  minlv_ = 0;
  maxlv_ = 0;
  minbattlenumber_ = 0;
  targetid_ = 0;
  autofollw_ = 0;
  autoagree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSetTeamAuthority::~CGSetTeamAuthority() {
  // @@protoc_insertion_point(destructor:CGSetTeamAuthority)
  SharedDtor();
}

void CGSetTeamAuthority::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSetTeamAuthority::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSetTeamAuthority::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSetTeamAuthority_descriptor_;
}

const CGSetTeamAuthority& CGSetTeamAuthority::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGSetTeamAuthority* CGSetTeamAuthority::default_instance_ = NULL;

CGSetTeamAuthority* CGSetTeamAuthority::New() const {
  return new CGSetTeamAuthority;
}

void CGSetTeamAuthority::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGSetTeamAuthority*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(minlv_, autoagree_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSetTeamAuthority::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSetTeamAuthority)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 minLv = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlv_)));
          set_has_minlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxLv;
        break;
      }

      // optional int32 maxLv = 2;
      case 2: {
        if (tag == 16) {
         parse_maxLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlv_)));
          set_has_maxlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_minBattleNumber;
        break;
      }

      // optional int32 minBattleNumber = 3;
      case 3: {
        if (tag == 24) {
         parse_minBattleNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minbattlenumber_)));
          set_has_minbattlenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 4;
      case 4: {
        if (tag == 32) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_autoFollw;
        break;
      }

      // optional int32 autoFollw = 5;
      case 5: {
        if (tag == 40) {
         parse_autoFollw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autofollw_)));
          set_has_autofollw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_autoAgree;
        break;
      }

      // optional int32 autoAgree = 6;
      case 6: {
        if (tag == 48) {
         parse_autoAgree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoagree_)));
          set_has_autoagree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSetTeamAuthority)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSetTeamAuthority)
  return false;
#undef DO_
}

void CGSetTeamAuthority::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSetTeamAuthority)
  // optional int32 minLv = 1;
  if (has_minlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->minlv(), output);
  }

  // optional int32 maxLv = 2;
  if (has_maxlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxlv(), output);
  }

  // optional int32 minBattleNumber = 3;
  if (has_minbattlenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minbattlenumber(), output);
  }

  // optional int32 targetID = 4;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetid(), output);
  }

  // optional int32 autoFollw = 5;
  if (has_autofollw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->autofollw(), output);
  }

  // optional int32 autoAgree = 6;
  if (has_autoagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->autoagree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSetTeamAuthority)
}

::google::protobuf::uint8* CGSetTeamAuthority::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSetTeamAuthority)
  // optional int32 minLv = 1;
  if (has_minlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->minlv(), target);
  }

  // optional int32 maxLv = 2;
  if (has_maxlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxlv(), target);
  }

  // optional int32 minBattleNumber = 3;
  if (has_minbattlenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minbattlenumber(), target);
  }

  // optional int32 targetID = 4;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetid(), target);
  }

  // optional int32 autoFollw = 5;
  if (has_autofollw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->autofollw(), target);
  }

  // optional int32 autoAgree = 6;
  if (has_autoagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->autoagree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSetTeamAuthority)
  return target;
}

int CGSetTeamAuthority::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 minLv = 1;
    if (has_minlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minlv());
    }

    // optional int32 maxLv = 2;
    if (has_maxlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlv());
    }

    // optional int32 minBattleNumber = 3;
    if (has_minbattlenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minbattlenumber());
    }

    // optional int32 targetID = 4;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // optional int32 autoFollw = 5;
    if (has_autofollw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autofollw());
    }

    // optional int32 autoAgree = 6;
    if (has_autoagree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoagree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSetTeamAuthority::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSetTeamAuthority* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSetTeamAuthority*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSetTeamAuthority::MergeFrom(const CGSetTeamAuthority& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minlv()) {
      set_minlv(from.minlv());
    }
    if (from.has_maxlv()) {
      set_maxlv(from.maxlv());
    }
    if (from.has_minbattlenumber()) {
      set_minbattlenumber(from.minbattlenumber());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_autofollw()) {
      set_autofollw(from.autofollw());
    }
    if (from.has_autoagree()) {
      set_autoagree(from.autoagree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSetTeamAuthority::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSetTeamAuthority::CopyFrom(const CGSetTeamAuthority& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSetTeamAuthority::IsInitialized() const {

  return true;
}

void CGSetTeamAuthority::Swap(CGSetTeamAuthority* other) {
  if (other != this) {
    std::swap(minlv_, other->minlv_);
    std::swap(maxlv_, other->maxlv_);
    std::swap(minbattlenumber_, other->minbattlenumber_);
    std::swap(targetid_, other->targetid_);
    std::swap(autofollw_, other->autofollw_);
    std::swap(autoagree_, other->autoagree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSetTeamAuthority::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSetTeamAuthority_descriptor_;
  metadata.reflection = CGSetTeamAuthority_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSetTeamAuthority::kMinLvFieldNumber;
const int GCSetTeamAuthority::kMaxLvFieldNumber;
const int GCSetTeamAuthority::kMinBattleNumberFieldNumber;
const int GCSetTeamAuthority::kTargetIDFieldNumber;
const int GCSetTeamAuthority::kAutoFollwFieldNumber;
const int GCSetTeamAuthority::kAutoAgreeFieldNumber;
#endif  // !_MSC_VER

GCSetTeamAuthority::GCSetTeamAuthority()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSetTeamAuthority)
}

void GCSetTeamAuthority::InitAsDefaultInstance() {
}

GCSetTeamAuthority::GCSetTeamAuthority(const GCSetTeamAuthority& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSetTeamAuthority)
}

void GCSetTeamAuthority::SharedCtor() {
  _cached_size_ = 0;
  minlv_ = 0;
  maxlv_ = 0;
  minbattlenumber_ = 0;
  targetid_ = 0;
  autofollw_ = 0;
  autoagree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSetTeamAuthority::~GCSetTeamAuthority() {
  // @@protoc_insertion_point(destructor:GCSetTeamAuthority)
  SharedDtor();
}

void GCSetTeamAuthority::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSetTeamAuthority::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSetTeamAuthority::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSetTeamAuthority_descriptor_;
}

const GCSetTeamAuthority& GCSetTeamAuthority::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

GCSetTeamAuthority* GCSetTeamAuthority::default_instance_ = NULL;

GCSetTeamAuthority* GCSetTeamAuthority::New() const {
  return new GCSetTeamAuthority;
}

void GCSetTeamAuthority::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSetTeamAuthority*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(minlv_, autoagree_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSetTeamAuthority::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSetTeamAuthority)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 minLv = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlv_)));
          set_has_minlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxLv;
        break;
      }

      // optional int32 maxLv = 2;
      case 2: {
        if (tag == 16) {
         parse_maxLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlv_)));
          set_has_maxlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_minBattleNumber;
        break;
      }

      // optional int32 minBattleNumber = 3;
      case 3: {
        if (tag == 24) {
         parse_minBattleNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minbattlenumber_)));
          set_has_minbattlenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 4;
      case 4: {
        if (tag == 32) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_autoFollw;
        break;
      }

      // optional int32 autoFollw = 5;
      case 5: {
        if (tag == 40) {
         parse_autoFollw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autofollw_)));
          set_has_autofollw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_autoAgree;
        break;
      }

      // optional int32 autoAgree = 6;
      case 6: {
        if (tag == 48) {
         parse_autoAgree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoagree_)));
          set_has_autoagree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSetTeamAuthority)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSetTeamAuthority)
  return false;
#undef DO_
}

void GCSetTeamAuthority::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSetTeamAuthority)
  // optional int32 minLv = 1;
  if (has_minlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->minlv(), output);
  }

  // optional int32 maxLv = 2;
  if (has_maxlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxlv(), output);
  }

  // optional int32 minBattleNumber = 3;
  if (has_minbattlenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minbattlenumber(), output);
  }

  // optional int32 targetID = 4;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetid(), output);
  }

  // optional int32 autoFollw = 5;
  if (has_autofollw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->autofollw(), output);
  }

  // optional int32 autoAgree = 6;
  if (has_autoagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->autoagree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSetTeamAuthority)
}

::google::protobuf::uint8* GCSetTeamAuthority::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSetTeamAuthority)
  // optional int32 minLv = 1;
  if (has_minlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->minlv(), target);
  }

  // optional int32 maxLv = 2;
  if (has_maxlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxlv(), target);
  }

  // optional int32 minBattleNumber = 3;
  if (has_minbattlenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minbattlenumber(), target);
  }

  // optional int32 targetID = 4;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetid(), target);
  }

  // optional int32 autoFollw = 5;
  if (has_autofollw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->autofollw(), target);
  }

  // optional int32 autoAgree = 6;
  if (has_autoagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->autoagree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSetTeamAuthority)
  return target;
}

int GCSetTeamAuthority::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 minLv = 1;
    if (has_minlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minlv());
    }

    // optional int32 maxLv = 2;
    if (has_maxlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlv());
    }

    // optional int32 minBattleNumber = 3;
    if (has_minbattlenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minbattlenumber());
    }

    // optional int32 targetID = 4;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // optional int32 autoFollw = 5;
    if (has_autofollw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autofollw());
    }

    // optional int32 autoAgree = 6;
    if (has_autoagree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoagree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSetTeamAuthority::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSetTeamAuthority* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSetTeamAuthority*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSetTeamAuthority::MergeFrom(const GCSetTeamAuthority& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minlv()) {
      set_minlv(from.minlv());
    }
    if (from.has_maxlv()) {
      set_maxlv(from.maxlv());
    }
    if (from.has_minbattlenumber()) {
      set_minbattlenumber(from.minbattlenumber());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_autofollw()) {
      set_autofollw(from.autofollw());
    }
    if (from.has_autoagree()) {
      set_autoagree(from.autoagree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSetTeamAuthority::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSetTeamAuthority::CopyFrom(const GCSetTeamAuthority& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSetTeamAuthority::IsInitialized() const {

  return true;
}

void GCSetTeamAuthority::Swap(GCSetTeamAuthority* other) {
  if (other != this) {
    std::swap(minlv_, other->minlv_);
    std::swap(maxlv_, other->maxlv_);
    std::swap(minbattlenumber_, other->minbattlenumber_);
    std::swap(targetid_, other->targetid_);
    std::swap(autofollw_, other->autofollw_);
    std::swap(autoagree_, other->autoagree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSetTeamAuthority::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSetTeamAuthority_descriptor_;
  metadata.reflection = GCSetTeamAuthority_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSetAutoAgree::kAutoAgreeFieldNumber;
#endif  // !_MSC_VER

CGSetAutoAgree::CGSetAutoAgree()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSetAutoAgree)
}

void CGSetAutoAgree::InitAsDefaultInstance() {
}

CGSetAutoAgree::CGSetAutoAgree(const CGSetAutoAgree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSetAutoAgree)
}

void CGSetAutoAgree::SharedCtor() {
  _cached_size_ = 0;
  autoagree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSetAutoAgree::~CGSetAutoAgree() {
  // @@protoc_insertion_point(destructor:CGSetAutoAgree)
  SharedDtor();
}

void CGSetAutoAgree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSetAutoAgree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSetAutoAgree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSetAutoAgree_descriptor_;
}

const CGSetAutoAgree& CGSetAutoAgree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGSetAutoAgree* CGSetAutoAgree::default_instance_ = NULL;

CGSetAutoAgree* CGSetAutoAgree::New() const {
  return new CGSetAutoAgree;
}

void CGSetAutoAgree::Clear() {
  autoagree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSetAutoAgree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSetAutoAgree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 autoAgree = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoagree_)));
          set_has_autoagree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSetAutoAgree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSetAutoAgree)
  return false;
#undef DO_
}

void CGSetAutoAgree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSetAutoAgree)
  // optional int32 autoAgree = 1;
  if (has_autoagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->autoagree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSetAutoAgree)
}

::google::protobuf::uint8* CGSetAutoAgree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSetAutoAgree)
  // optional int32 autoAgree = 1;
  if (has_autoagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->autoagree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSetAutoAgree)
  return target;
}

int CGSetAutoAgree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 autoAgree = 1;
    if (has_autoagree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoagree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSetAutoAgree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSetAutoAgree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSetAutoAgree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSetAutoAgree::MergeFrom(const CGSetAutoAgree& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autoagree()) {
      set_autoagree(from.autoagree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSetAutoAgree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSetAutoAgree::CopyFrom(const CGSetAutoAgree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSetAutoAgree::IsInitialized() const {

  return true;
}

void CGSetAutoAgree::Swap(CGSetAutoAgree* other) {
  if (other != this) {
    std::swap(autoagree_, other->autoagree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSetAutoAgree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSetAutoAgree_descriptor_;
  metadata.reflection = CGSetAutoAgree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSetAutoAgree::kAutoAgreeFieldNumber;
#endif  // !_MSC_VER

GCSetAutoAgree::GCSetAutoAgree()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSetAutoAgree)
}

void GCSetAutoAgree::InitAsDefaultInstance() {
}

GCSetAutoAgree::GCSetAutoAgree(const GCSetAutoAgree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSetAutoAgree)
}

void GCSetAutoAgree::SharedCtor() {
  _cached_size_ = 0;
  autoagree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSetAutoAgree::~GCSetAutoAgree() {
  // @@protoc_insertion_point(destructor:GCSetAutoAgree)
  SharedDtor();
}

void GCSetAutoAgree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSetAutoAgree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSetAutoAgree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSetAutoAgree_descriptor_;
}

const GCSetAutoAgree& GCSetAutoAgree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

GCSetAutoAgree* GCSetAutoAgree::default_instance_ = NULL;

GCSetAutoAgree* GCSetAutoAgree::New() const {
  return new GCSetAutoAgree;
}

void GCSetAutoAgree::Clear() {
  autoagree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSetAutoAgree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSetAutoAgree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 autoAgree = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoagree_)));
          set_has_autoagree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSetAutoAgree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSetAutoAgree)
  return false;
#undef DO_
}

void GCSetAutoAgree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSetAutoAgree)
  // optional int32 autoAgree = 1;
  if (has_autoagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->autoagree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSetAutoAgree)
}

::google::protobuf::uint8* GCSetAutoAgree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSetAutoAgree)
  // optional int32 autoAgree = 1;
  if (has_autoagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->autoagree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSetAutoAgree)
  return target;
}

int GCSetAutoAgree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 autoAgree = 1;
    if (has_autoagree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoagree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSetAutoAgree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSetAutoAgree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSetAutoAgree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSetAutoAgree::MergeFrom(const GCSetAutoAgree& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autoagree()) {
      set_autoagree(from.autoagree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSetAutoAgree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSetAutoAgree::CopyFrom(const GCSetAutoAgree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSetAutoAgree::IsInitialized() const {

  return true;
}

void GCSetAutoAgree::Swap(GCSetAutoAgree* other) {
  if (other != this) {
    std::swap(autoagree_, other->autoagree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSetAutoAgree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSetAutoAgree_descriptor_;
  metadata.reflection = GCSetAutoAgree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGCallFlow::CGCallFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCallFlow)
}

void CGCallFlow::InitAsDefaultInstance() {
}

CGCallFlow::CGCallFlow(const CGCallFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCallFlow)
}

void CGCallFlow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCallFlow::~CGCallFlow() {
  // @@protoc_insertion_point(destructor:CGCallFlow)
  SharedDtor();
}

void CGCallFlow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCallFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCallFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCallFlow_descriptor_;
}

const CGCallFlow& CGCallFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGCallFlow* CGCallFlow::default_instance_ = NULL;

CGCallFlow* CGCallFlow::New() const {
  return new CGCallFlow;
}

void CGCallFlow::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCallFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCallFlow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGCallFlow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCallFlow)
  return false;
#undef DO_
}

void CGCallFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCallFlow)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCallFlow)
}

::google::protobuf::uint8* CGCallFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCallFlow)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCallFlow)
  return target;
}

int CGCallFlow::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCallFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCallFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCallFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCallFlow::MergeFrom(const CGCallFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCallFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCallFlow::CopyFrom(const CGCallFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCallFlow::IsInitialized() const {

  return true;
}

void CGCallFlow::Swap(CGCallFlow* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCallFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCallFlow_descriptor_;
  metadata.reflection = CGCallFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCallFlow::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

GCCallFlow::GCCallFlow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCallFlow)
}

void GCCallFlow::InitAsDefaultInstance() {
}

GCCallFlow::GCCallFlow(const GCCallFlow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCallFlow)
}

void GCCallFlow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCallFlow::~GCCallFlow() {
  // @@protoc_insertion_point(destructor:GCCallFlow)
  SharedDtor();
}

void GCCallFlow::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void GCCallFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCallFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCallFlow_descriptor_;
}

const GCCallFlow& GCCallFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

GCCallFlow* GCCallFlow::default_instance_ = NULL;

GCCallFlow* GCCallFlow::New() const {
  return new GCCallFlow;
}

void GCCallFlow::Clear() {
  if (has_playername()) {
    if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      playername_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCallFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCallFlow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCallFlow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCallFlow)
  return false;
#undef DO_
}

void GCCallFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCallFlow)
  // optional string playerName = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCallFlow)
}

::google::protobuf::uint8* GCCallFlow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCallFlow)
  // optional string playerName = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCallFlow)
  return target;
}

int GCCallFlow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerName = 1;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCallFlow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCallFlow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCallFlow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCallFlow::MergeFrom(const GCCallFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCallFlow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCallFlow::CopyFrom(const GCCallFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCallFlow::IsInitialized() const {

  return true;
}

void GCCallFlow::Swap(GCCallFlow* other) {
  if (other != this) {
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCallFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCallFlow_descriptor_;
  metadata.reflection = GCCallFlow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGMemberResponse::kResFieldNumber;
#endif  // !_MSC_VER

CGMemberResponse::CGMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGMemberResponse)
}

void CGMemberResponse::InitAsDefaultInstance() {
}

CGMemberResponse::CGMemberResponse(const CGMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGMemberResponse)
}

void CGMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMemberResponse::~CGMemberResponse() {
  // @@protoc_insertion_point(destructor:CGMemberResponse)
  SharedDtor();
}

void CGMemberResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMemberResponse_descriptor_;
}

const CGMemberResponse& CGMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGMemberResponse* CGMemberResponse::default_instance_ = NULL;

CGMemberResponse* CGMemberResponse::New() const {
  return new CGMemberResponse;
}

void CGMemberResponse::Clear() {
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGMemberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 res = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGMemberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGMemberResponse)
  return false;
#undef DO_
}

void CGMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGMemberResponse)
  // optional int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGMemberResponse)
}

::google::protobuf::uint8* CGMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGMemberResponse)
  // optional int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGMemberResponse)
  return target;
}

int CGMemberResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMemberResponse::MergeFrom(const CGMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMemberResponse::CopyFrom(const CGMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMemberResponse::IsInitialized() const {

  return true;
}

void CGMemberResponse::Swap(CGMemberResponse* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGMemberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGMemberResponse_descriptor_;
  metadata.reflection = CGMemberResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGMemberFolw::kAutoFolwFieldNumber;
#endif  // !_MSC_VER

CGMemberFolw::CGMemberFolw()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGMemberFolw)
}

void CGMemberFolw::InitAsDefaultInstance() {
}

CGMemberFolw::CGMemberFolw(const CGMemberFolw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGMemberFolw)
}

void CGMemberFolw::SharedCtor() {
  _cached_size_ = 0;
  autofolw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMemberFolw::~CGMemberFolw() {
  // @@protoc_insertion_point(destructor:CGMemberFolw)
  SharedDtor();
}

void CGMemberFolw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGMemberFolw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGMemberFolw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMemberFolw_descriptor_;
}

const CGMemberFolw& CGMemberFolw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGMemberFolw* CGMemberFolw::default_instance_ = NULL;

CGMemberFolw* CGMemberFolw::New() const {
  return new CGMemberFolw;
}

void CGMemberFolw::Clear() {
  autofolw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMemberFolw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGMemberFolw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 autoFolw = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autofolw_)));
          set_has_autofolw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGMemberFolw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGMemberFolw)
  return false;
#undef DO_
}

void CGMemberFolw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGMemberFolw)
  // optional int32 autoFolw = 1;
  if (has_autofolw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->autofolw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGMemberFolw)
}

::google::protobuf::uint8* CGMemberFolw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGMemberFolw)
  // optional int32 autoFolw = 1;
  if (has_autofolw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->autofolw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGMemberFolw)
  return target;
}

int CGMemberFolw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 autoFolw = 1;
    if (has_autofolw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autofolw());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGMemberFolw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMemberFolw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMemberFolw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMemberFolw::MergeFrom(const CGMemberFolw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autofolw()) {
      set_autofolw(from.autofolw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMemberFolw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMemberFolw::CopyFrom(const CGMemberFolw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMemberFolw::IsInitialized() const {

  return true;
}

void CGMemberFolw::Swap(CGMemberFolw* other) {
  if (other != this) {
    std::swap(autofolw_, other->autofolw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGMemberFolw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGMemberFolw_descriptor_;
  metadata.reflection = CGMemberFolw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCMemberFolw::kAutoFolwFieldNumber;
const int GCMemberFolw::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

GCMemberFolw::GCMemberFolw()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCMemberFolw)
}

void GCMemberFolw::InitAsDefaultInstance() {
}

GCMemberFolw::GCMemberFolw(const GCMemberFolw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCMemberFolw)
}

void GCMemberFolw::SharedCtor() {
  _cached_size_ = 0;
  autofolw_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCMemberFolw::~GCMemberFolw() {
  // @@protoc_insertion_point(destructor:GCMemberFolw)
  SharedDtor();
}

void GCMemberFolw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCMemberFolw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCMemberFolw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCMemberFolw_descriptor_;
}

const GCMemberFolw& GCMemberFolw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

GCMemberFolw* GCMemberFolw::default_instance_ = NULL;

GCMemberFolw* GCMemberFolw::New() const {
  return new GCMemberFolw;
}

void GCMemberFolw::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCMemberFolw*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, autofolw_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCMemberFolw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCMemberFolw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 autoFolw = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autofolw_)));
          set_has_autofolw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional int64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCMemberFolw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCMemberFolw)
  return false;
#undef DO_
}

void GCMemberFolw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCMemberFolw)
  // optional int32 autoFolw = 1;
  if (has_autofolw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->autofolw(), output);
  }

  // optional int64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCMemberFolw)
}

::google::protobuf::uint8* GCMemberFolw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCMemberFolw)
  // optional int32 autoFolw = 1;
  if (has_autofolw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->autofolw(), target);
  }

  // optional int64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCMemberFolw)
  return target;
}

int GCMemberFolw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 autoFolw = 1;
    if (has_autofolw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autofolw());
    }

    // optional int64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCMemberFolw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCMemberFolw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCMemberFolw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCMemberFolw::MergeFrom(const GCMemberFolw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autofolw()) {
      set_autofolw(from.autofolw());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCMemberFolw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCMemberFolw::CopyFrom(const GCMemberFolw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMemberFolw::IsInitialized() const {

  return true;
}

void GCMemberFolw::Swap(GCMemberFolw* other) {
  if (other != this) {
    std::swap(autofolw_, other->autofolw_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCMemberFolw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCMemberFolw_descriptor_;
  metadata.reflection = GCMemberFolw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGQuickTeam::kAutoQuickFieldNumber;
const int CGQuickTeam::kTargetIDFieldNumber;
#endif  // !_MSC_VER

CGQuickTeam::CGQuickTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGQuickTeam)
}

void CGQuickTeam::InitAsDefaultInstance() {
}

CGQuickTeam::CGQuickTeam(const CGQuickTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGQuickTeam)
}

void CGQuickTeam::SharedCtor() {
  _cached_size_ = 0;
  autoquick_ = 0;
  targetid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGQuickTeam::~CGQuickTeam() {
  // @@protoc_insertion_point(destructor:CGQuickTeam)
  SharedDtor();
}

void CGQuickTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGQuickTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGQuickTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGQuickTeam_descriptor_;
}

const CGQuickTeam& CGQuickTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

CGQuickTeam* CGQuickTeam::default_instance_ = NULL;

CGQuickTeam* CGQuickTeam::New() const {
  return new CGQuickTeam;
}

void CGQuickTeam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGQuickTeam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(autoquick_, targetid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGQuickTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGQuickTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 autoQuick = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoquick_)));
          set_has_autoquick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 2;
      case 2: {
        if (tag == 16) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGQuickTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGQuickTeam)
  return false;
#undef DO_
}

void CGQuickTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGQuickTeam)
  // optional int32 autoQuick = 1;
  if (has_autoquick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->autoquick(), output);
  }

  // optional int32 targetID = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGQuickTeam)
}

::google::protobuf::uint8* CGQuickTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGQuickTeam)
  // optional int32 autoQuick = 1;
  if (has_autoquick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->autoquick(), target);
  }

  // optional int32 targetID = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGQuickTeam)
  return target;
}

int CGQuickTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 autoQuick = 1;
    if (has_autoquick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoquick());
    }

    // optional int32 targetID = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGQuickTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGQuickTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGQuickTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGQuickTeam::MergeFrom(const CGQuickTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autoquick()) {
      set_autoquick(from.autoquick());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGQuickTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGQuickTeam::CopyFrom(const CGQuickTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGQuickTeam::IsInitialized() const {

  return true;
}

void CGQuickTeam::Swap(CGQuickTeam* other) {
  if (other != this) {
    std::swap(autoquick_, other->autoquick_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGQuickTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGQuickTeam_descriptor_;
  metadata.reflection = CGQuickTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCQuickTeam::kAutoQuickFieldNumber;
#endif  // !_MSC_VER

GCQuickTeam::GCQuickTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCQuickTeam)
}

void GCQuickTeam::InitAsDefaultInstance() {
}

GCQuickTeam::GCQuickTeam(const GCQuickTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCQuickTeam)
}

void GCQuickTeam::SharedCtor() {
  _cached_size_ = 0;
  autoquick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCQuickTeam::~GCQuickTeam() {
  // @@protoc_insertion_point(destructor:GCQuickTeam)
  SharedDtor();
}

void GCQuickTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCQuickTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCQuickTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCQuickTeam_descriptor_;
}

const GCQuickTeam& GCQuickTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

GCQuickTeam* GCQuickTeam::default_instance_ = NULL;

GCQuickTeam* GCQuickTeam::New() const {
  return new GCQuickTeam;
}

void GCQuickTeam::Clear() {
  autoquick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCQuickTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCQuickTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 autoQuick = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoquick_)));
          set_has_autoquick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCQuickTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCQuickTeam)
  return false;
#undef DO_
}

void GCQuickTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCQuickTeam)
  // optional int32 autoQuick = 1;
  if (has_autoquick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->autoquick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCQuickTeam)
}

::google::protobuf::uint8* GCQuickTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCQuickTeam)
  // optional int32 autoQuick = 1;
  if (has_autoquick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->autoquick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCQuickTeam)
  return target;
}

int GCQuickTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 autoQuick = 1;
    if (has_autoquick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoquick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCQuickTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCQuickTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCQuickTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCQuickTeam::MergeFrom(const GCQuickTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autoquick()) {
      set_autoquick(from.autoquick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCQuickTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCQuickTeam::CopyFrom(const GCQuickTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCQuickTeam::IsInitialized() const {

  return true;
}

void GCQuickTeam::Swap(GCQuickTeam* other) {
  if (other != this) {
    std::swap(autoquick_, other->autoquick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCQuickTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCQuickTeam_descriptor_;
  metadata.reflection = GCQuickTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCFllowQueue::kFllowIdsFieldNumber;
#endif  // !_MSC_VER

GCFllowQueue::GCFllowQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCFllowQueue)
}

void GCFllowQueue::InitAsDefaultInstance() {
}

GCFllowQueue::GCFllowQueue(const GCFllowQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCFllowQueue)
}

void GCFllowQueue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCFllowQueue::~GCFllowQueue() {
  // @@protoc_insertion_point(destructor:GCFllowQueue)
  SharedDtor();
}

void GCFllowQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCFllowQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCFllowQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCFllowQueue_descriptor_;
}

const GCFllowQueue& GCFllowQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamMessage_2eproto();
  return *default_instance_;
}

GCFllowQueue* GCFllowQueue::default_instance_ = NULL;

GCFllowQueue* GCFllowQueue::New() const {
  return new GCFllowQueue;
}

void GCFllowQueue::Clear() {
  fllowids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCFllowQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCFllowQueue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 fllowIds = 1;
      case 1: {
        if (tag == 8) {
         parse_fllowIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_fllowids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_fllowids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_fllowIds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCFllowQueue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCFllowQueue)
  return false;
#undef DO_
}

void GCFllowQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCFllowQueue)
  // repeated int64 fllowIds = 1;
  for (int i = 0; i < this->fllowids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->fllowids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCFllowQueue)
}

::google::protobuf::uint8* GCFllowQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCFllowQueue)
  // repeated int64 fllowIds = 1;
  for (int i = 0; i < this->fllowids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->fllowids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCFllowQueue)
  return target;
}

int GCFllowQueue::ByteSize() const {
  int total_size = 0;

  // repeated int64 fllowIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fllowids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->fllowids(i));
    }
    total_size += 1 * this->fllowids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCFllowQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCFllowQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCFllowQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCFllowQueue::MergeFrom(const GCFllowQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  fllowids_.MergeFrom(from.fllowids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCFllowQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCFllowQueue::CopyFrom(const GCFllowQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFllowQueue::IsInitialized() const {

  return true;
}

void GCFllowQueue::Swap(GCFllowQueue* other) {
  if (other != this) {
    fllowids_.Swap(&other->fllowids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCFllowQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCFllowQueue_descriptor_;
  metadata.reflection = GCFllowQueue_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
