// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamMessage.proto

#ifndef PROTOBUF_TeamMessage_2eproto__INCLUDED
#define PROTOBUF_TeamMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "InnerMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TeamMessage_2eproto();
void protobuf_AssignDesc_TeamMessage_2eproto();
void protobuf_ShutdownFile_TeamMessage_2eproto();

class TeamMember;
class TeamInfo;
class TeamSampleInfo;
class CGCreateTeam;
class GCRefreashMyTeam;
class CGOpenTeamView;
class GCOPenTeamView;
class CGLeaveTeam;
class GCLeaveTeam;
class GCAddTeamMember;
class GCDelTeamMember;
class GCUpdateTeamMember;
class CGApplyTeam;
class GCApplyTeamLeader;
class CGAgreeApply;
class CGInviteOther;
class GCInviteOther;
class CGAgreeInvite;
class CGKickedOut;
class CGTransferCaption;
class CGSetTeamAuthority;
class GCSetTeamAuthority;
class CGSetAutoAgree;
class GCSetAutoAgree;
class CGCallFlow;
class GCCallFlow;
class CGMemberResponse;
class CGMemberFolw;
class GCMemberFolw;
class CGQuickTeam;
class GCQuickTeam;
class GCFllowQueue;

// ===================================================================

class TeamMember : public ::google::protobuf::Message {
 public:
  TeamMember();
  virtual ~TeamMember();

  TeamMember(const TeamMember& from);

  inline TeamMember& operator=(const TeamMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamMember& default_instance();

  void Swap(TeamMember* other);

  // implements Message ----------------------------------------------

  TeamMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamMember& from);
  void MergeFrom(const TeamMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional string nickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 fightValue = 4;
  inline bool has_fightvalue() const;
  inline void clear_fightvalue();
  static const int kFightValueFieldNumber = 4;
  inline ::google::protobuf::int32 fightvalue() const;
  inline void set_fightvalue(::google::protobuf::int32 value);

  // optional int32 onLine = 5;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnLineFieldNumber = 5;
  inline ::google::protobuf::int32 online() const;
  inline void set_online(::google::protobuf::int32 value);

  // optional int32 professionId = 6;
  inline bool has_professionid() const;
  inline void clear_professionid();
  static const int kProfessionIdFieldNumber = 6;
  inline ::google::protobuf::int32 professionid() const;
  inline void set_professionid(::google::protobuf::int32 value);

  // optional int32 sex = 7;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 7;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 isFollow = 8;
  inline bool has_isfollow() const;
  inline void clear_isfollow();
  static const int kIsFollowFieldNumber = 8;
  inline ::google::protobuf::int32 isfollow() const;
  inline void set_isfollow(::google::protobuf::int32 value);

  // optional int64 teamID = 9;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 9;
  inline ::google::protobuf::int64 teamid() const;
  inline void set_teamid(::google::protobuf::int64 value);

  // optional int32 hp = 10;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 10;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 maxHp = 11;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 11;
  inline ::google::protobuf::int32 maxhp() const;
  inline void set_maxhp(::google::protobuf::int32 value);

  // optional int32 iconid = 12;
  inline bool has_iconid() const;
  inline void clear_iconid();
  static const int kIconidFieldNumber = 12;
  inline ::google::protobuf::int32 iconid() const;
  inline void set_iconid(::google::protobuf::int32 value);

  // optional .ChangeEquipInfo changeEquipInfo = 13;
  inline bool has_changeequipinfo() const;
  inline void clear_changeequipinfo();
  static const int kChangeEquipInfoFieldNumber = 13;
  inline const ::ChangeEquipInfo& changeequipinfo() const;
  inline ::ChangeEquipInfo* mutable_changeequipinfo();
  inline ::ChangeEquipInfo* release_changeequipinfo();
  inline void set_allocated_changeequipinfo(::ChangeEquipInfo* changeequipinfo);

  // optional .Vector3Info pos = 14;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 14;
  inline const ::Vector3Info& pos() const;
  inline ::Vector3Info* mutable_pos();
  inline ::Vector3Info* release_pos();
  inline void set_allocated_pos(::Vector3Info* pos);

  // optional int32 sceneID = 15;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIDFieldNumber = 15;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamMember)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fightvalue();
  inline void clear_has_fightvalue();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_professionid();
  inline void clear_has_professionid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_isfollow();
  inline void clear_has_isfollow();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_iconid();
  inline void clear_has_iconid();
  inline void set_has_changeequipinfo();
  inline void clear_has_changeequipinfo();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::std::string* nickname_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 fightvalue_;
  ::google::protobuf::int32 online_;
  ::google::protobuf::int32 professionid_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 isfollow_;
  ::google::protobuf::int64 teamid_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 maxhp_;
  ::ChangeEquipInfo* changeequipinfo_;
  ::google::protobuf::int32 iconid_;
  ::google::protobuf::int32 sceneid_;
  ::Vector3Info* pos_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static TeamMember* default_instance_;
};
// -------------------------------------------------------------------

class TeamInfo : public ::google::protobuf::Message {
 public:
  TeamInfo();
  virtual ~TeamInfo();

  TeamInfo(const TeamInfo& from);

  inline TeamInfo& operator=(const TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamInfo& default_instance();

  void Swap(TeamInfo* other);

  // implements Message ----------------------------------------------

  TeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamInfo& from);
  void MergeFrom(const TeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 teamID = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 1;
  inline ::google::protobuf::int64 teamid() const;
  inline void set_teamid(::google::protobuf::int64 value);

  // optional string teamName = 2;
  inline bool has_teamname() const;
  inline void clear_teamname();
  static const int kTeamNameFieldNumber = 2;
  inline const ::std::string& teamname() const;
  inline void set_teamname(const ::std::string& value);
  inline void set_teamname(const char* value);
  inline void set_teamname(const char* value, size_t size);
  inline ::std::string* mutable_teamname();
  inline ::std::string* release_teamname();
  inline void set_allocated_teamname(::std::string* teamname);

  // repeated .TeamMember memberInfo = 3;
  inline int memberinfo_size() const;
  inline void clear_memberinfo();
  static const int kMemberInfoFieldNumber = 3;
  inline const ::TeamMember& memberinfo(int index) const;
  inline ::TeamMember* mutable_memberinfo(int index);
  inline ::TeamMember* add_memberinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::TeamMember >&
      memberinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::TeamMember >*
      mutable_memberinfo();

  // optional int64 captionID = 4;
  inline bool has_captionid() const;
  inline void clear_captionid();
  static const int kCaptionIDFieldNumber = 4;
  inline ::google::protobuf::int64 captionid() const;
  inline void set_captionid(::google::protobuf::int64 value);

  // optional int32 targetID = 5;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 5;
  inline ::google::protobuf::int32 targetid() const;
  inline void set_targetid(::google::protobuf::int32 value);

  // optional int32 fightValue = 6;
  inline bool has_fightvalue() const;
  inline void clear_fightvalue();
  static const int kFightValueFieldNumber = 6;
  inline ::google::protobuf::int32 fightvalue() const;
  inline void set_fightvalue(::google::protobuf::int32 value);

  // optional int32 minFight = 7;
  inline bool has_minfight() const;
  inline void clear_minfight();
  static const int kMinFightFieldNumber = 7;
  inline ::google::protobuf::int32 minfight() const;
  inline void set_minfight(::google::protobuf::int32 value);

  // optional int32 maxLevel = 8;
  inline bool has_maxlevel() const;
  inline void clear_maxlevel();
  static const int kMaxLevelFieldNumber = 8;
  inline ::google::protobuf::int32 maxlevel() const;
  inline void set_maxlevel(::google::protobuf::int32 value);

  // optional int32 minLevel = 9;
  inline bool has_minlevel() const;
  inline void clear_minlevel();
  static const int kMinLevelFieldNumber = 9;
  inline ::google::protobuf::int32 minlevel() const;
  inline void set_minlevel(::google::protobuf::int32 value);

  // optional int32 isFollow = 10;
  inline bool has_isfollow() const;
  inline void clear_isfollow();
  static const int kIsFollowFieldNumber = 10;
  inline ::google::protobuf::int32 isfollow() const;
  inline void set_isfollow(::google::protobuf::int32 value);

  // optional int32 autoMate = 11;
  inline bool has_automate() const;
  inline void clear_automate();
  static const int kAutoMateFieldNumber = 11;
  inline ::google::protobuf::int32 automate() const;
  inline void set_automate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamInfo)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_teamname();
  inline void clear_has_teamname();
  inline void set_has_captionid();
  inline void clear_has_captionid();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_fightvalue();
  inline void clear_has_fightvalue();
  inline void set_has_minfight();
  inline void clear_has_minfight();
  inline void set_has_maxlevel();
  inline void clear_has_maxlevel();
  inline void set_has_minlevel();
  inline void clear_has_minlevel();
  inline void set_has_isfollow();
  inline void clear_has_isfollow();
  inline void set_has_automate();
  inline void clear_has_automate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 teamid_;
  ::std::string* teamname_;
  ::google::protobuf::RepeatedPtrField< ::TeamMember > memberinfo_;
  ::google::protobuf::int64 captionid_;
  ::google::protobuf::int32 targetid_;
  ::google::protobuf::int32 fightvalue_;
  ::google::protobuf::int32 minfight_;
  ::google::protobuf::int32 maxlevel_;
  ::google::protobuf::int32 minlevel_;
  ::google::protobuf::int32 isfollow_;
  ::google::protobuf::int32 automate_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static TeamInfo* default_instance_;
};
// -------------------------------------------------------------------

class TeamSampleInfo : public ::google::protobuf::Message {
 public:
  TeamSampleInfo();
  virtual ~TeamSampleInfo();

  TeamSampleInfo(const TeamSampleInfo& from);

  inline TeamSampleInfo& operator=(const TeamSampleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamSampleInfo& default_instance();

  void Swap(TeamSampleInfo* other);

  // implements Message ----------------------------------------------

  TeamSampleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamSampleInfo& from);
  void MergeFrom(const TeamSampleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 teamID = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 1;
  inline ::google::protobuf::int64 teamid() const;
  inline void set_teamid(::google::protobuf::int64 value);

  // optional string teamName = 2;
  inline bool has_teamname() const;
  inline void clear_teamname();
  static const int kTeamNameFieldNumber = 2;
  inline const ::std::string& teamname() const;
  inline void set_teamname(const ::std::string& value);
  inline void set_teamname(const char* value);
  inline void set_teamname(const char* value, size_t size);
  inline ::std::string* mutable_teamname();
  inline ::std::string* release_teamname();
  inline void set_allocated_teamname(::std::string* teamname);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 iconid = 5;
  inline bool has_iconid() const;
  inline void clear_iconid();
  static const int kIconidFieldNumber = 5;
  inline ::google::protobuf::int32 iconid() const;
  inline void set_iconid(::google::protobuf::int32 value);

  // optional int32 professionId = 6;
  inline bool has_professionid() const;
  inline void clear_professionid();
  static const int kProfessionIdFieldNumber = 6;
  inline ::google::protobuf::int32 professionid() const;
  inline void set_professionid(::google::protobuf::int32 value);

  // optional int32 isNear = 7;
  inline bool has_isnear() const;
  inline void clear_isnear();
  static const int kIsNearFieldNumber = 7;
  inline ::google::protobuf::int32 isnear() const;
  inline void set_isnear(::google::protobuf::int32 value);

  // optional int32 targetID = 8;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 8;
  inline ::google::protobuf::int32 targetid() const;
  inline void set_targetid(::google::protobuf::int32 value);

  // optional int32 maxLevel = 9;
  inline bool has_maxlevel() const;
  inline void clear_maxlevel();
  static const int kMaxLevelFieldNumber = 9;
  inline ::google::protobuf::int32 maxlevel() const;
  inline void set_maxlevel(::google::protobuf::int32 value);

  // optional int32 minLevel = 10;
  inline bool has_minlevel() const;
  inline void clear_minlevel();
  static const int kMinLevelFieldNumber = 10;
  inline ::google::protobuf::int32 minlevel() const;
  inline void set_minlevel(::google::protobuf::int32 value);

  // optional int32 sex = 11;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 11;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamSampleInfo)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_teamname();
  inline void clear_has_teamname();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_iconid();
  inline void clear_has_iconid();
  inline void set_has_professionid();
  inline void clear_has_professionid();
  inline void set_has_isnear();
  inline void clear_has_isnear();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_maxlevel();
  inline void clear_has_maxlevel();
  inline void set_has_minlevel();
  inline void clear_has_minlevel();
  inline void set_has_sex();
  inline void clear_has_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 teamid_;
  ::std::string* teamname_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 iconid_;
  ::google::protobuf::int32 professionid_;
  ::google::protobuf::int32 isnear_;
  ::google::protobuf::int32 targetid_;
  ::google::protobuf::int32 maxlevel_;
  ::google::protobuf::int32 minlevel_;
  ::google::protobuf::int32 sex_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static TeamSampleInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGCreateTeam : public ::google::protobuf::Message {
 public:
  CGCreateTeam();
  virtual ~CGCreateTeam();

  CGCreateTeam(const CGCreateTeam& from);

  inline CGCreateTeam& operator=(const CGCreateTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGCreateTeam& default_instance();

  void Swap(CGCreateTeam* other);

  // implements Message ----------------------------------------------

  CGCreateTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGCreateTeam& from);
  void MergeFrom(const CGCreateTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 targetID = 1;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 1;
  inline ::google::protobuf::int32 targetid() const;
  inline void set_targetid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGCreateTeam)
 private:
  inline void set_has_targetid();
  inline void clear_has_targetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 targetid_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGCreateTeam* default_instance_;
};
// -------------------------------------------------------------------

class GCRefreashMyTeam : public ::google::protobuf::Message {
 public:
  GCRefreashMyTeam();
  virtual ~GCRefreashMyTeam();

  GCRefreashMyTeam(const GCRefreashMyTeam& from);

  inline GCRefreashMyTeam& operator=(const GCRefreashMyTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCRefreashMyTeam& default_instance();

  void Swap(GCRefreashMyTeam* other);

  // implements Message ----------------------------------------------

  GCRefreashMyTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCRefreashMyTeam& from);
  void MergeFrom(const GCRefreashMyTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TeamInfo teamInfo = 1;
  inline bool has_teaminfo() const;
  inline void clear_teaminfo();
  static const int kTeamInfoFieldNumber = 1;
  inline const ::TeamInfo& teaminfo() const;
  inline ::TeamInfo* mutable_teaminfo();
  inline ::TeamInfo* release_teaminfo();
  inline void set_allocated_teaminfo(::TeamInfo* teaminfo);

  // @@protoc_insertion_point(class_scope:GCRefreashMyTeam)
 private:
  inline void set_has_teaminfo();
  inline void clear_has_teaminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::TeamInfo* teaminfo_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static GCRefreashMyTeam* default_instance_;
};
// -------------------------------------------------------------------

class CGOpenTeamView : public ::google::protobuf::Message {
 public:
  CGOpenTeamView();
  virtual ~CGOpenTeamView();

  CGOpenTeamView(const CGOpenTeamView& from);

  inline CGOpenTeamView& operator=(const CGOpenTeamView& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGOpenTeamView& default_instance();

  void Swap(CGOpenTeamView* other);

  // implements Message ----------------------------------------------

  CGOpenTeamView* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGOpenTeamView& from);
  void MergeFrom(const CGOpenTeamView& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGOpenTeamView)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGOpenTeamView* default_instance_;
};
// -------------------------------------------------------------------

class GCOPenTeamView : public ::google::protobuf::Message {
 public:
  GCOPenTeamView();
  virtual ~GCOPenTeamView();

  GCOPenTeamView(const GCOPenTeamView& from);

  inline GCOPenTeamView& operator=(const GCOPenTeamView& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCOPenTeamView& default_instance();

  void Swap(GCOPenTeamView* other);

  // implements Message ----------------------------------------------

  GCOPenTeamView* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCOPenTeamView& from);
  void MergeFrom(const GCOPenTeamView& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TeamMember members = 1;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 1;
  inline const ::TeamMember& members(int index) const;
  inline ::TeamMember* mutable_members(int index);
  inline ::TeamMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::TeamMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::TeamMember >*
      mutable_members();

  // repeated .TeamSampleInfo teams = 2;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 2;
  inline const ::TeamSampleInfo& teams(int index) const;
  inline ::TeamSampleInfo* mutable_teams(int index);
  inline ::TeamSampleInfo* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::TeamSampleInfo >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::TeamSampleInfo >*
      mutable_teams();

  // optional int32 autoAgree = 3;
  inline bool has_autoagree() const;
  inline void clear_autoagree();
  static const int kAutoAgreeFieldNumber = 3;
  inline ::google::protobuf::int32 autoagree() const;
  inline void set_autoagree(::google::protobuf::int32 value);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 autoMate = 5;
  inline bool has_automate() const;
  inline void clear_automate();
  static const int kAutoMateFieldNumber = 5;
  inline ::google::protobuf::int32 automate() const;
  inline void set_automate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCOPenTeamView)
 private:
  inline void set_has_autoagree();
  inline void clear_has_autoagree();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_automate();
  inline void clear_has_automate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TeamMember > members_;
  ::google::protobuf::RepeatedPtrField< ::TeamSampleInfo > teams_;
  ::google::protobuf::int32 autoagree_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 automate_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static GCOPenTeamView* default_instance_;
};
// -------------------------------------------------------------------

class CGLeaveTeam : public ::google::protobuf::Message {
 public:
  CGLeaveTeam();
  virtual ~CGLeaveTeam();

  CGLeaveTeam(const CGLeaveTeam& from);

  inline CGLeaveTeam& operator=(const CGLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGLeaveTeam& default_instance();

  void Swap(CGLeaveTeam* other);

  // implements Message ----------------------------------------------

  CGLeaveTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGLeaveTeam& from);
  void MergeFrom(const CGLeaveTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGLeaveTeam)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGLeaveTeam* default_instance_;
};
// -------------------------------------------------------------------

class GCLeaveTeam : public ::google::protobuf::Message {
 public:
  GCLeaveTeam();
  virtual ~GCLeaveTeam();

  GCLeaveTeam(const GCLeaveTeam& from);

  inline GCLeaveTeam& operator=(const GCLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCLeaveTeam& default_instance();

  void Swap(GCLeaveTeam* other);

  // implements Message ----------------------------------------------

  GCLeaveTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCLeaveTeam& from);
  void MergeFrom(const GCLeaveTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 isInitiative = 1;
  inline bool has_isinitiative() const;
  inline void clear_isinitiative();
  static const int kIsInitiativeFieldNumber = 1;
  inline ::google::protobuf::int32 isinitiative() const;
  inline void set_isinitiative(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCLeaveTeam)
 private:
  inline void set_has_isinitiative();
  inline void clear_has_isinitiative();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 isinitiative_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static GCLeaveTeam* default_instance_;
};
// -------------------------------------------------------------------

class GCAddTeamMember : public ::google::protobuf::Message {
 public:
  GCAddTeamMember();
  virtual ~GCAddTeamMember();

  GCAddTeamMember(const GCAddTeamMember& from);

  inline GCAddTeamMember& operator=(const GCAddTeamMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCAddTeamMember& default_instance();

  void Swap(GCAddTeamMember* other);

  // implements Message ----------------------------------------------

  GCAddTeamMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCAddTeamMember& from);
  void MergeFrom(const GCAddTeamMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TeamMember member = 1;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 1;
  inline const ::TeamMember& member() const;
  inline ::TeamMember* mutable_member();
  inline ::TeamMember* release_member();
  inline void set_allocated_member(::TeamMember* member);

  // @@protoc_insertion_point(class_scope:GCAddTeamMember)
 private:
  inline void set_has_member();
  inline void clear_has_member();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::TeamMember* member_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static GCAddTeamMember* default_instance_;
};
// -------------------------------------------------------------------

class GCDelTeamMember : public ::google::protobuf::Message {
 public:
  GCDelTeamMember();
  virtual ~GCDelTeamMember();

  GCDelTeamMember(const GCDelTeamMember& from);

  inline GCDelTeamMember& operator=(const GCDelTeamMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCDelTeamMember& default_instance();

  void Swap(GCDelTeamMember* other);

  // implements Message ----------------------------------------------

  GCDelTeamMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCDelTeamMember& from);
  void MergeFrom(const GCDelTeamMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCDelTeamMember)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static GCDelTeamMember* default_instance_;
};
// -------------------------------------------------------------------

class GCUpdateTeamMember : public ::google::protobuf::Message {
 public:
  GCUpdateTeamMember();
  virtual ~GCUpdateTeamMember();

  GCUpdateTeamMember(const GCUpdateTeamMember& from);

  inline GCUpdateTeamMember& operator=(const GCUpdateTeamMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCUpdateTeamMember& default_instance();

  void Swap(GCUpdateTeamMember* other);

  // implements Message ----------------------------------------------

  GCUpdateTeamMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCUpdateTeamMember& from);
  void MergeFrom(const GCUpdateTeamMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TeamMember member = 1;
  inline int member_size() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 1;
  inline const ::TeamMember& member(int index) const;
  inline ::TeamMember* mutable_member(int index);
  inline ::TeamMember* add_member();
  inline const ::google::protobuf::RepeatedPtrField< ::TeamMember >&
      member() const;
  inline ::google::protobuf::RepeatedPtrField< ::TeamMember >*
      mutable_member();

  // @@protoc_insertion_point(class_scope:GCUpdateTeamMember)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TeamMember > member_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static GCUpdateTeamMember* default_instance_;
};
// -------------------------------------------------------------------

class CGApplyTeam : public ::google::protobuf::Message {
 public:
  CGApplyTeam();
  virtual ~CGApplyTeam();

  CGApplyTeam(const CGApplyTeam& from);

  inline CGApplyTeam& operator=(const CGApplyTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGApplyTeam& default_instance();

  void Swap(CGApplyTeam* other);

  // implements Message ----------------------------------------------

  CGApplyTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGApplyTeam& from);
  void MergeFrom(const CGApplyTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 teamID = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 1;
  inline ::google::protobuf::int64 teamid() const;
  inline void set_teamid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGApplyTeam)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 teamid_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGApplyTeam* default_instance_;
};
// -------------------------------------------------------------------

class GCApplyTeamLeader : public ::google::protobuf::Message {
 public:
  GCApplyTeamLeader();
  virtual ~GCApplyTeamLeader();

  GCApplyTeamLeader(const GCApplyTeamLeader& from);

  inline GCApplyTeamLeader& operator=(const GCApplyTeamLeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCApplyTeamLeader& default_instance();

  void Swap(GCApplyTeamLeader* other);

  // implements Message ----------------------------------------------

  GCApplyTeamLeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCApplyTeamLeader& from);
  void MergeFrom(const GCApplyTeamLeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 applyId = 1;
  inline bool has_applyid() const;
  inline void clear_applyid();
  static const int kApplyIdFieldNumber = 1;
  inline ::google::protobuf::int64 applyid() const;
  inline void set_applyid(::google::protobuf::int64 value);

  // optional string applyName = 2;
  inline bool has_applyname() const;
  inline void clear_applyname();
  static const int kApplyNameFieldNumber = 2;
  inline const ::std::string& applyname() const;
  inline void set_applyname(const ::std::string& value);
  inline void set_applyname(const char* value);
  inline void set_applyname(const char* value, size_t size);
  inline ::std::string* mutable_applyname();
  inline ::std::string* release_applyname();
  inline void set_allocated_applyname(::std::string* applyname);

  // optional string battleNumber = 3;
  inline bool has_battlenumber() const;
  inline void clear_battlenumber();
  static const int kBattleNumberFieldNumber = 3;
  inline const ::std::string& battlenumber() const;
  inline void set_battlenumber(const ::std::string& value);
  inline void set_battlenumber(const char* value);
  inline void set_battlenumber(const char* value, size_t size);
  inline ::std::string* mutable_battlenumber();
  inline ::std::string* release_battlenumber();
  inline void set_allocated_battlenumber(::std::string* battlenumber);

  // @@protoc_insertion_point(class_scope:GCApplyTeamLeader)
 private:
  inline void set_has_applyid();
  inline void clear_has_applyid();
  inline void set_has_applyname();
  inline void clear_has_applyname();
  inline void set_has_battlenumber();
  inline void clear_has_battlenumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 applyid_;
  ::std::string* applyname_;
  ::std::string* battlenumber_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static GCApplyTeamLeader* default_instance_;
};
// -------------------------------------------------------------------

class CGAgreeApply : public ::google::protobuf::Message {
 public:
  CGAgreeApply();
  virtual ~CGAgreeApply();

  CGAgreeApply(const CGAgreeApply& from);

  inline CGAgreeApply& operator=(const CGAgreeApply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGAgreeApply& default_instance();

  void Swap(CGAgreeApply* other);

  // implements Message ----------------------------------------------

  CGAgreeApply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGAgreeApply& from);
  void MergeFrom(const CGAgreeApply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 applyId = 1;
  inline bool has_applyid() const;
  inline void clear_applyid();
  static const int kApplyIdFieldNumber = 1;
  inline ::google::protobuf::int64 applyid() const;
  inline void set_applyid(::google::protobuf::int64 value);

  // optional int32 sts = 2;
  inline bool has_sts() const;
  inline void clear_sts();
  static const int kStsFieldNumber = 2;
  inline ::google::protobuf::int32 sts() const;
  inline void set_sts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGAgreeApply)
 private:
  inline void set_has_applyid();
  inline void clear_has_applyid();
  inline void set_has_sts();
  inline void clear_has_sts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 applyid_;
  ::google::protobuf::int32 sts_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGAgreeApply* default_instance_;
};
// -------------------------------------------------------------------

class CGInviteOther : public ::google::protobuf::Message {
 public:
  CGInviteOther();
  virtual ~CGInviteOther();

  CGInviteOther(const CGInviteOther& from);

  inline CGInviteOther& operator=(const CGInviteOther& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGInviteOther& default_instance();

  void Swap(CGInviteOther* other);

  // implements Message ----------------------------------------------

  CGInviteOther* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGInviteOther& from);
  void MergeFrom(const CGInviteOther& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 invitePlayerId = 1;
  inline bool has_inviteplayerid() const;
  inline void clear_inviteplayerid();
  static const int kInvitePlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 inviteplayerid() const;
  inline void set_inviteplayerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGInviteOther)
 private:
  inline void set_has_inviteplayerid();
  inline void clear_has_inviteplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 inviteplayerid_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGInviteOther* default_instance_;
};
// -------------------------------------------------------------------

class GCInviteOther : public ::google::protobuf::Message {
 public:
  GCInviteOther();
  virtual ~GCInviteOther();

  GCInviteOther(const GCInviteOther& from);

  inline GCInviteOther& operator=(const GCInviteOther& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCInviteOther& default_instance();

  void Swap(GCInviteOther* other);

  // implements Message ----------------------------------------------

  GCInviteOther* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCInviteOther& from);
  void MergeFrom(const GCInviteOther& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 leaderPlayerId = 1;
  inline bool has_leaderplayerid() const;
  inline void clear_leaderplayerid();
  static const int kLeaderPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 leaderplayerid() const;
  inline void set_leaderplayerid(::google::protobuf::int64 value);

  // optional string leaderName = 2;
  inline bool has_leadername() const;
  inline void clear_leadername();
  static const int kLeaderNameFieldNumber = 2;
  inline const ::std::string& leadername() const;
  inline void set_leadername(const ::std::string& value);
  inline void set_leadername(const char* value);
  inline void set_leadername(const char* value, size_t size);
  inline ::std::string* mutable_leadername();
  inline ::std::string* release_leadername();
  inline void set_allocated_leadername(::std::string* leadername);

  // optional string battleNumber = 3;
  inline bool has_battlenumber() const;
  inline void clear_battlenumber();
  static const int kBattleNumberFieldNumber = 3;
  inline const ::std::string& battlenumber() const;
  inline void set_battlenumber(const ::std::string& value);
  inline void set_battlenumber(const char* value);
  inline void set_battlenumber(const char* value, size_t size);
  inline ::std::string* mutable_battlenumber();
  inline ::std::string* release_battlenumber();
  inline void set_allocated_battlenumber(::std::string* battlenumber);

  // @@protoc_insertion_point(class_scope:GCInviteOther)
 private:
  inline void set_has_leaderplayerid();
  inline void clear_has_leaderplayerid();
  inline void set_has_leadername();
  inline void clear_has_leadername();
  inline void set_has_battlenumber();
  inline void clear_has_battlenumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 leaderplayerid_;
  ::std::string* leadername_;
  ::std::string* battlenumber_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static GCInviteOther* default_instance_;
};
// -------------------------------------------------------------------

class CGAgreeInvite : public ::google::protobuf::Message {
 public:
  CGAgreeInvite();
  virtual ~CGAgreeInvite();

  CGAgreeInvite(const CGAgreeInvite& from);

  inline CGAgreeInvite& operator=(const CGAgreeInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGAgreeInvite& default_instance();

  void Swap(CGAgreeInvite* other);

  // implements Message ----------------------------------------------

  CGAgreeInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGAgreeInvite& from);
  void MergeFrom(const CGAgreeInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 leaderPlayerId = 1;
  inline bool has_leaderplayerid() const;
  inline void clear_leaderplayerid();
  static const int kLeaderPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 leaderplayerid() const;
  inline void set_leaderplayerid(::google::protobuf::int64 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGAgreeInvite)
 private:
  inline void set_has_leaderplayerid();
  inline void clear_has_leaderplayerid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 leaderplayerid_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGAgreeInvite* default_instance_;
};
// -------------------------------------------------------------------

class CGKickedOut : public ::google::protobuf::Message {
 public:
  CGKickedOut();
  virtual ~CGKickedOut();

  CGKickedOut(const CGKickedOut& from);

  inline CGKickedOut& operator=(const CGKickedOut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGKickedOut& default_instance();

  void Swap(CGKickedOut* other);

  // implements Message ----------------------------------------------

  CGKickedOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGKickedOut& from);
  void MergeFrom(const CGKickedOut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 otherPlayerId = 1;
  inline bool has_otherplayerid() const;
  inline void clear_otherplayerid();
  static const int kOtherPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 otherplayerid() const;
  inline void set_otherplayerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGKickedOut)
 private:
  inline void set_has_otherplayerid();
  inline void clear_has_otherplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 otherplayerid_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGKickedOut* default_instance_;
};
// -------------------------------------------------------------------

class CGTransferCaption : public ::google::protobuf::Message {
 public:
  CGTransferCaption();
  virtual ~CGTransferCaption();

  CGTransferCaption(const CGTransferCaption& from);

  inline CGTransferCaption& operator=(const CGTransferCaption& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGTransferCaption& default_instance();

  void Swap(CGTransferCaption* other);

  // implements Message ----------------------------------------------

  CGTransferCaption* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGTransferCaption& from);
  void MergeFrom(const CGTransferCaption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 otherPlayerId = 1;
  inline bool has_otherplayerid() const;
  inline void clear_otherplayerid();
  static const int kOtherPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 otherplayerid() const;
  inline void set_otherplayerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGTransferCaption)
 private:
  inline void set_has_otherplayerid();
  inline void clear_has_otherplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 otherplayerid_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGTransferCaption* default_instance_;
};
// -------------------------------------------------------------------

class CGSetTeamAuthority : public ::google::protobuf::Message {
 public:
  CGSetTeamAuthority();
  virtual ~CGSetTeamAuthority();

  CGSetTeamAuthority(const CGSetTeamAuthority& from);

  inline CGSetTeamAuthority& operator=(const CGSetTeamAuthority& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGSetTeamAuthority& default_instance();

  void Swap(CGSetTeamAuthority* other);

  // implements Message ----------------------------------------------

  CGSetTeamAuthority* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGSetTeamAuthority& from);
  void MergeFrom(const CGSetTeamAuthority& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 minLv = 1;
  inline bool has_minlv() const;
  inline void clear_minlv();
  static const int kMinLvFieldNumber = 1;
  inline ::google::protobuf::int32 minlv() const;
  inline void set_minlv(::google::protobuf::int32 value);

  // optional int32 maxLv = 2;
  inline bool has_maxlv() const;
  inline void clear_maxlv();
  static const int kMaxLvFieldNumber = 2;
  inline ::google::protobuf::int32 maxlv() const;
  inline void set_maxlv(::google::protobuf::int32 value);

  // optional int32 minBattleNumber = 3;
  inline bool has_minbattlenumber() const;
  inline void clear_minbattlenumber();
  static const int kMinBattleNumberFieldNumber = 3;
  inline ::google::protobuf::int32 minbattlenumber() const;
  inline void set_minbattlenumber(::google::protobuf::int32 value);

  // optional int32 targetID = 4;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 4;
  inline ::google::protobuf::int32 targetid() const;
  inline void set_targetid(::google::protobuf::int32 value);

  // optional int32 autoFollw = 5;
  inline bool has_autofollw() const;
  inline void clear_autofollw();
  static const int kAutoFollwFieldNumber = 5;
  inline ::google::protobuf::int32 autofollw() const;
  inline void set_autofollw(::google::protobuf::int32 value);

  // optional int32 autoAgree = 6;
  inline bool has_autoagree() const;
  inline void clear_autoagree();
  static const int kAutoAgreeFieldNumber = 6;
  inline ::google::protobuf::int32 autoagree() const;
  inline void set_autoagree(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGSetTeamAuthority)
 private:
  inline void set_has_minlv();
  inline void clear_has_minlv();
  inline void set_has_maxlv();
  inline void clear_has_maxlv();
  inline void set_has_minbattlenumber();
  inline void clear_has_minbattlenumber();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_autofollw();
  inline void clear_has_autofollw();
  inline void set_has_autoagree();
  inline void clear_has_autoagree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 minlv_;
  ::google::protobuf::int32 maxlv_;
  ::google::protobuf::int32 minbattlenumber_;
  ::google::protobuf::int32 targetid_;
  ::google::protobuf::int32 autofollw_;
  ::google::protobuf::int32 autoagree_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGSetTeamAuthority* default_instance_;
};
// -------------------------------------------------------------------

class GCSetTeamAuthority : public ::google::protobuf::Message {
 public:
  GCSetTeamAuthority();
  virtual ~GCSetTeamAuthority();

  GCSetTeamAuthority(const GCSetTeamAuthority& from);

  inline GCSetTeamAuthority& operator=(const GCSetTeamAuthority& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCSetTeamAuthority& default_instance();

  void Swap(GCSetTeamAuthority* other);

  // implements Message ----------------------------------------------

  GCSetTeamAuthority* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCSetTeamAuthority& from);
  void MergeFrom(const GCSetTeamAuthority& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 minLv = 1;
  inline bool has_minlv() const;
  inline void clear_minlv();
  static const int kMinLvFieldNumber = 1;
  inline ::google::protobuf::int32 minlv() const;
  inline void set_minlv(::google::protobuf::int32 value);

  // optional int32 maxLv = 2;
  inline bool has_maxlv() const;
  inline void clear_maxlv();
  static const int kMaxLvFieldNumber = 2;
  inline ::google::protobuf::int32 maxlv() const;
  inline void set_maxlv(::google::protobuf::int32 value);

  // optional int32 minBattleNumber = 3;
  inline bool has_minbattlenumber() const;
  inline void clear_minbattlenumber();
  static const int kMinBattleNumberFieldNumber = 3;
  inline ::google::protobuf::int32 minbattlenumber() const;
  inline void set_minbattlenumber(::google::protobuf::int32 value);

  // optional int32 targetID = 4;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 4;
  inline ::google::protobuf::int32 targetid() const;
  inline void set_targetid(::google::protobuf::int32 value);

  // optional int32 autoFollw = 5;
  inline bool has_autofollw() const;
  inline void clear_autofollw();
  static const int kAutoFollwFieldNumber = 5;
  inline ::google::protobuf::int32 autofollw() const;
  inline void set_autofollw(::google::protobuf::int32 value);

  // optional int32 autoAgree = 6;
  inline bool has_autoagree() const;
  inline void clear_autoagree();
  static const int kAutoAgreeFieldNumber = 6;
  inline ::google::protobuf::int32 autoagree() const;
  inline void set_autoagree(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCSetTeamAuthority)
 private:
  inline void set_has_minlv();
  inline void clear_has_minlv();
  inline void set_has_maxlv();
  inline void clear_has_maxlv();
  inline void set_has_minbattlenumber();
  inline void clear_has_minbattlenumber();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_autofollw();
  inline void clear_has_autofollw();
  inline void set_has_autoagree();
  inline void clear_has_autoagree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 minlv_;
  ::google::protobuf::int32 maxlv_;
  ::google::protobuf::int32 minbattlenumber_;
  ::google::protobuf::int32 targetid_;
  ::google::protobuf::int32 autofollw_;
  ::google::protobuf::int32 autoagree_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static GCSetTeamAuthority* default_instance_;
};
// -------------------------------------------------------------------

class CGSetAutoAgree : public ::google::protobuf::Message {
 public:
  CGSetAutoAgree();
  virtual ~CGSetAutoAgree();

  CGSetAutoAgree(const CGSetAutoAgree& from);

  inline CGSetAutoAgree& operator=(const CGSetAutoAgree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGSetAutoAgree& default_instance();

  void Swap(CGSetAutoAgree* other);

  // implements Message ----------------------------------------------

  CGSetAutoAgree* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGSetAutoAgree& from);
  void MergeFrom(const CGSetAutoAgree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 autoAgree = 1;
  inline bool has_autoagree() const;
  inline void clear_autoagree();
  static const int kAutoAgreeFieldNumber = 1;
  inline ::google::protobuf::int32 autoagree() const;
  inline void set_autoagree(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGSetAutoAgree)
 private:
  inline void set_has_autoagree();
  inline void clear_has_autoagree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 autoagree_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGSetAutoAgree* default_instance_;
};
// -------------------------------------------------------------------

class GCSetAutoAgree : public ::google::protobuf::Message {
 public:
  GCSetAutoAgree();
  virtual ~GCSetAutoAgree();

  GCSetAutoAgree(const GCSetAutoAgree& from);

  inline GCSetAutoAgree& operator=(const GCSetAutoAgree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCSetAutoAgree& default_instance();

  void Swap(GCSetAutoAgree* other);

  // implements Message ----------------------------------------------

  GCSetAutoAgree* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCSetAutoAgree& from);
  void MergeFrom(const GCSetAutoAgree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 autoAgree = 1;
  inline bool has_autoagree() const;
  inline void clear_autoagree();
  static const int kAutoAgreeFieldNumber = 1;
  inline ::google::protobuf::int32 autoagree() const;
  inline void set_autoagree(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCSetAutoAgree)
 private:
  inline void set_has_autoagree();
  inline void clear_has_autoagree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 autoagree_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static GCSetAutoAgree* default_instance_;
};
// -------------------------------------------------------------------

class CGCallFlow : public ::google::protobuf::Message {
 public:
  CGCallFlow();
  virtual ~CGCallFlow();

  CGCallFlow(const CGCallFlow& from);

  inline CGCallFlow& operator=(const CGCallFlow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGCallFlow& default_instance();

  void Swap(CGCallFlow* other);

  // implements Message ----------------------------------------------

  CGCallFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGCallFlow& from);
  void MergeFrom(const CGCallFlow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGCallFlow)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGCallFlow* default_instance_;
};
// -------------------------------------------------------------------

class GCCallFlow : public ::google::protobuf::Message {
 public:
  GCCallFlow();
  virtual ~GCCallFlow();

  GCCallFlow(const GCCallFlow& from);

  inline GCCallFlow& operator=(const GCCallFlow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCCallFlow& default_instance();

  void Swap(GCCallFlow* other);

  // implements Message ----------------------------------------------

  GCCallFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCCallFlow& from);
  void MergeFrom(const GCCallFlow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playerName = 1;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 1;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // @@protoc_insertion_point(class_scope:GCCallFlow)
 private:
  inline void set_has_playername();
  inline void clear_has_playername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* playername_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static GCCallFlow* default_instance_;
};
// -------------------------------------------------------------------

class CGMemberResponse : public ::google::protobuf::Message {
 public:
  CGMemberResponse();
  virtual ~CGMemberResponse();

  CGMemberResponse(const CGMemberResponse& from);

  inline CGMemberResponse& operator=(const CGMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGMemberResponse& default_instance();

  void Swap(CGMemberResponse* other);

  // implements Message ----------------------------------------------

  CGMemberResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGMemberResponse& from);
  void MergeFrom(const CGMemberResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 res = 1;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGMemberResponse)
 private:
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 res_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGMemberResponse* default_instance_;
};
// -------------------------------------------------------------------

class CGMemberFolw : public ::google::protobuf::Message {
 public:
  CGMemberFolw();
  virtual ~CGMemberFolw();

  CGMemberFolw(const CGMemberFolw& from);

  inline CGMemberFolw& operator=(const CGMemberFolw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGMemberFolw& default_instance();

  void Swap(CGMemberFolw* other);

  // implements Message ----------------------------------------------

  CGMemberFolw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGMemberFolw& from);
  void MergeFrom(const CGMemberFolw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 autoFolw = 1;
  inline bool has_autofolw() const;
  inline void clear_autofolw();
  static const int kAutoFolwFieldNumber = 1;
  inline ::google::protobuf::int32 autofolw() const;
  inline void set_autofolw(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGMemberFolw)
 private:
  inline void set_has_autofolw();
  inline void clear_has_autofolw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 autofolw_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGMemberFolw* default_instance_;
};
// -------------------------------------------------------------------

class GCMemberFolw : public ::google::protobuf::Message {
 public:
  GCMemberFolw();
  virtual ~GCMemberFolw();

  GCMemberFolw(const GCMemberFolw& from);

  inline GCMemberFolw& operator=(const GCMemberFolw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCMemberFolw& default_instance();

  void Swap(GCMemberFolw* other);

  // implements Message ----------------------------------------------

  GCMemberFolw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCMemberFolw& from);
  void MergeFrom(const GCMemberFolw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 autoFolw = 1;
  inline bool has_autofolw() const;
  inline void clear_autofolw();
  static const int kAutoFolwFieldNumber = 1;
  inline ::google::protobuf::int32 autofolw() const;
  inline void set_autofolw(::google::protobuf::int32 value);

  // optional int64 playerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCMemberFolw)
 private:
  inline void set_has_autofolw();
  inline void clear_has_autofolw();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 autofolw_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static GCMemberFolw* default_instance_;
};
// -------------------------------------------------------------------

class CGQuickTeam : public ::google::protobuf::Message {
 public:
  CGQuickTeam();
  virtual ~CGQuickTeam();

  CGQuickTeam(const CGQuickTeam& from);

  inline CGQuickTeam& operator=(const CGQuickTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGQuickTeam& default_instance();

  void Swap(CGQuickTeam* other);

  // implements Message ----------------------------------------------

  CGQuickTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGQuickTeam& from);
  void MergeFrom(const CGQuickTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 autoQuick = 1;
  inline bool has_autoquick() const;
  inline void clear_autoquick();
  static const int kAutoQuickFieldNumber = 1;
  inline ::google::protobuf::int32 autoquick() const;
  inline void set_autoquick(::google::protobuf::int32 value);

  // optional int32 targetID = 2;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 2;
  inline ::google::protobuf::int32 targetid() const;
  inline void set_targetid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGQuickTeam)
 private:
  inline void set_has_autoquick();
  inline void clear_has_autoquick();
  inline void set_has_targetid();
  inline void clear_has_targetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 autoquick_;
  ::google::protobuf::int32 targetid_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static CGQuickTeam* default_instance_;
};
// -------------------------------------------------------------------

class GCQuickTeam : public ::google::protobuf::Message {
 public:
  GCQuickTeam();
  virtual ~GCQuickTeam();

  GCQuickTeam(const GCQuickTeam& from);

  inline GCQuickTeam& operator=(const GCQuickTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCQuickTeam& default_instance();

  void Swap(GCQuickTeam* other);

  // implements Message ----------------------------------------------

  GCQuickTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCQuickTeam& from);
  void MergeFrom(const GCQuickTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 autoQuick = 1;
  inline bool has_autoquick() const;
  inline void clear_autoquick();
  static const int kAutoQuickFieldNumber = 1;
  inline ::google::protobuf::int32 autoquick() const;
  inline void set_autoquick(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCQuickTeam)
 private:
  inline void set_has_autoquick();
  inline void clear_has_autoquick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 autoquick_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static GCQuickTeam* default_instance_;
};
// -------------------------------------------------------------------

class GCFllowQueue : public ::google::protobuf::Message {
 public:
  GCFllowQueue();
  virtual ~GCFllowQueue();

  GCFllowQueue(const GCFllowQueue& from);

  inline GCFllowQueue& operator=(const GCFllowQueue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCFllowQueue& default_instance();

  void Swap(GCFllowQueue* other);

  // implements Message ----------------------------------------------

  GCFllowQueue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCFllowQueue& from);
  void MergeFrom(const GCFllowQueue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 fllowIds = 1;
  inline int fllowids_size() const;
  inline void clear_fllowids();
  static const int kFllowIdsFieldNumber = 1;
  inline ::google::protobuf::int64 fllowids(int index) const;
  inline void set_fllowids(int index, ::google::protobuf::int64 value);
  inline void add_fllowids(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      fllowids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_fllowids();

  // @@protoc_insertion_point(class_scope:GCFllowQueue)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > fllowids_;
  friend void  protobuf_AddDesc_TeamMessage_2eproto();
  friend void protobuf_AssignDesc_TeamMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamMessage_2eproto();

  void InitAsDefaultInstance();
  static GCFllowQueue* default_instance_;
};
// ===================================================================


// ===================================================================

// TeamMember

// optional int64 playerID = 1;
inline bool TeamMember::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamMember::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamMember::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamMember::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 TeamMember::playerid() const {
  // @@protoc_insertion_point(field_get:TeamMember.playerID)
  return playerid_;
}
inline void TeamMember::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:TeamMember.playerID)
}

// optional string nickName = 2;
inline bool TeamMember::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamMember::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamMember::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamMember::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& TeamMember::nickname() const {
  // @@protoc_insertion_point(field_get:TeamMember.nickName)
  return *nickname_;
}
inline void TeamMember::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:TeamMember.nickName)
}
inline void TeamMember::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:TeamMember.nickName)
}
inline void TeamMember::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TeamMember.nickName)
}
inline ::std::string* TeamMember::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TeamMember.nickName)
  return nickname_;
}
inline ::std::string* TeamMember::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TeamMember::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TeamMember.nickName)
}

// optional int32 level = 3;
inline bool TeamMember::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamMember::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamMember::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamMember::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 TeamMember::level() const {
  // @@protoc_insertion_point(field_get:TeamMember.level)
  return level_;
}
inline void TeamMember::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:TeamMember.level)
}

// optional int32 fightValue = 4;
inline bool TeamMember::has_fightvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamMember::set_has_fightvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamMember::clear_has_fightvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamMember::clear_fightvalue() {
  fightvalue_ = 0;
  clear_has_fightvalue();
}
inline ::google::protobuf::int32 TeamMember::fightvalue() const {
  // @@protoc_insertion_point(field_get:TeamMember.fightValue)
  return fightvalue_;
}
inline void TeamMember::set_fightvalue(::google::protobuf::int32 value) {
  set_has_fightvalue();
  fightvalue_ = value;
  // @@protoc_insertion_point(field_set:TeamMember.fightValue)
}

// optional int32 onLine = 5;
inline bool TeamMember::has_online() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamMember::set_has_online() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamMember::clear_has_online() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamMember::clear_online() {
  online_ = 0;
  clear_has_online();
}
inline ::google::protobuf::int32 TeamMember::online() const {
  // @@protoc_insertion_point(field_get:TeamMember.onLine)
  return online_;
}
inline void TeamMember::set_online(::google::protobuf::int32 value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:TeamMember.onLine)
}

// optional int32 professionId = 6;
inline bool TeamMember::has_professionid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamMember::set_has_professionid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamMember::clear_has_professionid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamMember::clear_professionid() {
  professionid_ = 0;
  clear_has_professionid();
}
inline ::google::protobuf::int32 TeamMember::professionid() const {
  // @@protoc_insertion_point(field_get:TeamMember.professionId)
  return professionid_;
}
inline void TeamMember::set_professionid(::google::protobuf::int32 value) {
  set_has_professionid();
  professionid_ = value;
  // @@protoc_insertion_point(field_set:TeamMember.professionId)
}

// optional int32 sex = 7;
inline bool TeamMember::has_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamMember::set_has_sex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamMember::clear_has_sex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamMember::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 TeamMember::sex() const {
  // @@protoc_insertion_point(field_get:TeamMember.sex)
  return sex_;
}
inline void TeamMember::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:TeamMember.sex)
}

// optional int32 isFollow = 8;
inline bool TeamMember::has_isfollow() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TeamMember::set_has_isfollow() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TeamMember::clear_has_isfollow() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TeamMember::clear_isfollow() {
  isfollow_ = 0;
  clear_has_isfollow();
}
inline ::google::protobuf::int32 TeamMember::isfollow() const {
  // @@protoc_insertion_point(field_get:TeamMember.isFollow)
  return isfollow_;
}
inline void TeamMember::set_isfollow(::google::protobuf::int32 value) {
  set_has_isfollow();
  isfollow_ = value;
  // @@protoc_insertion_point(field_set:TeamMember.isFollow)
}

// optional int64 teamID = 9;
inline bool TeamMember::has_teamid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TeamMember::set_has_teamid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TeamMember::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TeamMember::clear_teamid() {
  teamid_ = GOOGLE_LONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::int64 TeamMember::teamid() const {
  // @@protoc_insertion_point(field_get:TeamMember.teamID)
  return teamid_;
}
inline void TeamMember::set_teamid(::google::protobuf::int64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamMember.teamID)
}

// optional int32 hp = 10;
inline bool TeamMember::has_hp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TeamMember::set_has_hp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TeamMember::clear_has_hp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TeamMember::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 TeamMember::hp() const {
  // @@protoc_insertion_point(field_get:TeamMember.hp)
  return hp_;
}
inline void TeamMember::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:TeamMember.hp)
}

// optional int32 maxHp = 11;
inline bool TeamMember::has_maxhp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TeamMember::set_has_maxhp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TeamMember::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TeamMember::clear_maxhp() {
  maxhp_ = 0;
  clear_has_maxhp();
}
inline ::google::protobuf::int32 TeamMember::maxhp() const {
  // @@protoc_insertion_point(field_get:TeamMember.maxHp)
  return maxhp_;
}
inline void TeamMember::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:TeamMember.maxHp)
}

// optional int32 iconid = 12;
inline bool TeamMember::has_iconid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TeamMember::set_has_iconid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TeamMember::clear_has_iconid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TeamMember::clear_iconid() {
  iconid_ = 0;
  clear_has_iconid();
}
inline ::google::protobuf::int32 TeamMember::iconid() const {
  // @@protoc_insertion_point(field_get:TeamMember.iconid)
  return iconid_;
}
inline void TeamMember::set_iconid(::google::protobuf::int32 value) {
  set_has_iconid();
  iconid_ = value;
  // @@protoc_insertion_point(field_set:TeamMember.iconid)
}

// optional .ChangeEquipInfo changeEquipInfo = 13;
inline bool TeamMember::has_changeequipinfo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TeamMember::set_has_changeequipinfo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TeamMember::clear_has_changeequipinfo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TeamMember::clear_changeequipinfo() {
  if (changeequipinfo_ != NULL) changeequipinfo_->::ChangeEquipInfo::Clear();
  clear_has_changeequipinfo();
}
inline const ::ChangeEquipInfo& TeamMember::changeequipinfo() const {
  // @@protoc_insertion_point(field_get:TeamMember.changeEquipInfo)
  return changeequipinfo_ != NULL ? *changeequipinfo_ : *default_instance_->changeequipinfo_;
}
inline ::ChangeEquipInfo* TeamMember::mutable_changeequipinfo() {
  set_has_changeequipinfo();
  if (changeequipinfo_ == NULL) changeequipinfo_ = new ::ChangeEquipInfo;
  // @@protoc_insertion_point(field_mutable:TeamMember.changeEquipInfo)
  return changeequipinfo_;
}
inline ::ChangeEquipInfo* TeamMember::release_changeequipinfo() {
  clear_has_changeequipinfo();
  ::ChangeEquipInfo* temp = changeequipinfo_;
  changeequipinfo_ = NULL;
  return temp;
}
inline void TeamMember::set_allocated_changeequipinfo(::ChangeEquipInfo* changeequipinfo) {
  delete changeequipinfo_;
  changeequipinfo_ = changeequipinfo;
  if (changeequipinfo) {
    set_has_changeequipinfo();
  } else {
    clear_has_changeequipinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:TeamMember.changeEquipInfo)
}

// optional .Vector3Info pos = 14;
inline bool TeamMember::has_pos() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TeamMember::set_has_pos() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TeamMember::clear_has_pos() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TeamMember::clear_pos() {
  if (pos_ != NULL) pos_->::Vector3Info::Clear();
  clear_has_pos();
}
inline const ::Vector3Info& TeamMember::pos() const {
  // @@protoc_insertion_point(field_get:TeamMember.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Vector3Info* TeamMember::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Vector3Info;
  // @@protoc_insertion_point(field_mutable:TeamMember.pos)
  return pos_;
}
inline ::Vector3Info* TeamMember::release_pos() {
  clear_has_pos();
  ::Vector3Info* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TeamMember::set_allocated_pos(::Vector3Info* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:TeamMember.pos)
}

// optional int32 sceneID = 15;
inline bool TeamMember::has_sceneid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TeamMember::set_has_sceneid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TeamMember::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TeamMember::clear_sceneid() {
  sceneid_ = 0;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 TeamMember::sceneid() const {
  // @@protoc_insertion_point(field_get:TeamMember.sceneID)
  return sceneid_;
}
inline void TeamMember::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:TeamMember.sceneID)
}

// -------------------------------------------------------------------

// TeamInfo

// optional int64 teamID = 1;
inline bool TeamInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamInfo::clear_teamid() {
  teamid_ = GOOGLE_LONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::int64 TeamInfo::teamid() const {
  // @@protoc_insertion_point(field_get:TeamInfo.teamID)
  return teamid_;
}
inline void TeamInfo::set_teamid(::google::protobuf::int64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.teamID)
}

// optional string teamName = 2;
inline bool TeamInfo::has_teamname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamInfo::set_has_teamname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamInfo::clear_has_teamname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamInfo::clear_teamname() {
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_->clear();
  }
  clear_has_teamname();
}
inline const ::std::string& TeamInfo::teamname() const {
  // @@protoc_insertion_point(field_get:TeamInfo.teamName)
  return *teamname_;
}
inline void TeamInfo::set_teamname(const ::std::string& value) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(value);
  // @@protoc_insertion_point(field_set:TeamInfo.teamName)
}
inline void TeamInfo::set_teamname(const char* value) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(value);
  // @@protoc_insertion_point(field_set_char:TeamInfo.teamName)
}
inline void TeamInfo::set_teamname(const char* value, size_t size) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TeamInfo.teamName)
}
inline ::std::string* TeamInfo::mutable_teamname() {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TeamInfo.teamName)
  return teamname_;
}
inline ::std::string* TeamInfo::release_teamname() {
  clear_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = teamname_;
    teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TeamInfo::set_allocated_teamname(::std::string* teamname) {
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teamname_;
  }
  if (teamname) {
    set_has_teamname();
    teamname_ = teamname;
  } else {
    clear_has_teamname();
    teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TeamInfo.teamName)
}

// repeated .TeamMember memberInfo = 3;
inline int TeamInfo::memberinfo_size() const {
  return memberinfo_.size();
}
inline void TeamInfo::clear_memberinfo() {
  memberinfo_.Clear();
}
inline const ::TeamMember& TeamInfo::memberinfo(int index) const {
  // @@protoc_insertion_point(field_get:TeamInfo.memberInfo)
  return memberinfo_.Get(index);
}
inline ::TeamMember* TeamInfo::mutable_memberinfo(int index) {
  // @@protoc_insertion_point(field_mutable:TeamInfo.memberInfo)
  return memberinfo_.Mutable(index);
}
inline ::TeamMember* TeamInfo::add_memberinfo() {
  // @@protoc_insertion_point(field_add:TeamInfo.memberInfo)
  return memberinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TeamMember >&
TeamInfo::memberinfo() const {
  // @@protoc_insertion_point(field_list:TeamInfo.memberInfo)
  return memberinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::TeamMember >*
TeamInfo::mutable_memberinfo() {
  // @@protoc_insertion_point(field_mutable_list:TeamInfo.memberInfo)
  return &memberinfo_;
}

// optional int64 captionID = 4;
inline bool TeamInfo::has_captionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamInfo::set_has_captionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamInfo::clear_has_captionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamInfo::clear_captionid() {
  captionid_ = GOOGLE_LONGLONG(0);
  clear_has_captionid();
}
inline ::google::protobuf::int64 TeamInfo::captionid() const {
  // @@protoc_insertion_point(field_get:TeamInfo.captionID)
  return captionid_;
}
inline void TeamInfo::set_captionid(::google::protobuf::int64 value) {
  set_has_captionid();
  captionid_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.captionID)
}

// optional int32 targetID = 5;
inline bool TeamInfo::has_targetid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamInfo::set_has_targetid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamInfo::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamInfo::clear_targetid() {
  targetid_ = 0;
  clear_has_targetid();
}
inline ::google::protobuf::int32 TeamInfo::targetid() const {
  // @@protoc_insertion_point(field_get:TeamInfo.targetID)
  return targetid_;
}
inline void TeamInfo::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.targetID)
}

// optional int32 fightValue = 6;
inline bool TeamInfo::has_fightvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamInfo::set_has_fightvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamInfo::clear_has_fightvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamInfo::clear_fightvalue() {
  fightvalue_ = 0;
  clear_has_fightvalue();
}
inline ::google::protobuf::int32 TeamInfo::fightvalue() const {
  // @@protoc_insertion_point(field_get:TeamInfo.fightValue)
  return fightvalue_;
}
inline void TeamInfo::set_fightvalue(::google::protobuf::int32 value) {
  set_has_fightvalue();
  fightvalue_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.fightValue)
}

// optional int32 minFight = 7;
inline bool TeamInfo::has_minfight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamInfo::set_has_minfight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamInfo::clear_has_minfight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamInfo::clear_minfight() {
  minfight_ = 0;
  clear_has_minfight();
}
inline ::google::protobuf::int32 TeamInfo::minfight() const {
  // @@protoc_insertion_point(field_get:TeamInfo.minFight)
  return minfight_;
}
inline void TeamInfo::set_minfight(::google::protobuf::int32 value) {
  set_has_minfight();
  minfight_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.minFight)
}

// optional int32 maxLevel = 8;
inline bool TeamInfo::has_maxlevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TeamInfo::set_has_maxlevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TeamInfo::clear_has_maxlevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TeamInfo::clear_maxlevel() {
  maxlevel_ = 0;
  clear_has_maxlevel();
}
inline ::google::protobuf::int32 TeamInfo::maxlevel() const {
  // @@protoc_insertion_point(field_get:TeamInfo.maxLevel)
  return maxlevel_;
}
inline void TeamInfo::set_maxlevel(::google::protobuf::int32 value) {
  set_has_maxlevel();
  maxlevel_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.maxLevel)
}

// optional int32 minLevel = 9;
inline bool TeamInfo::has_minlevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TeamInfo::set_has_minlevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TeamInfo::clear_has_minlevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TeamInfo::clear_minlevel() {
  minlevel_ = 0;
  clear_has_minlevel();
}
inline ::google::protobuf::int32 TeamInfo::minlevel() const {
  // @@protoc_insertion_point(field_get:TeamInfo.minLevel)
  return minlevel_;
}
inline void TeamInfo::set_minlevel(::google::protobuf::int32 value) {
  set_has_minlevel();
  minlevel_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.minLevel)
}

// optional int32 isFollow = 10;
inline bool TeamInfo::has_isfollow() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TeamInfo::set_has_isfollow() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TeamInfo::clear_has_isfollow() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TeamInfo::clear_isfollow() {
  isfollow_ = 0;
  clear_has_isfollow();
}
inline ::google::protobuf::int32 TeamInfo::isfollow() const {
  // @@protoc_insertion_point(field_get:TeamInfo.isFollow)
  return isfollow_;
}
inline void TeamInfo::set_isfollow(::google::protobuf::int32 value) {
  set_has_isfollow();
  isfollow_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.isFollow)
}

// optional int32 autoMate = 11;
inline bool TeamInfo::has_automate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TeamInfo::set_has_automate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TeamInfo::clear_has_automate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TeamInfo::clear_automate() {
  automate_ = 0;
  clear_has_automate();
}
inline ::google::protobuf::int32 TeamInfo::automate() const {
  // @@protoc_insertion_point(field_get:TeamInfo.autoMate)
  return automate_;
}
inline void TeamInfo::set_automate(::google::protobuf::int32 value) {
  set_has_automate();
  automate_ = value;
  // @@protoc_insertion_point(field_set:TeamInfo.autoMate)
}

// -------------------------------------------------------------------

// TeamSampleInfo

// optional int64 teamID = 1;
inline bool TeamSampleInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamSampleInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamSampleInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamSampleInfo::clear_teamid() {
  teamid_ = GOOGLE_LONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::int64 TeamSampleInfo::teamid() const {
  // @@protoc_insertion_point(field_get:TeamSampleInfo.teamID)
  return teamid_;
}
inline void TeamSampleInfo::set_teamid(::google::protobuf::int64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamSampleInfo.teamID)
}

// optional string teamName = 2;
inline bool TeamSampleInfo::has_teamname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamSampleInfo::set_has_teamname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamSampleInfo::clear_has_teamname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamSampleInfo::clear_teamname() {
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_->clear();
  }
  clear_has_teamname();
}
inline const ::std::string& TeamSampleInfo::teamname() const {
  // @@protoc_insertion_point(field_get:TeamSampleInfo.teamName)
  return *teamname_;
}
inline void TeamSampleInfo::set_teamname(const ::std::string& value) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(value);
  // @@protoc_insertion_point(field_set:TeamSampleInfo.teamName)
}
inline void TeamSampleInfo::set_teamname(const char* value) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(value);
  // @@protoc_insertion_point(field_set_char:TeamSampleInfo.teamName)
}
inline void TeamSampleInfo::set_teamname(const char* value, size_t size) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TeamSampleInfo.teamName)
}
inline ::std::string* TeamSampleInfo::mutable_teamname() {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TeamSampleInfo.teamName)
  return teamname_;
}
inline ::std::string* TeamSampleInfo::release_teamname() {
  clear_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = teamname_;
    teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TeamSampleInfo::set_allocated_teamname(::std::string* teamname) {
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teamname_;
  }
  if (teamname) {
    set_has_teamname();
    teamname_ = teamname;
  } else {
    clear_has_teamname();
    teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TeamSampleInfo.teamName)
}

// optional int32 num = 3;
inline bool TeamSampleInfo::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamSampleInfo::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamSampleInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamSampleInfo::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 TeamSampleInfo::num() const {
  // @@protoc_insertion_point(field_get:TeamSampleInfo.num)
  return num_;
}
inline void TeamSampleInfo::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:TeamSampleInfo.num)
}

// optional int32 level = 4;
inline bool TeamSampleInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamSampleInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamSampleInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamSampleInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 TeamSampleInfo::level() const {
  // @@protoc_insertion_point(field_get:TeamSampleInfo.level)
  return level_;
}
inline void TeamSampleInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:TeamSampleInfo.level)
}

// optional int32 iconid = 5;
inline bool TeamSampleInfo::has_iconid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamSampleInfo::set_has_iconid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamSampleInfo::clear_has_iconid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamSampleInfo::clear_iconid() {
  iconid_ = 0;
  clear_has_iconid();
}
inline ::google::protobuf::int32 TeamSampleInfo::iconid() const {
  // @@protoc_insertion_point(field_get:TeamSampleInfo.iconid)
  return iconid_;
}
inline void TeamSampleInfo::set_iconid(::google::protobuf::int32 value) {
  set_has_iconid();
  iconid_ = value;
  // @@protoc_insertion_point(field_set:TeamSampleInfo.iconid)
}

// optional int32 professionId = 6;
inline bool TeamSampleInfo::has_professionid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamSampleInfo::set_has_professionid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamSampleInfo::clear_has_professionid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamSampleInfo::clear_professionid() {
  professionid_ = 0;
  clear_has_professionid();
}
inline ::google::protobuf::int32 TeamSampleInfo::professionid() const {
  // @@protoc_insertion_point(field_get:TeamSampleInfo.professionId)
  return professionid_;
}
inline void TeamSampleInfo::set_professionid(::google::protobuf::int32 value) {
  set_has_professionid();
  professionid_ = value;
  // @@protoc_insertion_point(field_set:TeamSampleInfo.professionId)
}

// optional int32 isNear = 7;
inline bool TeamSampleInfo::has_isnear() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamSampleInfo::set_has_isnear() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamSampleInfo::clear_has_isnear() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamSampleInfo::clear_isnear() {
  isnear_ = 0;
  clear_has_isnear();
}
inline ::google::protobuf::int32 TeamSampleInfo::isnear() const {
  // @@protoc_insertion_point(field_get:TeamSampleInfo.isNear)
  return isnear_;
}
inline void TeamSampleInfo::set_isnear(::google::protobuf::int32 value) {
  set_has_isnear();
  isnear_ = value;
  // @@protoc_insertion_point(field_set:TeamSampleInfo.isNear)
}

// optional int32 targetID = 8;
inline bool TeamSampleInfo::has_targetid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TeamSampleInfo::set_has_targetid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TeamSampleInfo::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TeamSampleInfo::clear_targetid() {
  targetid_ = 0;
  clear_has_targetid();
}
inline ::google::protobuf::int32 TeamSampleInfo::targetid() const {
  // @@protoc_insertion_point(field_get:TeamSampleInfo.targetID)
  return targetid_;
}
inline void TeamSampleInfo::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:TeamSampleInfo.targetID)
}

// optional int32 maxLevel = 9;
inline bool TeamSampleInfo::has_maxlevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TeamSampleInfo::set_has_maxlevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TeamSampleInfo::clear_has_maxlevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TeamSampleInfo::clear_maxlevel() {
  maxlevel_ = 0;
  clear_has_maxlevel();
}
inline ::google::protobuf::int32 TeamSampleInfo::maxlevel() const {
  // @@protoc_insertion_point(field_get:TeamSampleInfo.maxLevel)
  return maxlevel_;
}
inline void TeamSampleInfo::set_maxlevel(::google::protobuf::int32 value) {
  set_has_maxlevel();
  maxlevel_ = value;
  // @@protoc_insertion_point(field_set:TeamSampleInfo.maxLevel)
}

// optional int32 minLevel = 10;
inline bool TeamSampleInfo::has_minlevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TeamSampleInfo::set_has_minlevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TeamSampleInfo::clear_has_minlevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TeamSampleInfo::clear_minlevel() {
  minlevel_ = 0;
  clear_has_minlevel();
}
inline ::google::protobuf::int32 TeamSampleInfo::minlevel() const {
  // @@protoc_insertion_point(field_get:TeamSampleInfo.minLevel)
  return minlevel_;
}
inline void TeamSampleInfo::set_minlevel(::google::protobuf::int32 value) {
  set_has_minlevel();
  minlevel_ = value;
  // @@protoc_insertion_point(field_set:TeamSampleInfo.minLevel)
}

// optional int32 sex = 11;
inline bool TeamSampleInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TeamSampleInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TeamSampleInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TeamSampleInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 TeamSampleInfo::sex() const {
  // @@protoc_insertion_point(field_get:TeamSampleInfo.sex)
  return sex_;
}
inline void TeamSampleInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:TeamSampleInfo.sex)
}

// -------------------------------------------------------------------

// CGCreateTeam

// optional int32 targetID = 1;
inline bool CGCreateTeam::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGCreateTeam::set_has_targetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGCreateTeam::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGCreateTeam::clear_targetid() {
  targetid_ = 0;
  clear_has_targetid();
}
inline ::google::protobuf::int32 CGCreateTeam::targetid() const {
  // @@protoc_insertion_point(field_get:CGCreateTeam.targetID)
  return targetid_;
}
inline void CGCreateTeam::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:CGCreateTeam.targetID)
}

// -------------------------------------------------------------------

// GCRefreashMyTeam

// optional .TeamInfo teamInfo = 1;
inline bool GCRefreashMyTeam::has_teaminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCRefreashMyTeam::set_has_teaminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCRefreashMyTeam::clear_has_teaminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCRefreashMyTeam::clear_teaminfo() {
  if (teaminfo_ != NULL) teaminfo_->::TeamInfo::Clear();
  clear_has_teaminfo();
}
inline const ::TeamInfo& GCRefreashMyTeam::teaminfo() const {
  // @@protoc_insertion_point(field_get:GCRefreashMyTeam.teamInfo)
  return teaminfo_ != NULL ? *teaminfo_ : *default_instance_->teaminfo_;
}
inline ::TeamInfo* GCRefreashMyTeam::mutable_teaminfo() {
  set_has_teaminfo();
  if (teaminfo_ == NULL) teaminfo_ = new ::TeamInfo;
  // @@protoc_insertion_point(field_mutable:GCRefreashMyTeam.teamInfo)
  return teaminfo_;
}
inline ::TeamInfo* GCRefreashMyTeam::release_teaminfo() {
  clear_has_teaminfo();
  ::TeamInfo* temp = teaminfo_;
  teaminfo_ = NULL;
  return temp;
}
inline void GCRefreashMyTeam::set_allocated_teaminfo(::TeamInfo* teaminfo) {
  delete teaminfo_;
  teaminfo_ = teaminfo;
  if (teaminfo) {
    set_has_teaminfo();
  } else {
    clear_has_teaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCRefreashMyTeam.teamInfo)
}

// -------------------------------------------------------------------

// CGOpenTeamView

// optional int32 type = 1;
inline bool CGOpenTeamView::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGOpenTeamView::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGOpenTeamView::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGOpenTeamView::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGOpenTeamView::type() const {
  // @@protoc_insertion_point(field_get:CGOpenTeamView.type)
  return type_;
}
inline void CGOpenTeamView::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGOpenTeamView.type)
}

// -------------------------------------------------------------------

// GCOPenTeamView

// repeated .TeamMember members = 1;
inline int GCOPenTeamView::members_size() const {
  return members_.size();
}
inline void GCOPenTeamView::clear_members() {
  members_.Clear();
}
inline const ::TeamMember& GCOPenTeamView::members(int index) const {
  // @@protoc_insertion_point(field_get:GCOPenTeamView.members)
  return members_.Get(index);
}
inline ::TeamMember* GCOPenTeamView::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:GCOPenTeamView.members)
  return members_.Mutable(index);
}
inline ::TeamMember* GCOPenTeamView::add_members() {
  // @@protoc_insertion_point(field_add:GCOPenTeamView.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TeamMember >&
GCOPenTeamView::members() const {
  // @@protoc_insertion_point(field_list:GCOPenTeamView.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::TeamMember >*
GCOPenTeamView::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:GCOPenTeamView.members)
  return &members_;
}

// repeated .TeamSampleInfo teams = 2;
inline int GCOPenTeamView::teams_size() const {
  return teams_.size();
}
inline void GCOPenTeamView::clear_teams() {
  teams_.Clear();
}
inline const ::TeamSampleInfo& GCOPenTeamView::teams(int index) const {
  // @@protoc_insertion_point(field_get:GCOPenTeamView.teams)
  return teams_.Get(index);
}
inline ::TeamSampleInfo* GCOPenTeamView::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:GCOPenTeamView.teams)
  return teams_.Mutable(index);
}
inline ::TeamSampleInfo* GCOPenTeamView::add_teams() {
  // @@protoc_insertion_point(field_add:GCOPenTeamView.teams)
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TeamSampleInfo >&
GCOPenTeamView::teams() const {
  // @@protoc_insertion_point(field_list:GCOPenTeamView.teams)
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::TeamSampleInfo >*
GCOPenTeamView::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:GCOPenTeamView.teams)
  return &teams_;
}

// optional int32 autoAgree = 3;
inline bool GCOPenTeamView::has_autoagree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCOPenTeamView::set_has_autoagree() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCOPenTeamView::clear_has_autoagree() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCOPenTeamView::clear_autoagree() {
  autoagree_ = 0;
  clear_has_autoagree();
}
inline ::google::protobuf::int32 GCOPenTeamView::autoagree() const {
  // @@protoc_insertion_point(field_get:GCOPenTeamView.autoAgree)
  return autoagree_;
}
inline void GCOPenTeamView::set_autoagree(::google::protobuf::int32 value) {
  set_has_autoagree();
  autoagree_ = value;
  // @@protoc_insertion_point(field_set:GCOPenTeamView.autoAgree)
}

// optional int32 type = 4;
inline bool GCOPenTeamView::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCOPenTeamView::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCOPenTeamView::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCOPenTeamView::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCOPenTeamView::type() const {
  // @@protoc_insertion_point(field_get:GCOPenTeamView.type)
  return type_;
}
inline void GCOPenTeamView::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCOPenTeamView.type)
}

// optional int32 autoMate = 5;
inline bool GCOPenTeamView::has_automate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCOPenTeamView::set_has_automate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCOPenTeamView::clear_has_automate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCOPenTeamView::clear_automate() {
  automate_ = 0;
  clear_has_automate();
}
inline ::google::protobuf::int32 GCOPenTeamView::automate() const {
  // @@protoc_insertion_point(field_get:GCOPenTeamView.autoMate)
  return automate_;
}
inline void GCOPenTeamView::set_automate(::google::protobuf::int32 value) {
  set_has_automate();
  automate_ = value;
  // @@protoc_insertion_point(field_set:GCOPenTeamView.autoMate)
}

// -------------------------------------------------------------------

// CGLeaveTeam

// -------------------------------------------------------------------

// GCLeaveTeam

// optional int32 isInitiative = 1;
inline bool GCLeaveTeam::has_isinitiative() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCLeaveTeam::set_has_isinitiative() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCLeaveTeam::clear_has_isinitiative() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCLeaveTeam::clear_isinitiative() {
  isinitiative_ = 0;
  clear_has_isinitiative();
}
inline ::google::protobuf::int32 GCLeaveTeam::isinitiative() const {
  // @@protoc_insertion_point(field_get:GCLeaveTeam.isInitiative)
  return isinitiative_;
}
inline void GCLeaveTeam::set_isinitiative(::google::protobuf::int32 value) {
  set_has_isinitiative();
  isinitiative_ = value;
  // @@protoc_insertion_point(field_set:GCLeaveTeam.isInitiative)
}

// -------------------------------------------------------------------

// GCAddTeamMember

// optional .TeamMember member = 1;
inline bool GCAddTeamMember::has_member() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCAddTeamMember::set_has_member() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCAddTeamMember::clear_has_member() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCAddTeamMember::clear_member() {
  if (member_ != NULL) member_->::TeamMember::Clear();
  clear_has_member();
}
inline const ::TeamMember& GCAddTeamMember::member() const {
  // @@protoc_insertion_point(field_get:GCAddTeamMember.member)
  return member_ != NULL ? *member_ : *default_instance_->member_;
}
inline ::TeamMember* GCAddTeamMember::mutable_member() {
  set_has_member();
  if (member_ == NULL) member_ = new ::TeamMember;
  // @@protoc_insertion_point(field_mutable:GCAddTeamMember.member)
  return member_;
}
inline ::TeamMember* GCAddTeamMember::release_member() {
  clear_has_member();
  ::TeamMember* temp = member_;
  member_ = NULL;
  return temp;
}
inline void GCAddTeamMember::set_allocated_member(::TeamMember* member) {
  delete member_;
  member_ = member;
  if (member) {
    set_has_member();
  } else {
    clear_has_member();
  }
  // @@protoc_insertion_point(field_set_allocated:GCAddTeamMember.member)
}

// -------------------------------------------------------------------

// GCDelTeamMember

// optional int64 playerID = 1;
inline bool GCDelTeamMember::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCDelTeamMember::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCDelTeamMember::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCDelTeamMember::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 GCDelTeamMember::playerid() const {
  // @@protoc_insertion_point(field_get:GCDelTeamMember.playerID)
  return playerid_;
}
inline void GCDelTeamMember::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GCDelTeamMember.playerID)
}

// -------------------------------------------------------------------

// GCUpdateTeamMember

// repeated .TeamMember member = 1;
inline int GCUpdateTeamMember::member_size() const {
  return member_.size();
}
inline void GCUpdateTeamMember::clear_member() {
  member_.Clear();
}
inline const ::TeamMember& GCUpdateTeamMember::member(int index) const {
  // @@protoc_insertion_point(field_get:GCUpdateTeamMember.member)
  return member_.Get(index);
}
inline ::TeamMember* GCUpdateTeamMember::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:GCUpdateTeamMember.member)
  return member_.Mutable(index);
}
inline ::TeamMember* GCUpdateTeamMember::add_member() {
  // @@protoc_insertion_point(field_add:GCUpdateTeamMember.member)
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TeamMember >&
GCUpdateTeamMember::member() const {
  // @@protoc_insertion_point(field_list:GCUpdateTeamMember.member)
  return member_;
}
inline ::google::protobuf::RepeatedPtrField< ::TeamMember >*
GCUpdateTeamMember::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:GCUpdateTeamMember.member)
  return &member_;
}

// -------------------------------------------------------------------

// CGApplyTeam

// optional int64 teamID = 1;
inline bool CGApplyTeam::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGApplyTeam::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGApplyTeam::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGApplyTeam::clear_teamid() {
  teamid_ = GOOGLE_LONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::int64 CGApplyTeam::teamid() const {
  // @@protoc_insertion_point(field_get:CGApplyTeam.teamID)
  return teamid_;
}
inline void CGApplyTeam::set_teamid(::google::protobuf::int64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:CGApplyTeam.teamID)
}

// -------------------------------------------------------------------

// GCApplyTeamLeader

// optional int64 applyId = 1;
inline bool GCApplyTeamLeader::has_applyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCApplyTeamLeader::set_has_applyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCApplyTeamLeader::clear_has_applyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCApplyTeamLeader::clear_applyid() {
  applyid_ = GOOGLE_LONGLONG(0);
  clear_has_applyid();
}
inline ::google::protobuf::int64 GCApplyTeamLeader::applyid() const {
  // @@protoc_insertion_point(field_get:GCApplyTeamLeader.applyId)
  return applyid_;
}
inline void GCApplyTeamLeader::set_applyid(::google::protobuf::int64 value) {
  set_has_applyid();
  applyid_ = value;
  // @@protoc_insertion_point(field_set:GCApplyTeamLeader.applyId)
}

// optional string applyName = 2;
inline bool GCApplyTeamLeader::has_applyname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCApplyTeamLeader::set_has_applyname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCApplyTeamLeader::clear_has_applyname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCApplyTeamLeader::clear_applyname() {
  if (applyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applyname_->clear();
  }
  clear_has_applyname();
}
inline const ::std::string& GCApplyTeamLeader::applyname() const {
  // @@protoc_insertion_point(field_get:GCApplyTeamLeader.applyName)
  return *applyname_;
}
inline void GCApplyTeamLeader::set_applyname(const ::std::string& value) {
  set_has_applyname();
  if (applyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applyname_ = new ::std::string;
  }
  applyname_->assign(value);
  // @@protoc_insertion_point(field_set:GCApplyTeamLeader.applyName)
}
inline void GCApplyTeamLeader::set_applyname(const char* value) {
  set_has_applyname();
  if (applyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applyname_ = new ::std::string;
  }
  applyname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCApplyTeamLeader.applyName)
}
inline void GCApplyTeamLeader::set_applyname(const char* value, size_t size) {
  set_has_applyname();
  if (applyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applyname_ = new ::std::string;
  }
  applyname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCApplyTeamLeader.applyName)
}
inline ::std::string* GCApplyTeamLeader::mutable_applyname() {
  set_has_applyname();
  if (applyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applyname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCApplyTeamLeader.applyName)
  return applyname_;
}
inline ::std::string* GCApplyTeamLeader::release_applyname() {
  clear_has_applyname();
  if (applyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = applyname_;
    applyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCApplyTeamLeader::set_allocated_applyname(::std::string* applyname) {
  if (applyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete applyname_;
  }
  if (applyname) {
    set_has_applyname();
    applyname_ = applyname;
  } else {
    clear_has_applyname();
    applyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCApplyTeamLeader.applyName)
}

// optional string battleNumber = 3;
inline bool GCApplyTeamLeader::has_battlenumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCApplyTeamLeader::set_has_battlenumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCApplyTeamLeader::clear_has_battlenumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCApplyTeamLeader::clear_battlenumber() {
  if (battlenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlenumber_->clear();
  }
  clear_has_battlenumber();
}
inline const ::std::string& GCApplyTeamLeader::battlenumber() const {
  // @@protoc_insertion_point(field_get:GCApplyTeamLeader.battleNumber)
  return *battlenumber_;
}
inline void GCApplyTeamLeader::set_battlenumber(const ::std::string& value) {
  set_has_battlenumber();
  if (battlenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlenumber_ = new ::std::string;
  }
  battlenumber_->assign(value);
  // @@protoc_insertion_point(field_set:GCApplyTeamLeader.battleNumber)
}
inline void GCApplyTeamLeader::set_battlenumber(const char* value) {
  set_has_battlenumber();
  if (battlenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlenumber_ = new ::std::string;
  }
  battlenumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCApplyTeamLeader.battleNumber)
}
inline void GCApplyTeamLeader::set_battlenumber(const char* value, size_t size) {
  set_has_battlenumber();
  if (battlenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlenumber_ = new ::std::string;
  }
  battlenumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCApplyTeamLeader.battleNumber)
}
inline ::std::string* GCApplyTeamLeader::mutable_battlenumber() {
  set_has_battlenumber();
  if (battlenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlenumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCApplyTeamLeader.battleNumber)
  return battlenumber_;
}
inline ::std::string* GCApplyTeamLeader::release_battlenumber() {
  clear_has_battlenumber();
  if (battlenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battlenumber_;
    battlenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCApplyTeamLeader::set_allocated_battlenumber(::std::string* battlenumber) {
  if (battlenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battlenumber_;
  }
  if (battlenumber) {
    set_has_battlenumber();
    battlenumber_ = battlenumber;
  } else {
    clear_has_battlenumber();
    battlenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCApplyTeamLeader.battleNumber)
}

// -------------------------------------------------------------------

// CGAgreeApply

// optional int64 applyId = 1;
inline bool CGAgreeApply::has_applyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGAgreeApply::set_has_applyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGAgreeApply::clear_has_applyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGAgreeApply::clear_applyid() {
  applyid_ = GOOGLE_LONGLONG(0);
  clear_has_applyid();
}
inline ::google::protobuf::int64 CGAgreeApply::applyid() const {
  // @@protoc_insertion_point(field_get:CGAgreeApply.applyId)
  return applyid_;
}
inline void CGAgreeApply::set_applyid(::google::protobuf::int64 value) {
  set_has_applyid();
  applyid_ = value;
  // @@protoc_insertion_point(field_set:CGAgreeApply.applyId)
}

// optional int32 sts = 2;
inline bool CGAgreeApply::has_sts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGAgreeApply::set_has_sts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGAgreeApply::clear_has_sts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGAgreeApply::clear_sts() {
  sts_ = 0;
  clear_has_sts();
}
inline ::google::protobuf::int32 CGAgreeApply::sts() const {
  // @@protoc_insertion_point(field_get:CGAgreeApply.sts)
  return sts_;
}
inline void CGAgreeApply::set_sts(::google::protobuf::int32 value) {
  set_has_sts();
  sts_ = value;
  // @@protoc_insertion_point(field_set:CGAgreeApply.sts)
}

// -------------------------------------------------------------------

// CGInviteOther

// optional int64 invitePlayerId = 1;
inline bool CGInviteOther::has_inviteplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGInviteOther::set_has_inviteplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGInviteOther::clear_has_inviteplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGInviteOther::clear_inviteplayerid() {
  inviteplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_inviteplayerid();
}
inline ::google::protobuf::int64 CGInviteOther::inviteplayerid() const {
  // @@protoc_insertion_point(field_get:CGInviteOther.invitePlayerId)
  return inviteplayerid_;
}
inline void CGInviteOther::set_inviteplayerid(::google::protobuf::int64 value) {
  set_has_inviteplayerid();
  inviteplayerid_ = value;
  // @@protoc_insertion_point(field_set:CGInviteOther.invitePlayerId)
}

// -------------------------------------------------------------------

// GCInviteOther

// optional int64 leaderPlayerId = 1;
inline bool GCInviteOther::has_leaderplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCInviteOther::set_has_leaderplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCInviteOther::clear_has_leaderplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCInviteOther::clear_leaderplayerid() {
  leaderplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_leaderplayerid();
}
inline ::google::protobuf::int64 GCInviteOther::leaderplayerid() const {
  // @@protoc_insertion_point(field_get:GCInviteOther.leaderPlayerId)
  return leaderplayerid_;
}
inline void GCInviteOther::set_leaderplayerid(::google::protobuf::int64 value) {
  set_has_leaderplayerid();
  leaderplayerid_ = value;
  // @@protoc_insertion_point(field_set:GCInviteOther.leaderPlayerId)
}

// optional string leaderName = 2;
inline bool GCInviteOther::has_leadername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCInviteOther::set_has_leadername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCInviteOther::clear_has_leadername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCInviteOther::clear_leadername() {
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_->clear();
  }
  clear_has_leadername();
}
inline const ::std::string& GCInviteOther::leadername() const {
  // @@protoc_insertion_point(field_get:GCInviteOther.leaderName)
  return *leadername_;
}
inline void GCInviteOther::set_leadername(const ::std::string& value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
  // @@protoc_insertion_point(field_set:GCInviteOther.leaderName)
}
inline void GCInviteOther::set_leadername(const char* value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCInviteOther.leaderName)
}
inline void GCInviteOther::set_leadername(const char* value, size_t size) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCInviteOther.leaderName)
}
inline ::std::string* GCInviteOther::mutable_leadername() {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCInviteOther.leaderName)
  return leadername_;
}
inline ::std::string* GCInviteOther::release_leadername() {
  clear_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leadername_;
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCInviteOther::set_allocated_leadername(::std::string* leadername) {
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (leadername) {
    set_has_leadername();
    leadername_ = leadername;
  } else {
    clear_has_leadername();
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCInviteOther.leaderName)
}

// optional string battleNumber = 3;
inline bool GCInviteOther::has_battlenumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCInviteOther::set_has_battlenumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCInviteOther::clear_has_battlenumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCInviteOther::clear_battlenumber() {
  if (battlenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlenumber_->clear();
  }
  clear_has_battlenumber();
}
inline const ::std::string& GCInviteOther::battlenumber() const {
  // @@protoc_insertion_point(field_get:GCInviteOther.battleNumber)
  return *battlenumber_;
}
inline void GCInviteOther::set_battlenumber(const ::std::string& value) {
  set_has_battlenumber();
  if (battlenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlenumber_ = new ::std::string;
  }
  battlenumber_->assign(value);
  // @@protoc_insertion_point(field_set:GCInviteOther.battleNumber)
}
inline void GCInviteOther::set_battlenumber(const char* value) {
  set_has_battlenumber();
  if (battlenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlenumber_ = new ::std::string;
  }
  battlenumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCInviteOther.battleNumber)
}
inline void GCInviteOther::set_battlenumber(const char* value, size_t size) {
  set_has_battlenumber();
  if (battlenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlenumber_ = new ::std::string;
  }
  battlenumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCInviteOther.battleNumber)
}
inline ::std::string* GCInviteOther::mutable_battlenumber() {
  set_has_battlenumber();
  if (battlenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlenumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCInviteOther.battleNumber)
  return battlenumber_;
}
inline ::std::string* GCInviteOther::release_battlenumber() {
  clear_has_battlenumber();
  if (battlenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battlenumber_;
    battlenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCInviteOther::set_allocated_battlenumber(::std::string* battlenumber) {
  if (battlenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battlenumber_;
  }
  if (battlenumber) {
    set_has_battlenumber();
    battlenumber_ = battlenumber;
  } else {
    clear_has_battlenumber();
    battlenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCInviteOther.battleNumber)
}

// -------------------------------------------------------------------

// CGAgreeInvite

// optional int64 leaderPlayerId = 1;
inline bool CGAgreeInvite::has_leaderplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGAgreeInvite::set_has_leaderplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGAgreeInvite::clear_has_leaderplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGAgreeInvite::clear_leaderplayerid() {
  leaderplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_leaderplayerid();
}
inline ::google::protobuf::int64 CGAgreeInvite::leaderplayerid() const {
  // @@protoc_insertion_point(field_get:CGAgreeInvite.leaderPlayerId)
  return leaderplayerid_;
}
inline void CGAgreeInvite::set_leaderplayerid(::google::protobuf::int64 value) {
  set_has_leaderplayerid();
  leaderplayerid_ = value;
  // @@protoc_insertion_point(field_set:CGAgreeInvite.leaderPlayerId)
}

// optional int32 type = 2;
inline bool CGAgreeInvite::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGAgreeInvite::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGAgreeInvite::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGAgreeInvite::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGAgreeInvite::type() const {
  // @@protoc_insertion_point(field_get:CGAgreeInvite.type)
  return type_;
}
inline void CGAgreeInvite::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGAgreeInvite.type)
}

// -------------------------------------------------------------------

// CGKickedOut

// optional int64 otherPlayerId = 1;
inline bool CGKickedOut::has_otherplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGKickedOut::set_has_otherplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGKickedOut::clear_has_otherplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGKickedOut::clear_otherplayerid() {
  otherplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_otherplayerid();
}
inline ::google::protobuf::int64 CGKickedOut::otherplayerid() const {
  // @@protoc_insertion_point(field_get:CGKickedOut.otherPlayerId)
  return otherplayerid_;
}
inline void CGKickedOut::set_otherplayerid(::google::protobuf::int64 value) {
  set_has_otherplayerid();
  otherplayerid_ = value;
  // @@protoc_insertion_point(field_set:CGKickedOut.otherPlayerId)
}

// -------------------------------------------------------------------

// CGTransferCaption

// optional int64 otherPlayerId = 1;
inline bool CGTransferCaption::has_otherplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGTransferCaption::set_has_otherplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGTransferCaption::clear_has_otherplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGTransferCaption::clear_otherplayerid() {
  otherplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_otherplayerid();
}
inline ::google::protobuf::int64 CGTransferCaption::otherplayerid() const {
  // @@protoc_insertion_point(field_get:CGTransferCaption.otherPlayerId)
  return otherplayerid_;
}
inline void CGTransferCaption::set_otherplayerid(::google::protobuf::int64 value) {
  set_has_otherplayerid();
  otherplayerid_ = value;
  // @@protoc_insertion_point(field_set:CGTransferCaption.otherPlayerId)
}

// -------------------------------------------------------------------

// CGSetTeamAuthority

// optional int32 minLv = 1;
inline bool CGSetTeamAuthority::has_minlv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGSetTeamAuthority::set_has_minlv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGSetTeamAuthority::clear_has_minlv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGSetTeamAuthority::clear_minlv() {
  minlv_ = 0;
  clear_has_minlv();
}
inline ::google::protobuf::int32 CGSetTeamAuthority::minlv() const {
  // @@protoc_insertion_point(field_get:CGSetTeamAuthority.minLv)
  return minlv_;
}
inline void CGSetTeamAuthority::set_minlv(::google::protobuf::int32 value) {
  set_has_minlv();
  minlv_ = value;
  // @@protoc_insertion_point(field_set:CGSetTeamAuthority.minLv)
}

// optional int32 maxLv = 2;
inline bool CGSetTeamAuthority::has_maxlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGSetTeamAuthority::set_has_maxlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGSetTeamAuthority::clear_has_maxlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGSetTeamAuthority::clear_maxlv() {
  maxlv_ = 0;
  clear_has_maxlv();
}
inline ::google::protobuf::int32 CGSetTeamAuthority::maxlv() const {
  // @@protoc_insertion_point(field_get:CGSetTeamAuthority.maxLv)
  return maxlv_;
}
inline void CGSetTeamAuthority::set_maxlv(::google::protobuf::int32 value) {
  set_has_maxlv();
  maxlv_ = value;
  // @@protoc_insertion_point(field_set:CGSetTeamAuthority.maxLv)
}

// optional int32 minBattleNumber = 3;
inline bool CGSetTeamAuthority::has_minbattlenumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGSetTeamAuthority::set_has_minbattlenumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGSetTeamAuthority::clear_has_minbattlenumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGSetTeamAuthority::clear_minbattlenumber() {
  minbattlenumber_ = 0;
  clear_has_minbattlenumber();
}
inline ::google::protobuf::int32 CGSetTeamAuthority::minbattlenumber() const {
  // @@protoc_insertion_point(field_get:CGSetTeamAuthority.minBattleNumber)
  return minbattlenumber_;
}
inline void CGSetTeamAuthority::set_minbattlenumber(::google::protobuf::int32 value) {
  set_has_minbattlenumber();
  minbattlenumber_ = value;
  // @@protoc_insertion_point(field_set:CGSetTeamAuthority.minBattleNumber)
}

// optional int32 targetID = 4;
inline bool CGSetTeamAuthority::has_targetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGSetTeamAuthority::set_has_targetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CGSetTeamAuthority::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CGSetTeamAuthority::clear_targetid() {
  targetid_ = 0;
  clear_has_targetid();
}
inline ::google::protobuf::int32 CGSetTeamAuthority::targetid() const {
  // @@protoc_insertion_point(field_get:CGSetTeamAuthority.targetID)
  return targetid_;
}
inline void CGSetTeamAuthority::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:CGSetTeamAuthority.targetID)
}

// optional int32 autoFollw = 5;
inline bool CGSetTeamAuthority::has_autofollw() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CGSetTeamAuthority::set_has_autofollw() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CGSetTeamAuthority::clear_has_autofollw() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CGSetTeamAuthority::clear_autofollw() {
  autofollw_ = 0;
  clear_has_autofollw();
}
inline ::google::protobuf::int32 CGSetTeamAuthority::autofollw() const {
  // @@protoc_insertion_point(field_get:CGSetTeamAuthority.autoFollw)
  return autofollw_;
}
inline void CGSetTeamAuthority::set_autofollw(::google::protobuf::int32 value) {
  set_has_autofollw();
  autofollw_ = value;
  // @@protoc_insertion_point(field_set:CGSetTeamAuthority.autoFollw)
}

// optional int32 autoAgree = 6;
inline bool CGSetTeamAuthority::has_autoagree() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CGSetTeamAuthority::set_has_autoagree() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CGSetTeamAuthority::clear_has_autoagree() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CGSetTeamAuthority::clear_autoagree() {
  autoagree_ = 0;
  clear_has_autoagree();
}
inline ::google::protobuf::int32 CGSetTeamAuthority::autoagree() const {
  // @@protoc_insertion_point(field_get:CGSetTeamAuthority.autoAgree)
  return autoagree_;
}
inline void CGSetTeamAuthority::set_autoagree(::google::protobuf::int32 value) {
  set_has_autoagree();
  autoagree_ = value;
  // @@protoc_insertion_point(field_set:CGSetTeamAuthority.autoAgree)
}

// -------------------------------------------------------------------

// GCSetTeamAuthority

// optional int32 minLv = 1;
inline bool GCSetTeamAuthority::has_minlv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCSetTeamAuthority::set_has_minlv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCSetTeamAuthority::clear_has_minlv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCSetTeamAuthority::clear_minlv() {
  minlv_ = 0;
  clear_has_minlv();
}
inline ::google::protobuf::int32 GCSetTeamAuthority::minlv() const {
  // @@protoc_insertion_point(field_get:GCSetTeamAuthority.minLv)
  return minlv_;
}
inline void GCSetTeamAuthority::set_minlv(::google::protobuf::int32 value) {
  set_has_minlv();
  minlv_ = value;
  // @@protoc_insertion_point(field_set:GCSetTeamAuthority.minLv)
}

// optional int32 maxLv = 2;
inline bool GCSetTeamAuthority::has_maxlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCSetTeamAuthority::set_has_maxlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCSetTeamAuthority::clear_has_maxlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCSetTeamAuthority::clear_maxlv() {
  maxlv_ = 0;
  clear_has_maxlv();
}
inline ::google::protobuf::int32 GCSetTeamAuthority::maxlv() const {
  // @@protoc_insertion_point(field_get:GCSetTeamAuthority.maxLv)
  return maxlv_;
}
inline void GCSetTeamAuthority::set_maxlv(::google::protobuf::int32 value) {
  set_has_maxlv();
  maxlv_ = value;
  // @@protoc_insertion_point(field_set:GCSetTeamAuthority.maxLv)
}

// optional int32 minBattleNumber = 3;
inline bool GCSetTeamAuthority::has_minbattlenumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCSetTeamAuthority::set_has_minbattlenumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCSetTeamAuthority::clear_has_minbattlenumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCSetTeamAuthority::clear_minbattlenumber() {
  minbattlenumber_ = 0;
  clear_has_minbattlenumber();
}
inline ::google::protobuf::int32 GCSetTeamAuthority::minbattlenumber() const {
  // @@protoc_insertion_point(field_get:GCSetTeamAuthority.minBattleNumber)
  return minbattlenumber_;
}
inline void GCSetTeamAuthority::set_minbattlenumber(::google::protobuf::int32 value) {
  set_has_minbattlenumber();
  minbattlenumber_ = value;
  // @@protoc_insertion_point(field_set:GCSetTeamAuthority.minBattleNumber)
}

// optional int32 targetID = 4;
inline bool GCSetTeamAuthority::has_targetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCSetTeamAuthority::set_has_targetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCSetTeamAuthority::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCSetTeamAuthority::clear_targetid() {
  targetid_ = 0;
  clear_has_targetid();
}
inline ::google::protobuf::int32 GCSetTeamAuthority::targetid() const {
  // @@protoc_insertion_point(field_get:GCSetTeamAuthority.targetID)
  return targetid_;
}
inline void GCSetTeamAuthority::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:GCSetTeamAuthority.targetID)
}

// optional int32 autoFollw = 5;
inline bool GCSetTeamAuthority::has_autofollw() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCSetTeamAuthority::set_has_autofollw() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCSetTeamAuthority::clear_has_autofollw() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCSetTeamAuthority::clear_autofollw() {
  autofollw_ = 0;
  clear_has_autofollw();
}
inline ::google::protobuf::int32 GCSetTeamAuthority::autofollw() const {
  // @@protoc_insertion_point(field_get:GCSetTeamAuthority.autoFollw)
  return autofollw_;
}
inline void GCSetTeamAuthority::set_autofollw(::google::protobuf::int32 value) {
  set_has_autofollw();
  autofollw_ = value;
  // @@protoc_insertion_point(field_set:GCSetTeamAuthority.autoFollw)
}

// optional int32 autoAgree = 6;
inline bool GCSetTeamAuthority::has_autoagree() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCSetTeamAuthority::set_has_autoagree() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCSetTeamAuthority::clear_has_autoagree() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCSetTeamAuthority::clear_autoagree() {
  autoagree_ = 0;
  clear_has_autoagree();
}
inline ::google::protobuf::int32 GCSetTeamAuthority::autoagree() const {
  // @@protoc_insertion_point(field_get:GCSetTeamAuthority.autoAgree)
  return autoagree_;
}
inline void GCSetTeamAuthority::set_autoagree(::google::protobuf::int32 value) {
  set_has_autoagree();
  autoagree_ = value;
  // @@protoc_insertion_point(field_set:GCSetTeamAuthority.autoAgree)
}

// -------------------------------------------------------------------

// CGSetAutoAgree

// optional int32 autoAgree = 1;
inline bool CGSetAutoAgree::has_autoagree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGSetAutoAgree::set_has_autoagree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGSetAutoAgree::clear_has_autoagree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGSetAutoAgree::clear_autoagree() {
  autoagree_ = 0;
  clear_has_autoagree();
}
inline ::google::protobuf::int32 CGSetAutoAgree::autoagree() const {
  // @@protoc_insertion_point(field_get:CGSetAutoAgree.autoAgree)
  return autoagree_;
}
inline void CGSetAutoAgree::set_autoagree(::google::protobuf::int32 value) {
  set_has_autoagree();
  autoagree_ = value;
  // @@protoc_insertion_point(field_set:CGSetAutoAgree.autoAgree)
}

// -------------------------------------------------------------------

// GCSetAutoAgree

// optional int32 autoAgree = 1;
inline bool GCSetAutoAgree::has_autoagree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCSetAutoAgree::set_has_autoagree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCSetAutoAgree::clear_has_autoagree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCSetAutoAgree::clear_autoagree() {
  autoagree_ = 0;
  clear_has_autoagree();
}
inline ::google::protobuf::int32 GCSetAutoAgree::autoagree() const {
  // @@protoc_insertion_point(field_get:GCSetAutoAgree.autoAgree)
  return autoagree_;
}
inline void GCSetAutoAgree::set_autoagree(::google::protobuf::int32 value) {
  set_has_autoagree();
  autoagree_ = value;
  // @@protoc_insertion_point(field_set:GCSetAutoAgree.autoAgree)
}

// -------------------------------------------------------------------

// CGCallFlow

// -------------------------------------------------------------------

// GCCallFlow

// optional string playerName = 1;
inline bool GCCallFlow::has_playername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCCallFlow::set_has_playername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCCallFlow::clear_has_playername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCCallFlow::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& GCCallFlow::playername() const {
  // @@protoc_insertion_point(field_get:GCCallFlow.playerName)
  return *playername_;
}
inline void GCCallFlow::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:GCCallFlow.playerName)
}
inline void GCCallFlow::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCCallFlow.playerName)
}
inline void GCCallFlow::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCCallFlow.playerName)
}
inline ::std::string* GCCallFlow::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCCallFlow.playerName)
  return playername_;
}
inline ::std::string* GCCallFlow::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCCallFlow::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCCallFlow.playerName)
}

// -------------------------------------------------------------------

// CGMemberResponse

// optional int32 res = 1;
inline bool CGMemberResponse::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGMemberResponse::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGMemberResponse::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGMemberResponse::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 CGMemberResponse::res() const {
  // @@protoc_insertion_point(field_get:CGMemberResponse.res)
  return res_;
}
inline void CGMemberResponse::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
  // @@protoc_insertion_point(field_set:CGMemberResponse.res)
}

// -------------------------------------------------------------------

// CGMemberFolw

// optional int32 autoFolw = 1;
inline bool CGMemberFolw::has_autofolw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGMemberFolw::set_has_autofolw() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGMemberFolw::clear_has_autofolw() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGMemberFolw::clear_autofolw() {
  autofolw_ = 0;
  clear_has_autofolw();
}
inline ::google::protobuf::int32 CGMemberFolw::autofolw() const {
  // @@protoc_insertion_point(field_get:CGMemberFolw.autoFolw)
  return autofolw_;
}
inline void CGMemberFolw::set_autofolw(::google::protobuf::int32 value) {
  set_has_autofolw();
  autofolw_ = value;
  // @@protoc_insertion_point(field_set:CGMemberFolw.autoFolw)
}

// -------------------------------------------------------------------

// GCMemberFolw

// optional int32 autoFolw = 1;
inline bool GCMemberFolw::has_autofolw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCMemberFolw::set_has_autofolw() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCMemberFolw::clear_has_autofolw() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCMemberFolw::clear_autofolw() {
  autofolw_ = 0;
  clear_has_autofolw();
}
inline ::google::protobuf::int32 GCMemberFolw::autofolw() const {
  // @@protoc_insertion_point(field_get:GCMemberFolw.autoFolw)
  return autofolw_;
}
inline void GCMemberFolw::set_autofolw(::google::protobuf::int32 value) {
  set_has_autofolw();
  autofolw_ = value;
  // @@protoc_insertion_point(field_set:GCMemberFolw.autoFolw)
}

// optional int64 playerId = 2;
inline bool GCMemberFolw::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCMemberFolw::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCMemberFolw::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCMemberFolw::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 GCMemberFolw::playerid() const {
  // @@protoc_insertion_point(field_get:GCMemberFolw.playerId)
  return playerid_;
}
inline void GCMemberFolw::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GCMemberFolw.playerId)
}

// -------------------------------------------------------------------

// CGQuickTeam

// optional int32 autoQuick = 1;
inline bool CGQuickTeam::has_autoquick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGQuickTeam::set_has_autoquick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGQuickTeam::clear_has_autoquick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGQuickTeam::clear_autoquick() {
  autoquick_ = 0;
  clear_has_autoquick();
}
inline ::google::protobuf::int32 CGQuickTeam::autoquick() const {
  // @@protoc_insertion_point(field_get:CGQuickTeam.autoQuick)
  return autoquick_;
}
inline void CGQuickTeam::set_autoquick(::google::protobuf::int32 value) {
  set_has_autoquick();
  autoquick_ = value;
  // @@protoc_insertion_point(field_set:CGQuickTeam.autoQuick)
}

// optional int32 targetID = 2;
inline bool CGQuickTeam::has_targetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGQuickTeam::set_has_targetid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGQuickTeam::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGQuickTeam::clear_targetid() {
  targetid_ = 0;
  clear_has_targetid();
}
inline ::google::protobuf::int32 CGQuickTeam::targetid() const {
  // @@protoc_insertion_point(field_get:CGQuickTeam.targetID)
  return targetid_;
}
inline void CGQuickTeam::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:CGQuickTeam.targetID)
}

// -------------------------------------------------------------------

// GCQuickTeam

// optional int32 autoQuick = 1;
inline bool GCQuickTeam::has_autoquick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCQuickTeam::set_has_autoquick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCQuickTeam::clear_has_autoquick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCQuickTeam::clear_autoquick() {
  autoquick_ = 0;
  clear_has_autoquick();
}
inline ::google::protobuf::int32 GCQuickTeam::autoquick() const {
  // @@protoc_insertion_point(field_get:GCQuickTeam.autoQuick)
  return autoquick_;
}
inline void GCQuickTeam::set_autoquick(::google::protobuf::int32 value) {
  set_has_autoquick();
  autoquick_ = value;
  // @@protoc_insertion_point(field_set:GCQuickTeam.autoQuick)
}

// -------------------------------------------------------------------

// GCFllowQueue

// repeated int64 fllowIds = 1;
inline int GCFllowQueue::fllowids_size() const {
  return fllowids_.size();
}
inline void GCFllowQueue::clear_fllowids() {
  fllowids_.Clear();
}
inline ::google::protobuf::int64 GCFllowQueue::fllowids(int index) const {
  // @@protoc_insertion_point(field_get:GCFllowQueue.fllowIds)
  return fllowids_.Get(index);
}
inline void GCFllowQueue::set_fllowids(int index, ::google::protobuf::int64 value) {
  fllowids_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCFllowQueue.fllowIds)
}
inline void GCFllowQueue::add_fllowids(::google::protobuf::int64 value) {
  fllowids_.Add(value);
  // @@protoc_insertion_point(field_add:GCFllowQueue.fllowIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GCFllowQueue::fllowids() const {
  // @@protoc_insertion_point(field_list:GCFllowQueue.fllowIds)
  return fllowids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GCFllowQueue::mutable_fllowids() {
  // @@protoc_insertion_point(field_mutable_list:GCFllowQueue.fllowIds)
  return &fllowids_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TeamMessage_2eproto__INCLUDED
