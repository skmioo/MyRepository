// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamPKMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TeamPKMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TeamPKInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPKInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGTeamPKSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGTeamPKSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCTeamPKPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCTeamPKPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGTeamPKHoldFightFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGTeamPKHoldFightFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCTeamPKHoldFightFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCTeamPKHoldFightFlag_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TeamPKMessage_2eproto() {
  protobuf_AddDesc_TeamPKMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TeamPKMessage.proto");
  GOOGLE_CHECK(file != NULL);
  TeamPKInfo_descriptor_ = file->message_type(0);
  static const int TeamPKInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPKInfo, teampktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPKInfo, teampkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPKInfo, teampkwincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPKInfo, teampksuccessioncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPKInfo, teampkrewardstate_),
  };
  TeamPKInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPKInfo_descriptor_,
      TeamPKInfo::default_instance_,
      TeamPKInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPKInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPKInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPKInfo));
  CGTeamPKSend_descriptor_ = file->message_type(1);
  static const int CGTeamPKSend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeamPKSend, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeamPKSend, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeamPKSend, teampktype_),
  };
  CGTeamPKSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGTeamPKSend_descriptor_,
      CGTeamPKSend::default_instance_,
      CGTeamPKSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeamPKSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeamPKSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGTeamPKSend));
  GCTeamPKPush_descriptor_ = file->message_type(2);
  static const int GCTeamPKPush_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, teampkinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, lastreadytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, diepuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, killpuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, diename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, killname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, camp1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, camp2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, scorebattle1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, scorebattle2_),
  };
  GCTeamPKPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCTeamPKPush_descriptor_,
      GCTeamPKPush::default_instance_,
      GCTeamPKPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCTeamPKPush));
  CGTeamPKHoldFightFlag_descriptor_ = file->message_type(3);
  static const int CGTeamPKHoldFightFlag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeamPKHoldFightFlag, objid_),
  };
  CGTeamPKHoldFightFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGTeamPKHoldFightFlag_descriptor_,
      CGTeamPKHoldFightFlag::default_instance_,
      CGTeamPKHoldFightFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeamPKHoldFightFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeamPKHoldFightFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGTeamPKHoldFightFlag));
  GCTeamPKHoldFightFlag_descriptor_ = file->message_type(4);
  static const int GCTeamPKHoldFightFlag_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKHoldFightFlag, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKHoldFightFlag, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKHoldFightFlag, playerid_),
  };
  GCTeamPKHoldFightFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCTeamPKHoldFightFlag_descriptor_,
      GCTeamPKHoldFightFlag::default_instance_,
      GCTeamPKHoldFightFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKHoldFightFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeamPKHoldFightFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCTeamPKHoldFightFlag));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TeamPKMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPKInfo_descriptor_, &TeamPKInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGTeamPKSend_descriptor_, &CGTeamPKSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCTeamPKPush_descriptor_, &GCTeamPKPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGTeamPKHoldFightFlag_descriptor_, &CGTeamPKHoldFightFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCTeamPKHoldFightFlag_descriptor_, &GCTeamPKHoldFightFlag::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TeamPKMessage_2eproto() {
  delete TeamPKInfo::default_instance_;
  delete TeamPKInfo_reflection_;
  delete CGTeamPKSend::default_instance_;
  delete CGTeamPKSend_reflection_;
  delete GCTeamPKPush::default_instance_;
  delete GCTeamPKPush_reflection_;
  delete CGTeamPKHoldFightFlag::default_instance_;
  delete CGTeamPKHoldFightFlag_reflection_;
  delete GCTeamPKHoldFightFlag::default_instance_;
  delete GCTeamPKHoldFightFlag_reflection_;
}

void protobuf_AddDesc_TeamPKMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_CommonMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023TeamPKMessage.proto\032\023CommonMessage.pro"
    "to\"\207\001\n\nTeamPKInfo\022\022\n\nteamPKType\030\001 \001(\005\022\023\n"
    "\013teamPKCount\030\002 \001(\005\022\026\n\016teamPKWinCount\030\003 \001"
    "(\005\022\035\n\025teamPKSuccessionCount\030\004 \001(\005\022\031\n\021tea"
    "mPKRewardState\030\005 \001(\005\"E\n\014CGTeamPKSend\022\017\n\007"
    "operate\030\001 \001(\005\022\020\n\010rewardId\030\002 \001(\005\022\022\n\nteamP"
    "KType\030\003 \001(\005\"\237\002\n\014GCTeamPKPush\022\017\n\007operate\030"
    "\001 \001(\005\022\037\n\nteamPKInfo\030\002 \003(\0132\013.TeamPKInfo\022\025"
    "\n\rlastReadyTime\030\003 \001(\005\022\017\n\007diePuid\030\004 \001(\003\022\020"
    "\n\010killPuid\030\005 \001(\003\022\017\n\007dieName\030\006 \001(\t\022\020\n\010kil"
    "lName\030\007 \001(\t\022\014\n\004flag\030\010 \001(\005\022\016\n\006result\030\t \001("
    "\005\022\032\n\005camp1\030\n \001(\0132\013.MapLongAry\022\032\n\005camp2\030\013"
    " \001(\0132\013.MapLongAry\022\024\n\014scoreBattle1\030\014 \001(\005\022"
    "\024\n\014scoreBattle2\030\r \001(\005\"&\n\025CGTeamPKHoldFig"
    "htFlag\022\r\n\005objId\030\001 \001(\003\"F\n\025GCTeamPKHoldFig"
    "htFlag\022\r\n\005objId\030\001 \001(\003\022\014\n\004camp\030\002 \001(\005\022\020\n\010p"
    "layerId\030\003 \001(\003B\031\n\027com.mile.common.message", 680);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TeamPKMessage.proto", &protobuf_RegisterTypes);
  TeamPKInfo::default_instance_ = new TeamPKInfo();
  CGTeamPKSend::default_instance_ = new CGTeamPKSend();
  GCTeamPKPush::default_instance_ = new GCTeamPKPush();
  CGTeamPKHoldFightFlag::default_instance_ = new CGTeamPKHoldFightFlag();
  GCTeamPKHoldFightFlag::default_instance_ = new GCTeamPKHoldFightFlag();
  TeamPKInfo::default_instance_->InitAsDefaultInstance();
  CGTeamPKSend::default_instance_->InitAsDefaultInstance();
  GCTeamPKPush::default_instance_->InitAsDefaultInstance();
  CGTeamPKHoldFightFlag::default_instance_->InitAsDefaultInstance();
  GCTeamPKHoldFightFlag::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TeamPKMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TeamPKMessage_2eproto {
  StaticDescriptorInitializer_TeamPKMessage_2eproto() {
    protobuf_AddDesc_TeamPKMessage_2eproto();
  }
} static_descriptor_initializer_TeamPKMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TeamPKInfo::kTeamPKTypeFieldNumber;
const int TeamPKInfo::kTeamPKCountFieldNumber;
const int TeamPKInfo::kTeamPKWinCountFieldNumber;
const int TeamPKInfo::kTeamPKSuccessionCountFieldNumber;
const int TeamPKInfo::kTeamPKRewardStateFieldNumber;
#endif  // !_MSC_VER

TeamPKInfo::TeamPKInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamPKInfo)
}

void TeamPKInfo::InitAsDefaultInstance() {
}

TeamPKInfo::TeamPKInfo(const TeamPKInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TeamPKInfo)
}

void TeamPKInfo::SharedCtor() {
  _cached_size_ = 0;
  teampktype_ = 0;
  teampkcount_ = 0;
  teampkwincount_ = 0;
  teampksuccessioncount_ = 0;
  teampkrewardstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPKInfo::~TeamPKInfo() {
  // @@protoc_insertion_point(destructor:TeamPKInfo)
  SharedDtor();
}

void TeamPKInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamPKInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPKInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPKInfo_descriptor_;
}

const TeamPKInfo& TeamPKInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamPKMessage_2eproto();
  return *default_instance_;
}

TeamPKInfo* TeamPKInfo::default_instance_ = NULL;

TeamPKInfo* TeamPKInfo::New() const {
  return new TeamPKInfo;
}

void TeamPKInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamPKInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(teampktype_, teampkrewardstate_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPKInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamPKInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 teamPKType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teampktype_)));
          set_has_teampktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamPKCount;
        break;
      }

      // optional int32 teamPKCount = 2;
      case 2: {
        if (tag == 16) {
         parse_teamPKCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teampkcount_)));
          set_has_teampkcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamPKWinCount;
        break;
      }

      // optional int32 teamPKWinCount = 3;
      case 3: {
        if (tag == 24) {
         parse_teamPKWinCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teampkwincount_)));
          set_has_teampkwincount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamPKSuccessionCount;
        break;
      }

      // optional int32 teamPKSuccessionCount = 4;
      case 4: {
        if (tag == 32) {
         parse_teamPKSuccessionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teampksuccessioncount_)));
          set_has_teampksuccessioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_teamPKRewardState;
        break;
      }

      // optional int32 teamPKRewardState = 5;
      case 5: {
        if (tag == 40) {
         parse_teamPKRewardState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teampkrewardstate_)));
          set_has_teampkrewardstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamPKInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamPKInfo)
  return false;
#undef DO_
}

void TeamPKInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamPKInfo)
  // optional int32 teamPKType = 1;
  if (has_teampktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teampktype(), output);
  }

  // optional int32 teamPKCount = 2;
  if (has_teampkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teampkcount(), output);
  }

  // optional int32 teamPKWinCount = 3;
  if (has_teampkwincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teampkwincount(), output);
  }

  // optional int32 teamPKSuccessionCount = 4;
  if (has_teampksuccessioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teampksuccessioncount(), output);
  }

  // optional int32 teamPKRewardState = 5;
  if (has_teampkrewardstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->teampkrewardstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamPKInfo)
}

::google::protobuf::uint8* TeamPKInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamPKInfo)
  // optional int32 teamPKType = 1;
  if (has_teampktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->teampktype(), target);
  }

  // optional int32 teamPKCount = 2;
  if (has_teampkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teampkcount(), target);
  }

  // optional int32 teamPKWinCount = 3;
  if (has_teampkwincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->teampkwincount(), target);
  }

  // optional int32 teamPKSuccessionCount = 4;
  if (has_teampksuccessioncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teampksuccessioncount(), target);
  }

  // optional int32 teamPKRewardState = 5;
  if (has_teampkrewardstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->teampkrewardstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamPKInfo)
  return target;
}

int TeamPKInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 teamPKType = 1;
    if (has_teampktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teampktype());
    }

    // optional int32 teamPKCount = 2;
    if (has_teampkcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teampkcount());
    }

    // optional int32 teamPKWinCount = 3;
    if (has_teampkwincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teampkwincount());
    }

    // optional int32 teamPKSuccessionCount = 4;
    if (has_teampksuccessioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teampksuccessioncount());
    }

    // optional int32 teamPKRewardState = 5;
    if (has_teampkrewardstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teampkrewardstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPKInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPKInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPKInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPKInfo::MergeFrom(const TeamPKInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teampktype()) {
      set_teampktype(from.teampktype());
    }
    if (from.has_teampkcount()) {
      set_teampkcount(from.teampkcount());
    }
    if (from.has_teampkwincount()) {
      set_teampkwincount(from.teampkwincount());
    }
    if (from.has_teampksuccessioncount()) {
      set_teampksuccessioncount(from.teampksuccessioncount());
    }
    if (from.has_teampkrewardstate()) {
      set_teampkrewardstate(from.teampkrewardstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPKInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPKInfo::CopyFrom(const TeamPKInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPKInfo::IsInitialized() const {

  return true;
}

void TeamPKInfo::Swap(TeamPKInfo* other) {
  if (other != this) {
    std::swap(teampktype_, other->teampktype_);
    std::swap(teampkcount_, other->teampkcount_);
    std::swap(teampkwincount_, other->teampkwincount_);
    std::swap(teampksuccessioncount_, other->teampksuccessioncount_);
    std::swap(teampkrewardstate_, other->teampkrewardstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPKInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPKInfo_descriptor_;
  metadata.reflection = TeamPKInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGTeamPKSend::kOperateFieldNumber;
const int CGTeamPKSend::kRewardIdFieldNumber;
const int CGTeamPKSend::kTeamPKTypeFieldNumber;
#endif  // !_MSC_VER

CGTeamPKSend::CGTeamPKSend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGTeamPKSend)
}

void CGTeamPKSend::InitAsDefaultInstance() {
}

CGTeamPKSend::CGTeamPKSend(const CGTeamPKSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGTeamPKSend)
}

void CGTeamPKSend::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  rewardid_ = 0;
  teampktype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGTeamPKSend::~CGTeamPKSend() {
  // @@protoc_insertion_point(destructor:CGTeamPKSend)
  SharedDtor();
}

void CGTeamPKSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGTeamPKSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGTeamPKSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGTeamPKSend_descriptor_;
}

const CGTeamPKSend& CGTeamPKSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamPKMessage_2eproto();
  return *default_instance_;
}

CGTeamPKSend* CGTeamPKSend::default_instance_ = NULL;

CGTeamPKSend* CGTeamPKSend::New() const {
  return new CGTeamPKSend;
}

void CGTeamPKSend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGTeamPKSend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, teampktype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGTeamPKSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGTeamPKSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rewardId;
        break;
      }

      // optional int32 rewardId = 2;
      case 2: {
        if (tag == 16) {
         parse_rewardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamPKType;
        break;
      }

      // optional int32 teamPKType = 3;
      case 3: {
        if (tag == 24) {
         parse_teamPKType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teampktype_)));
          set_has_teampktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGTeamPKSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGTeamPKSend)
  return false;
#undef DO_
}

void CGTeamPKSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGTeamPKSend)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 rewardId = 2;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rewardid(), output);
  }

  // optional int32 teamPKType = 3;
  if (has_teampktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teampktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGTeamPKSend)
}

::google::protobuf::uint8* CGTeamPKSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGTeamPKSend)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 rewardId = 2;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rewardid(), target);
  }

  // optional int32 teamPKType = 3;
  if (has_teampktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->teampktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGTeamPKSend)
  return target;
}

int CGTeamPKSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 rewardId = 2;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardid());
    }

    // optional int32 teamPKType = 3;
    if (has_teampktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teampktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGTeamPKSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGTeamPKSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGTeamPKSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGTeamPKSend::MergeFrom(const CGTeamPKSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
    if (from.has_teampktype()) {
      set_teampktype(from.teampktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGTeamPKSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGTeamPKSend::CopyFrom(const CGTeamPKSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGTeamPKSend::IsInitialized() const {

  return true;
}

void CGTeamPKSend::Swap(CGTeamPKSend* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(teampktype_, other->teampktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGTeamPKSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGTeamPKSend_descriptor_;
  metadata.reflection = CGTeamPKSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCTeamPKPush::kOperateFieldNumber;
const int GCTeamPKPush::kTeamPKInfoFieldNumber;
const int GCTeamPKPush::kLastReadyTimeFieldNumber;
const int GCTeamPKPush::kDiePuidFieldNumber;
const int GCTeamPKPush::kKillPuidFieldNumber;
const int GCTeamPKPush::kDieNameFieldNumber;
const int GCTeamPKPush::kKillNameFieldNumber;
const int GCTeamPKPush::kFlagFieldNumber;
const int GCTeamPKPush::kResultFieldNumber;
const int GCTeamPKPush::kCamp1FieldNumber;
const int GCTeamPKPush::kCamp2FieldNumber;
const int GCTeamPKPush::kScoreBattle1FieldNumber;
const int GCTeamPKPush::kScoreBattle2FieldNumber;
#endif  // !_MSC_VER

GCTeamPKPush::GCTeamPKPush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCTeamPKPush)
}

void GCTeamPKPush::InitAsDefaultInstance() {
  camp1_ = const_cast< ::MapLongAry*>(&::MapLongAry::default_instance());
  camp2_ = const_cast< ::MapLongAry*>(&::MapLongAry::default_instance());
}

GCTeamPKPush::GCTeamPKPush(const GCTeamPKPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCTeamPKPush)
}

void GCTeamPKPush::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operate_ = 0;
  lastreadytime_ = 0;
  diepuid_ = GOOGLE_LONGLONG(0);
  killpuid_ = GOOGLE_LONGLONG(0);
  diename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  killname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  result_ = 0;
  camp1_ = NULL;
  camp2_ = NULL;
  scorebattle1_ = 0;
  scorebattle2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCTeamPKPush::~GCTeamPKPush() {
  // @@protoc_insertion_point(destructor:GCTeamPKPush)
  SharedDtor();
}

void GCTeamPKPush::SharedDtor() {
  if (diename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diename_;
  }
  if (killname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete killname_;
  }
  if (this != default_instance_) {
    delete camp1_;
    delete camp2_;
  }
}

void GCTeamPKPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCTeamPKPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCTeamPKPush_descriptor_;
}

const GCTeamPKPush& GCTeamPKPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamPKMessage_2eproto();
  return *default_instance_;
}

GCTeamPKPush* GCTeamPKPush::default_instance_ = NULL;

GCTeamPKPush* GCTeamPKPush::New() const {
  return new GCTeamPKPush;
}

void GCTeamPKPush::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCTeamPKPush*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 253) {
    ZR_(operate_, killpuid_);
    if (has_diename()) {
      if (diename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diename_->clear();
      }
    }
    if (has_killname()) {
      if (killname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        killname_->clear();
      }
    }
    flag_ = 0;
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(scorebattle1_, scorebattle2_);
    result_ = 0;
    if (has_camp1()) {
      if (camp1_ != NULL) camp1_->::MapLongAry::Clear();
    }
    if (has_camp2()) {
      if (camp2_ != NULL) camp2_->::MapLongAry::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  teampkinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCTeamPKPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCTeamPKPush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teamPKInfo;
        break;
      }

      // repeated .TeamPKInfo teamPKInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_teamPKInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teampkinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teamPKInfo;
        if (input->ExpectTag(24)) goto parse_lastReadyTime;
        break;
      }

      // optional int32 lastReadyTime = 3;
      case 3: {
        if (tag == 24) {
         parse_lastReadyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastreadytime_)));
          set_has_lastreadytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_diePuid;
        break;
      }

      // optional int64 diePuid = 4;
      case 4: {
        if (tag == 32) {
         parse_diePuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diepuid_)));
          set_has_diepuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_killPuid;
        break;
      }

      // optional int64 killPuid = 5;
      case 5: {
        if (tag == 40) {
         parse_killPuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &killpuid_)));
          set_has_killpuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dieName;
        break;
      }

      // optional string dieName = 6;
      case 6: {
        if (tag == 50) {
         parse_dieName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->diename().data(), this->diename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "diename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_killName;
        break;
      }

      // optional string killName = 7;
      case 7: {
        if (tag == 58) {
         parse_killName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->killname().data(), this->killname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "killname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_flag;
        break;
      }

      // optional int32 flag = 8;
      case 8: {
        if (tag == 64) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_result;
        break;
      }

      // optional int32 result = 9;
      case 9: {
        if (tag == 72) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_camp1;
        break;
      }

      // optional .MapLongAry camp1 = 10;
      case 10: {
        if (tag == 82) {
         parse_camp1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camp1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_camp2;
        break;
      }

      // optional .MapLongAry camp2 = 11;
      case 11: {
        if (tag == 90) {
         parse_camp2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camp2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_scoreBattle1;
        break;
      }

      // optional int32 scoreBattle1 = 12;
      case 12: {
        if (tag == 96) {
         parse_scoreBattle1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scorebattle1_)));
          set_has_scorebattle1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_scoreBattle2;
        break;
      }

      // optional int32 scoreBattle2 = 13;
      case 13: {
        if (tag == 104) {
         parse_scoreBattle2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scorebattle2_)));
          set_has_scorebattle2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCTeamPKPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCTeamPKPush)
  return false;
#undef DO_
}

void GCTeamPKPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCTeamPKPush)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // repeated .TeamPKInfo teamPKInfo = 2;
  for (int i = 0; i < this->teampkinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teampkinfo(i), output);
  }

  // optional int32 lastReadyTime = 3;
  if (has_lastreadytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lastreadytime(), output);
  }

  // optional int64 diePuid = 4;
  if (has_diepuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->diepuid(), output);
  }

  // optional int64 killPuid = 5;
  if (has_killpuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->killpuid(), output);
  }

  // optional string dieName = 6;
  if (has_diename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->diename().data(), this->diename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "diename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->diename(), output);
  }

  // optional string killName = 7;
  if (has_killname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->killname().data(), this->killname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "killname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->killname(), output);
  }

  // optional int32 flag = 8;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->flag(), output);
  }

  // optional int32 result = 9;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->result(), output);
  }

  // optional .MapLongAry camp1 = 10;
  if (has_camp1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->camp1(), output);
  }

  // optional .MapLongAry camp2 = 11;
  if (has_camp2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->camp2(), output);
  }

  // optional int32 scoreBattle1 = 12;
  if (has_scorebattle1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->scorebattle1(), output);
  }

  // optional int32 scoreBattle2 = 13;
  if (has_scorebattle2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->scorebattle2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCTeamPKPush)
}

::google::protobuf::uint8* GCTeamPKPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCTeamPKPush)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // repeated .TeamPKInfo teamPKInfo = 2;
  for (int i = 0; i < this->teampkinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teampkinfo(i), target);
  }

  // optional int32 lastReadyTime = 3;
  if (has_lastreadytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lastreadytime(), target);
  }

  // optional int64 diePuid = 4;
  if (has_diepuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->diepuid(), target);
  }

  // optional int64 killPuid = 5;
  if (has_killpuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->killpuid(), target);
  }

  // optional string dieName = 6;
  if (has_diename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->diename().data(), this->diename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "diename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->diename(), target);
  }

  // optional string killName = 7;
  if (has_killname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->killname().data(), this->killname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "killname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->killname(), target);
  }

  // optional int32 flag = 8;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->flag(), target);
  }

  // optional int32 result = 9;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->result(), target);
  }

  // optional .MapLongAry camp1 = 10;
  if (has_camp1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->camp1(), target);
  }

  // optional .MapLongAry camp2 = 11;
  if (has_camp2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->camp2(), target);
  }

  // optional int32 scoreBattle1 = 12;
  if (has_scorebattle1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->scorebattle1(), target);
  }

  // optional int32 scoreBattle2 = 13;
  if (has_scorebattle2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->scorebattle2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCTeamPKPush)
  return target;
}

int GCTeamPKPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 lastReadyTime = 3;
    if (has_lastreadytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastreadytime());
    }

    // optional int64 diePuid = 4;
    if (has_diepuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diepuid());
    }

    // optional int64 killPuid = 5;
    if (has_killpuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->killpuid());
    }

    // optional string dieName = 6;
    if (has_diename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diename());
    }

    // optional string killName = 7;
    if (has_killname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killname());
    }

    // optional int32 flag = 8;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 result = 9;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .MapLongAry camp1 = 10;
    if (has_camp1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camp1());
    }

    // optional .MapLongAry camp2 = 11;
    if (has_camp2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camp2());
    }

    // optional int32 scoreBattle1 = 12;
    if (has_scorebattle1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scorebattle1());
    }

    // optional int32 scoreBattle2 = 13;
    if (has_scorebattle2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scorebattle2());
    }

  }
  // repeated .TeamPKInfo teamPKInfo = 2;
  total_size += 1 * this->teampkinfo_size();
  for (int i = 0; i < this->teampkinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teampkinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCTeamPKPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCTeamPKPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCTeamPKPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCTeamPKPush::MergeFrom(const GCTeamPKPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  teampkinfo_.MergeFrom(from.teampkinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_lastreadytime()) {
      set_lastreadytime(from.lastreadytime());
    }
    if (from.has_diepuid()) {
      set_diepuid(from.diepuid());
    }
    if (from.has_killpuid()) {
      set_killpuid(from.killpuid());
    }
    if (from.has_diename()) {
      set_diename(from.diename());
    }
    if (from.has_killname()) {
      set_killname(from.killname());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_camp1()) {
      mutable_camp1()->::MapLongAry::MergeFrom(from.camp1());
    }
    if (from.has_camp2()) {
      mutable_camp2()->::MapLongAry::MergeFrom(from.camp2());
    }
    if (from.has_scorebattle1()) {
      set_scorebattle1(from.scorebattle1());
    }
    if (from.has_scorebattle2()) {
      set_scorebattle2(from.scorebattle2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCTeamPKPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCTeamPKPush::CopyFrom(const GCTeamPKPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTeamPKPush::IsInitialized() const {

  return true;
}

void GCTeamPKPush::Swap(GCTeamPKPush* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    teampkinfo_.Swap(&other->teampkinfo_);
    std::swap(lastreadytime_, other->lastreadytime_);
    std::swap(diepuid_, other->diepuid_);
    std::swap(killpuid_, other->killpuid_);
    std::swap(diename_, other->diename_);
    std::swap(killname_, other->killname_);
    std::swap(flag_, other->flag_);
    std::swap(result_, other->result_);
    std::swap(camp1_, other->camp1_);
    std::swap(camp2_, other->camp2_);
    std::swap(scorebattle1_, other->scorebattle1_);
    std::swap(scorebattle2_, other->scorebattle2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCTeamPKPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCTeamPKPush_descriptor_;
  metadata.reflection = GCTeamPKPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGTeamPKHoldFightFlag::kObjIdFieldNumber;
#endif  // !_MSC_VER

CGTeamPKHoldFightFlag::CGTeamPKHoldFightFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGTeamPKHoldFightFlag)
}

void CGTeamPKHoldFightFlag::InitAsDefaultInstance() {
}

CGTeamPKHoldFightFlag::CGTeamPKHoldFightFlag(const CGTeamPKHoldFightFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGTeamPKHoldFightFlag)
}

void CGTeamPKHoldFightFlag::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGTeamPKHoldFightFlag::~CGTeamPKHoldFightFlag() {
  // @@protoc_insertion_point(destructor:CGTeamPKHoldFightFlag)
  SharedDtor();
}

void CGTeamPKHoldFightFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGTeamPKHoldFightFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGTeamPKHoldFightFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGTeamPKHoldFightFlag_descriptor_;
}

const CGTeamPKHoldFightFlag& CGTeamPKHoldFightFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamPKMessage_2eproto();
  return *default_instance_;
}

CGTeamPKHoldFightFlag* CGTeamPKHoldFightFlag::default_instance_ = NULL;

CGTeamPKHoldFightFlag* CGTeamPKHoldFightFlag::New() const {
  return new CGTeamPKHoldFightFlag;
}

void CGTeamPKHoldFightFlag::Clear() {
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGTeamPKHoldFightFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGTeamPKHoldFightFlag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGTeamPKHoldFightFlag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGTeamPKHoldFightFlag)
  return false;
#undef DO_
}

void CGTeamPKHoldFightFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGTeamPKHoldFightFlag)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGTeamPKHoldFightFlag)
}

::google::protobuf::uint8* CGTeamPKHoldFightFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGTeamPKHoldFightFlag)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGTeamPKHoldFightFlag)
  return target;
}

int CGTeamPKHoldFightFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGTeamPKHoldFightFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGTeamPKHoldFightFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGTeamPKHoldFightFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGTeamPKHoldFightFlag::MergeFrom(const CGTeamPKHoldFightFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGTeamPKHoldFightFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGTeamPKHoldFightFlag::CopyFrom(const CGTeamPKHoldFightFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGTeamPKHoldFightFlag::IsInitialized() const {

  return true;
}

void CGTeamPKHoldFightFlag::Swap(CGTeamPKHoldFightFlag* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGTeamPKHoldFightFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGTeamPKHoldFightFlag_descriptor_;
  metadata.reflection = CGTeamPKHoldFightFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCTeamPKHoldFightFlag::kObjIdFieldNumber;
const int GCTeamPKHoldFightFlag::kCampFieldNumber;
const int GCTeamPKHoldFightFlag::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

GCTeamPKHoldFightFlag::GCTeamPKHoldFightFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCTeamPKHoldFightFlag)
}

void GCTeamPKHoldFightFlag::InitAsDefaultInstance() {
}

GCTeamPKHoldFightFlag::GCTeamPKHoldFightFlag(const GCTeamPKHoldFightFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCTeamPKHoldFightFlag)
}

void GCTeamPKHoldFightFlag::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  camp_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCTeamPKHoldFightFlag::~GCTeamPKHoldFightFlag() {
  // @@protoc_insertion_point(destructor:GCTeamPKHoldFightFlag)
  SharedDtor();
}

void GCTeamPKHoldFightFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCTeamPKHoldFightFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCTeamPKHoldFightFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCTeamPKHoldFightFlag_descriptor_;
}

const GCTeamPKHoldFightFlag& GCTeamPKHoldFightFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamPKMessage_2eproto();
  return *default_instance_;
}

GCTeamPKHoldFightFlag* GCTeamPKHoldFightFlag::default_instance_ = NULL;

GCTeamPKHoldFightFlag* GCTeamPKHoldFightFlag::New() const {
  return new GCTeamPKHoldFightFlag;
}

void GCTeamPKHoldFightFlag::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCTeamPKHoldFightFlag*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(objid_, camp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCTeamPKHoldFightFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCTeamPKHoldFightFlag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_camp;
        break;
      }

      // optional int32 camp = 2;
      case 2: {
        if (tag == 16) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerId;
        break;
      }

      // optional int64 playerId = 3;
      case 3: {
        if (tag == 24) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCTeamPKHoldFightFlag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCTeamPKHoldFightFlag)
  return false;
#undef DO_
}

void GCTeamPKHoldFightFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCTeamPKHoldFightFlag)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // optional int32 camp = 2;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->camp(), output);
  }

  // optional int64 playerId = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCTeamPKHoldFightFlag)
}

::google::protobuf::uint8* GCTeamPKHoldFightFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCTeamPKHoldFightFlag)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // optional int32 camp = 2;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->camp(), target);
  }

  // optional int64 playerId = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCTeamPKHoldFightFlag)
  return target;
}

int GCTeamPKHoldFightFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional int32 camp = 2;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional int64 playerId = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCTeamPKHoldFightFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCTeamPKHoldFightFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCTeamPKHoldFightFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCTeamPKHoldFightFlag::MergeFrom(const GCTeamPKHoldFightFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCTeamPKHoldFightFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCTeamPKHoldFightFlag::CopyFrom(const GCTeamPKHoldFightFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTeamPKHoldFightFlag::IsInitialized() const {

  return true;
}

void GCTeamPKHoldFightFlag::Swap(GCTeamPKHoldFightFlag* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(camp_, other->camp_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCTeamPKHoldFightFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCTeamPKHoldFightFlag_descriptor_;
  metadata.reflection = GCTeamPKHoldFightFlag_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
