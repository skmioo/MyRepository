// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamPKMessage.proto

#ifndef PROTOBUF_TeamPKMessage_2eproto__INCLUDED
#define PROTOBUF_TeamPKMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TeamPKMessage_2eproto();
void protobuf_AssignDesc_TeamPKMessage_2eproto();
void protobuf_ShutdownFile_TeamPKMessage_2eproto();

class TeamPKInfo;
class CGTeamPKSend;
class GCTeamPKPush;
class CGTeamPKHoldFightFlag;
class GCTeamPKHoldFightFlag;

// ===================================================================

class TeamPKInfo : public ::google::protobuf::Message {
 public:
  TeamPKInfo();
  virtual ~TeamPKInfo();

  TeamPKInfo(const TeamPKInfo& from);

  inline TeamPKInfo& operator=(const TeamPKInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamPKInfo& default_instance();

  void Swap(TeamPKInfo* other);

  // implements Message ----------------------------------------------

  TeamPKInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamPKInfo& from);
  void MergeFrom(const TeamPKInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 teamPKType = 1;
  inline bool has_teampktype() const;
  inline void clear_teampktype();
  static const int kTeamPKTypeFieldNumber = 1;
  inline ::google::protobuf::int32 teampktype() const;
  inline void set_teampktype(::google::protobuf::int32 value);

  // optional int32 teamPKCount = 2;
  inline bool has_teampkcount() const;
  inline void clear_teampkcount();
  static const int kTeamPKCountFieldNumber = 2;
  inline ::google::protobuf::int32 teampkcount() const;
  inline void set_teampkcount(::google::protobuf::int32 value);

  // optional int32 teamPKWinCount = 3;
  inline bool has_teampkwincount() const;
  inline void clear_teampkwincount();
  static const int kTeamPKWinCountFieldNumber = 3;
  inline ::google::protobuf::int32 teampkwincount() const;
  inline void set_teampkwincount(::google::protobuf::int32 value);

  // optional int32 teamPKSuccessionCount = 4;
  inline bool has_teampksuccessioncount() const;
  inline void clear_teampksuccessioncount();
  static const int kTeamPKSuccessionCountFieldNumber = 4;
  inline ::google::protobuf::int32 teampksuccessioncount() const;
  inline void set_teampksuccessioncount(::google::protobuf::int32 value);

  // optional int32 teamPKRewardState = 5;
  inline bool has_teampkrewardstate() const;
  inline void clear_teampkrewardstate();
  static const int kTeamPKRewardStateFieldNumber = 5;
  inline ::google::protobuf::int32 teampkrewardstate() const;
  inline void set_teampkrewardstate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamPKInfo)
 private:
  inline void set_has_teampktype();
  inline void clear_has_teampktype();
  inline void set_has_teampkcount();
  inline void clear_has_teampkcount();
  inline void set_has_teampkwincount();
  inline void clear_has_teampkwincount();
  inline void set_has_teampksuccessioncount();
  inline void clear_has_teampksuccessioncount();
  inline void set_has_teampkrewardstate();
  inline void clear_has_teampkrewardstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 teampktype_;
  ::google::protobuf::int32 teampkcount_;
  ::google::protobuf::int32 teampkwincount_;
  ::google::protobuf::int32 teampksuccessioncount_;
  ::google::protobuf::int32 teampkrewardstate_;
  friend void  protobuf_AddDesc_TeamPKMessage_2eproto();
  friend void protobuf_AssignDesc_TeamPKMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamPKMessage_2eproto();

  void InitAsDefaultInstance();
  static TeamPKInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGTeamPKSend : public ::google::protobuf::Message {
 public:
  CGTeamPKSend();
  virtual ~CGTeamPKSend();

  CGTeamPKSend(const CGTeamPKSend& from);

  inline CGTeamPKSend& operator=(const CGTeamPKSend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGTeamPKSend& default_instance();

  void Swap(CGTeamPKSend* other);

  // implements Message ----------------------------------------------

  CGTeamPKSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGTeamPKSend& from);
  void MergeFrom(const CGTeamPKSend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 rewardId = 2;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 2;
  inline ::google::protobuf::int32 rewardid() const;
  inline void set_rewardid(::google::protobuf::int32 value);

  // optional int32 teamPKType = 3;
  inline bool has_teampktype() const;
  inline void clear_teampktype();
  static const int kTeamPKTypeFieldNumber = 3;
  inline ::google::protobuf::int32 teampktype() const;
  inline void set_teampktype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGTeamPKSend)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_rewardid();
  inline void clear_has_rewardid();
  inline void set_has_teampktype();
  inline void clear_has_teampktype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 rewardid_;
  ::google::protobuf::int32 teampktype_;
  friend void  protobuf_AddDesc_TeamPKMessage_2eproto();
  friend void protobuf_AssignDesc_TeamPKMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamPKMessage_2eproto();

  void InitAsDefaultInstance();
  static CGTeamPKSend* default_instance_;
};
// -------------------------------------------------------------------

class GCTeamPKPush : public ::google::protobuf::Message {
 public:
  GCTeamPKPush();
  virtual ~GCTeamPKPush();

  GCTeamPKPush(const GCTeamPKPush& from);

  inline GCTeamPKPush& operator=(const GCTeamPKPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCTeamPKPush& default_instance();

  void Swap(GCTeamPKPush* other);

  // implements Message ----------------------------------------------

  GCTeamPKPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCTeamPKPush& from);
  void MergeFrom(const GCTeamPKPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // repeated .TeamPKInfo teamPKInfo = 2;
  inline int teampkinfo_size() const;
  inline void clear_teampkinfo();
  static const int kTeamPKInfoFieldNumber = 2;
  inline const ::TeamPKInfo& teampkinfo(int index) const;
  inline ::TeamPKInfo* mutable_teampkinfo(int index);
  inline ::TeamPKInfo* add_teampkinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::TeamPKInfo >&
      teampkinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::TeamPKInfo >*
      mutable_teampkinfo();

  // optional int32 lastReadyTime = 3;
  inline bool has_lastreadytime() const;
  inline void clear_lastreadytime();
  static const int kLastReadyTimeFieldNumber = 3;
  inline ::google::protobuf::int32 lastreadytime() const;
  inline void set_lastreadytime(::google::protobuf::int32 value);

  // optional int64 diePuid = 4;
  inline bool has_diepuid() const;
  inline void clear_diepuid();
  static const int kDiePuidFieldNumber = 4;
  inline ::google::protobuf::int64 diepuid() const;
  inline void set_diepuid(::google::protobuf::int64 value);

  // optional int64 killPuid = 5;
  inline bool has_killpuid() const;
  inline void clear_killpuid();
  static const int kKillPuidFieldNumber = 5;
  inline ::google::protobuf::int64 killpuid() const;
  inline void set_killpuid(::google::protobuf::int64 value);

  // optional string dieName = 6;
  inline bool has_diename() const;
  inline void clear_diename();
  static const int kDieNameFieldNumber = 6;
  inline const ::std::string& diename() const;
  inline void set_diename(const ::std::string& value);
  inline void set_diename(const char* value);
  inline void set_diename(const char* value, size_t size);
  inline ::std::string* mutable_diename();
  inline ::std::string* release_diename();
  inline void set_allocated_diename(::std::string* diename);

  // optional string killName = 7;
  inline bool has_killname() const;
  inline void clear_killname();
  static const int kKillNameFieldNumber = 7;
  inline const ::std::string& killname() const;
  inline void set_killname(const ::std::string& value);
  inline void set_killname(const char* value);
  inline void set_killname(const char* value, size_t size);
  inline ::std::string* mutable_killname();
  inline ::std::string* release_killname();
  inline void set_allocated_killname(::std::string* killname);

  // optional int32 flag = 8;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 8;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 result = 9;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 9;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .MapLongAry camp1 = 10;
  inline bool has_camp1() const;
  inline void clear_camp1();
  static const int kCamp1FieldNumber = 10;
  inline const ::MapLongAry& camp1() const;
  inline ::MapLongAry* mutable_camp1();
  inline ::MapLongAry* release_camp1();
  inline void set_allocated_camp1(::MapLongAry* camp1);

  // optional .MapLongAry camp2 = 11;
  inline bool has_camp2() const;
  inline void clear_camp2();
  static const int kCamp2FieldNumber = 11;
  inline const ::MapLongAry& camp2() const;
  inline ::MapLongAry* mutable_camp2();
  inline ::MapLongAry* release_camp2();
  inline void set_allocated_camp2(::MapLongAry* camp2);

  // optional int32 scoreBattle1 = 12;
  inline bool has_scorebattle1() const;
  inline void clear_scorebattle1();
  static const int kScoreBattle1FieldNumber = 12;
  inline ::google::protobuf::int32 scorebattle1() const;
  inline void set_scorebattle1(::google::protobuf::int32 value);

  // optional int32 scoreBattle2 = 13;
  inline bool has_scorebattle2() const;
  inline void clear_scorebattle2();
  static const int kScoreBattle2FieldNumber = 13;
  inline ::google::protobuf::int32 scorebattle2() const;
  inline void set_scorebattle2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCTeamPKPush)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_lastreadytime();
  inline void clear_has_lastreadytime();
  inline void set_has_diepuid();
  inline void clear_has_diepuid();
  inline void set_has_killpuid();
  inline void clear_has_killpuid();
  inline void set_has_diename();
  inline void clear_has_diename();
  inline void set_has_killname();
  inline void clear_has_killname();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_camp1();
  inline void clear_has_camp1();
  inline void set_has_camp2();
  inline void clear_has_camp2();
  inline void set_has_scorebattle1();
  inline void clear_has_scorebattle1();
  inline void set_has_scorebattle2();
  inline void clear_has_scorebattle2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TeamPKInfo > teampkinfo_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 lastreadytime_;
  ::google::protobuf::int64 diepuid_;
  ::google::protobuf::int64 killpuid_;
  ::std::string* diename_;
  ::std::string* killname_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 result_;
  ::MapLongAry* camp1_;
  ::MapLongAry* camp2_;
  ::google::protobuf::int32 scorebattle1_;
  ::google::protobuf::int32 scorebattle2_;
  friend void  protobuf_AddDesc_TeamPKMessage_2eproto();
  friend void protobuf_AssignDesc_TeamPKMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamPKMessage_2eproto();

  void InitAsDefaultInstance();
  static GCTeamPKPush* default_instance_;
};
// -------------------------------------------------------------------

class CGTeamPKHoldFightFlag : public ::google::protobuf::Message {
 public:
  CGTeamPKHoldFightFlag();
  virtual ~CGTeamPKHoldFightFlag();

  CGTeamPKHoldFightFlag(const CGTeamPKHoldFightFlag& from);

  inline CGTeamPKHoldFightFlag& operator=(const CGTeamPKHoldFightFlag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGTeamPKHoldFightFlag& default_instance();

  void Swap(CGTeamPKHoldFightFlag* other);

  // implements Message ----------------------------------------------

  CGTeamPKHoldFightFlag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGTeamPKHoldFightFlag& from);
  void MergeFrom(const CGTeamPKHoldFightFlag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 objId = 1;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 1;
  inline ::google::protobuf::int64 objid() const;
  inline void set_objid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGTeamPKHoldFightFlag)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 objid_;
  friend void  protobuf_AddDesc_TeamPKMessage_2eproto();
  friend void protobuf_AssignDesc_TeamPKMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamPKMessage_2eproto();

  void InitAsDefaultInstance();
  static CGTeamPKHoldFightFlag* default_instance_;
};
// -------------------------------------------------------------------

class GCTeamPKHoldFightFlag : public ::google::protobuf::Message {
 public:
  GCTeamPKHoldFightFlag();
  virtual ~GCTeamPKHoldFightFlag();

  GCTeamPKHoldFightFlag(const GCTeamPKHoldFightFlag& from);

  inline GCTeamPKHoldFightFlag& operator=(const GCTeamPKHoldFightFlag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCTeamPKHoldFightFlag& default_instance();

  void Swap(GCTeamPKHoldFightFlag* other);

  // implements Message ----------------------------------------------

  GCTeamPKHoldFightFlag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCTeamPKHoldFightFlag& from);
  void MergeFrom(const GCTeamPKHoldFightFlag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 objId = 1;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 1;
  inline ::google::protobuf::int64 objid() const;
  inline void set_objid(::google::protobuf::int64 value);

  // optional int32 camp = 2;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 2;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // optional int64 playerId = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCTeamPKHoldFightFlag)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 objid_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 camp_;
  friend void  protobuf_AddDesc_TeamPKMessage_2eproto();
  friend void protobuf_AssignDesc_TeamPKMessage_2eproto();
  friend void protobuf_ShutdownFile_TeamPKMessage_2eproto();

  void InitAsDefaultInstance();
  static GCTeamPKHoldFightFlag* default_instance_;
};
// ===================================================================


// ===================================================================

// TeamPKInfo

// optional int32 teamPKType = 1;
inline bool TeamPKInfo::has_teampktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamPKInfo::set_has_teampktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamPKInfo::clear_has_teampktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamPKInfo::clear_teampktype() {
  teampktype_ = 0;
  clear_has_teampktype();
}
inline ::google::protobuf::int32 TeamPKInfo::teampktype() const {
  // @@protoc_insertion_point(field_get:TeamPKInfo.teamPKType)
  return teampktype_;
}
inline void TeamPKInfo::set_teampktype(::google::protobuf::int32 value) {
  set_has_teampktype();
  teampktype_ = value;
  // @@protoc_insertion_point(field_set:TeamPKInfo.teamPKType)
}

// optional int32 teamPKCount = 2;
inline bool TeamPKInfo::has_teampkcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamPKInfo::set_has_teampkcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamPKInfo::clear_has_teampkcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamPKInfo::clear_teampkcount() {
  teampkcount_ = 0;
  clear_has_teampkcount();
}
inline ::google::protobuf::int32 TeamPKInfo::teampkcount() const {
  // @@protoc_insertion_point(field_get:TeamPKInfo.teamPKCount)
  return teampkcount_;
}
inline void TeamPKInfo::set_teampkcount(::google::protobuf::int32 value) {
  set_has_teampkcount();
  teampkcount_ = value;
  // @@protoc_insertion_point(field_set:TeamPKInfo.teamPKCount)
}

// optional int32 teamPKWinCount = 3;
inline bool TeamPKInfo::has_teampkwincount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamPKInfo::set_has_teampkwincount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamPKInfo::clear_has_teampkwincount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamPKInfo::clear_teampkwincount() {
  teampkwincount_ = 0;
  clear_has_teampkwincount();
}
inline ::google::protobuf::int32 TeamPKInfo::teampkwincount() const {
  // @@protoc_insertion_point(field_get:TeamPKInfo.teamPKWinCount)
  return teampkwincount_;
}
inline void TeamPKInfo::set_teampkwincount(::google::protobuf::int32 value) {
  set_has_teampkwincount();
  teampkwincount_ = value;
  // @@protoc_insertion_point(field_set:TeamPKInfo.teamPKWinCount)
}

// optional int32 teamPKSuccessionCount = 4;
inline bool TeamPKInfo::has_teampksuccessioncount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamPKInfo::set_has_teampksuccessioncount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamPKInfo::clear_has_teampksuccessioncount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamPKInfo::clear_teampksuccessioncount() {
  teampksuccessioncount_ = 0;
  clear_has_teampksuccessioncount();
}
inline ::google::protobuf::int32 TeamPKInfo::teampksuccessioncount() const {
  // @@protoc_insertion_point(field_get:TeamPKInfo.teamPKSuccessionCount)
  return teampksuccessioncount_;
}
inline void TeamPKInfo::set_teampksuccessioncount(::google::protobuf::int32 value) {
  set_has_teampksuccessioncount();
  teampksuccessioncount_ = value;
  // @@protoc_insertion_point(field_set:TeamPKInfo.teamPKSuccessionCount)
}

// optional int32 teamPKRewardState = 5;
inline bool TeamPKInfo::has_teampkrewardstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamPKInfo::set_has_teampkrewardstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamPKInfo::clear_has_teampkrewardstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamPKInfo::clear_teampkrewardstate() {
  teampkrewardstate_ = 0;
  clear_has_teampkrewardstate();
}
inline ::google::protobuf::int32 TeamPKInfo::teampkrewardstate() const {
  // @@protoc_insertion_point(field_get:TeamPKInfo.teamPKRewardState)
  return teampkrewardstate_;
}
inline void TeamPKInfo::set_teampkrewardstate(::google::protobuf::int32 value) {
  set_has_teampkrewardstate();
  teampkrewardstate_ = value;
  // @@protoc_insertion_point(field_set:TeamPKInfo.teamPKRewardState)
}

// -------------------------------------------------------------------

// CGTeamPKSend

// optional int32 operate = 1;
inline bool CGTeamPKSend::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGTeamPKSend::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGTeamPKSend::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGTeamPKSend::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 CGTeamPKSend::operate() const {
  // @@protoc_insertion_point(field_get:CGTeamPKSend.operate)
  return operate_;
}
inline void CGTeamPKSend::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:CGTeamPKSend.operate)
}

// optional int32 rewardId = 2;
inline bool CGTeamPKSend::has_rewardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGTeamPKSend::set_has_rewardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGTeamPKSend::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGTeamPKSend::clear_rewardid() {
  rewardid_ = 0;
  clear_has_rewardid();
}
inline ::google::protobuf::int32 CGTeamPKSend::rewardid() const {
  // @@protoc_insertion_point(field_get:CGTeamPKSend.rewardId)
  return rewardid_;
}
inline void CGTeamPKSend::set_rewardid(::google::protobuf::int32 value) {
  set_has_rewardid();
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:CGTeamPKSend.rewardId)
}

// optional int32 teamPKType = 3;
inline bool CGTeamPKSend::has_teampktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGTeamPKSend::set_has_teampktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGTeamPKSend::clear_has_teampktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGTeamPKSend::clear_teampktype() {
  teampktype_ = 0;
  clear_has_teampktype();
}
inline ::google::protobuf::int32 CGTeamPKSend::teampktype() const {
  // @@protoc_insertion_point(field_get:CGTeamPKSend.teamPKType)
  return teampktype_;
}
inline void CGTeamPKSend::set_teampktype(::google::protobuf::int32 value) {
  set_has_teampktype();
  teampktype_ = value;
  // @@protoc_insertion_point(field_set:CGTeamPKSend.teamPKType)
}

// -------------------------------------------------------------------

// GCTeamPKPush

// optional int32 operate = 1;
inline bool GCTeamPKPush::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCTeamPKPush::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCTeamPKPush::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCTeamPKPush::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCTeamPKPush::operate() const {
  // @@protoc_insertion_point(field_get:GCTeamPKPush.operate)
  return operate_;
}
inline void GCTeamPKPush::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCTeamPKPush.operate)
}

// repeated .TeamPKInfo teamPKInfo = 2;
inline int GCTeamPKPush::teampkinfo_size() const {
  return teampkinfo_.size();
}
inline void GCTeamPKPush::clear_teampkinfo() {
  teampkinfo_.Clear();
}
inline const ::TeamPKInfo& GCTeamPKPush::teampkinfo(int index) const {
  // @@protoc_insertion_point(field_get:GCTeamPKPush.teamPKInfo)
  return teampkinfo_.Get(index);
}
inline ::TeamPKInfo* GCTeamPKPush::mutable_teampkinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GCTeamPKPush.teamPKInfo)
  return teampkinfo_.Mutable(index);
}
inline ::TeamPKInfo* GCTeamPKPush::add_teampkinfo() {
  // @@protoc_insertion_point(field_add:GCTeamPKPush.teamPKInfo)
  return teampkinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TeamPKInfo >&
GCTeamPKPush::teampkinfo() const {
  // @@protoc_insertion_point(field_list:GCTeamPKPush.teamPKInfo)
  return teampkinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::TeamPKInfo >*
GCTeamPKPush::mutable_teampkinfo() {
  // @@protoc_insertion_point(field_mutable_list:GCTeamPKPush.teamPKInfo)
  return &teampkinfo_;
}

// optional int32 lastReadyTime = 3;
inline bool GCTeamPKPush::has_lastreadytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCTeamPKPush::set_has_lastreadytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCTeamPKPush::clear_has_lastreadytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCTeamPKPush::clear_lastreadytime() {
  lastreadytime_ = 0;
  clear_has_lastreadytime();
}
inline ::google::protobuf::int32 GCTeamPKPush::lastreadytime() const {
  // @@protoc_insertion_point(field_get:GCTeamPKPush.lastReadyTime)
  return lastreadytime_;
}
inline void GCTeamPKPush::set_lastreadytime(::google::protobuf::int32 value) {
  set_has_lastreadytime();
  lastreadytime_ = value;
  // @@protoc_insertion_point(field_set:GCTeamPKPush.lastReadyTime)
}

// optional int64 diePuid = 4;
inline bool GCTeamPKPush::has_diepuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCTeamPKPush::set_has_diepuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCTeamPKPush::clear_has_diepuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCTeamPKPush::clear_diepuid() {
  diepuid_ = GOOGLE_LONGLONG(0);
  clear_has_diepuid();
}
inline ::google::protobuf::int64 GCTeamPKPush::diepuid() const {
  // @@protoc_insertion_point(field_get:GCTeamPKPush.diePuid)
  return diepuid_;
}
inline void GCTeamPKPush::set_diepuid(::google::protobuf::int64 value) {
  set_has_diepuid();
  diepuid_ = value;
  // @@protoc_insertion_point(field_set:GCTeamPKPush.diePuid)
}

// optional int64 killPuid = 5;
inline bool GCTeamPKPush::has_killpuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCTeamPKPush::set_has_killpuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCTeamPKPush::clear_has_killpuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCTeamPKPush::clear_killpuid() {
  killpuid_ = GOOGLE_LONGLONG(0);
  clear_has_killpuid();
}
inline ::google::protobuf::int64 GCTeamPKPush::killpuid() const {
  // @@protoc_insertion_point(field_get:GCTeamPKPush.killPuid)
  return killpuid_;
}
inline void GCTeamPKPush::set_killpuid(::google::protobuf::int64 value) {
  set_has_killpuid();
  killpuid_ = value;
  // @@protoc_insertion_point(field_set:GCTeamPKPush.killPuid)
}

// optional string dieName = 6;
inline bool GCTeamPKPush::has_diename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCTeamPKPush::set_has_diename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCTeamPKPush::clear_has_diename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCTeamPKPush::clear_diename() {
  if (diename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diename_->clear();
  }
  clear_has_diename();
}
inline const ::std::string& GCTeamPKPush::diename() const {
  // @@protoc_insertion_point(field_get:GCTeamPKPush.dieName)
  return *diename_;
}
inline void GCTeamPKPush::set_diename(const ::std::string& value) {
  set_has_diename();
  if (diename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diename_ = new ::std::string;
  }
  diename_->assign(value);
  // @@protoc_insertion_point(field_set:GCTeamPKPush.dieName)
}
inline void GCTeamPKPush::set_diename(const char* value) {
  set_has_diename();
  if (diename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diename_ = new ::std::string;
  }
  diename_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCTeamPKPush.dieName)
}
inline void GCTeamPKPush::set_diename(const char* value, size_t size) {
  set_has_diename();
  if (diename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diename_ = new ::std::string;
  }
  diename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCTeamPKPush.dieName)
}
inline ::std::string* GCTeamPKPush::mutable_diename() {
  set_has_diename();
  if (diename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCTeamPKPush.dieName)
  return diename_;
}
inline ::std::string* GCTeamPKPush::release_diename() {
  clear_has_diename();
  if (diename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diename_;
    diename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCTeamPKPush::set_allocated_diename(::std::string* diename) {
  if (diename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diename_;
  }
  if (diename) {
    set_has_diename();
    diename_ = diename;
  } else {
    clear_has_diename();
    diename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCTeamPKPush.dieName)
}

// optional string killName = 7;
inline bool GCTeamPKPush::has_killname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GCTeamPKPush::set_has_killname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GCTeamPKPush::clear_has_killname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GCTeamPKPush::clear_killname() {
  if (killname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    killname_->clear();
  }
  clear_has_killname();
}
inline const ::std::string& GCTeamPKPush::killname() const {
  // @@protoc_insertion_point(field_get:GCTeamPKPush.killName)
  return *killname_;
}
inline void GCTeamPKPush::set_killname(const ::std::string& value) {
  set_has_killname();
  if (killname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    killname_ = new ::std::string;
  }
  killname_->assign(value);
  // @@protoc_insertion_point(field_set:GCTeamPKPush.killName)
}
inline void GCTeamPKPush::set_killname(const char* value) {
  set_has_killname();
  if (killname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    killname_ = new ::std::string;
  }
  killname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCTeamPKPush.killName)
}
inline void GCTeamPKPush::set_killname(const char* value, size_t size) {
  set_has_killname();
  if (killname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    killname_ = new ::std::string;
  }
  killname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCTeamPKPush.killName)
}
inline ::std::string* GCTeamPKPush::mutable_killname() {
  set_has_killname();
  if (killname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    killname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCTeamPKPush.killName)
  return killname_;
}
inline ::std::string* GCTeamPKPush::release_killname() {
  clear_has_killname();
  if (killname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = killname_;
    killname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCTeamPKPush::set_allocated_killname(::std::string* killname) {
  if (killname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete killname_;
  }
  if (killname) {
    set_has_killname();
    killname_ = killname;
  } else {
    clear_has_killname();
    killname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCTeamPKPush.killName)
}

// optional int32 flag = 8;
inline bool GCTeamPKPush::has_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GCTeamPKPush::set_has_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GCTeamPKPush::clear_has_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GCTeamPKPush::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 GCTeamPKPush::flag() const {
  // @@protoc_insertion_point(field_get:GCTeamPKPush.flag)
  return flag_;
}
inline void GCTeamPKPush::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:GCTeamPKPush.flag)
}

// optional int32 result = 9;
inline bool GCTeamPKPush::has_result() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GCTeamPKPush::set_has_result() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GCTeamPKPush::clear_has_result() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GCTeamPKPush::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCTeamPKPush::result() const {
  // @@protoc_insertion_point(field_get:GCTeamPKPush.result)
  return result_;
}
inline void GCTeamPKPush::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCTeamPKPush.result)
}

// optional .MapLongAry camp1 = 10;
inline bool GCTeamPKPush::has_camp1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GCTeamPKPush::set_has_camp1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GCTeamPKPush::clear_has_camp1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GCTeamPKPush::clear_camp1() {
  if (camp1_ != NULL) camp1_->::MapLongAry::Clear();
  clear_has_camp1();
}
inline const ::MapLongAry& GCTeamPKPush::camp1() const {
  // @@protoc_insertion_point(field_get:GCTeamPKPush.camp1)
  return camp1_ != NULL ? *camp1_ : *default_instance_->camp1_;
}
inline ::MapLongAry* GCTeamPKPush::mutable_camp1() {
  set_has_camp1();
  if (camp1_ == NULL) camp1_ = new ::MapLongAry;
  // @@protoc_insertion_point(field_mutable:GCTeamPKPush.camp1)
  return camp1_;
}
inline ::MapLongAry* GCTeamPKPush::release_camp1() {
  clear_has_camp1();
  ::MapLongAry* temp = camp1_;
  camp1_ = NULL;
  return temp;
}
inline void GCTeamPKPush::set_allocated_camp1(::MapLongAry* camp1) {
  delete camp1_;
  camp1_ = camp1;
  if (camp1) {
    set_has_camp1();
  } else {
    clear_has_camp1();
  }
  // @@protoc_insertion_point(field_set_allocated:GCTeamPKPush.camp1)
}

// optional .MapLongAry camp2 = 11;
inline bool GCTeamPKPush::has_camp2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GCTeamPKPush::set_has_camp2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GCTeamPKPush::clear_has_camp2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GCTeamPKPush::clear_camp2() {
  if (camp2_ != NULL) camp2_->::MapLongAry::Clear();
  clear_has_camp2();
}
inline const ::MapLongAry& GCTeamPKPush::camp2() const {
  // @@protoc_insertion_point(field_get:GCTeamPKPush.camp2)
  return camp2_ != NULL ? *camp2_ : *default_instance_->camp2_;
}
inline ::MapLongAry* GCTeamPKPush::mutable_camp2() {
  set_has_camp2();
  if (camp2_ == NULL) camp2_ = new ::MapLongAry;
  // @@protoc_insertion_point(field_mutable:GCTeamPKPush.camp2)
  return camp2_;
}
inline ::MapLongAry* GCTeamPKPush::release_camp2() {
  clear_has_camp2();
  ::MapLongAry* temp = camp2_;
  camp2_ = NULL;
  return temp;
}
inline void GCTeamPKPush::set_allocated_camp2(::MapLongAry* camp2) {
  delete camp2_;
  camp2_ = camp2;
  if (camp2) {
    set_has_camp2();
  } else {
    clear_has_camp2();
  }
  // @@protoc_insertion_point(field_set_allocated:GCTeamPKPush.camp2)
}

// optional int32 scoreBattle1 = 12;
inline bool GCTeamPKPush::has_scorebattle1() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GCTeamPKPush::set_has_scorebattle1() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GCTeamPKPush::clear_has_scorebattle1() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GCTeamPKPush::clear_scorebattle1() {
  scorebattle1_ = 0;
  clear_has_scorebattle1();
}
inline ::google::protobuf::int32 GCTeamPKPush::scorebattle1() const {
  // @@protoc_insertion_point(field_get:GCTeamPKPush.scoreBattle1)
  return scorebattle1_;
}
inline void GCTeamPKPush::set_scorebattle1(::google::protobuf::int32 value) {
  set_has_scorebattle1();
  scorebattle1_ = value;
  // @@protoc_insertion_point(field_set:GCTeamPKPush.scoreBattle1)
}

// optional int32 scoreBattle2 = 13;
inline bool GCTeamPKPush::has_scorebattle2() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GCTeamPKPush::set_has_scorebattle2() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GCTeamPKPush::clear_has_scorebattle2() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GCTeamPKPush::clear_scorebattle2() {
  scorebattle2_ = 0;
  clear_has_scorebattle2();
}
inline ::google::protobuf::int32 GCTeamPKPush::scorebattle2() const {
  // @@protoc_insertion_point(field_get:GCTeamPKPush.scoreBattle2)
  return scorebattle2_;
}
inline void GCTeamPKPush::set_scorebattle2(::google::protobuf::int32 value) {
  set_has_scorebattle2();
  scorebattle2_ = value;
  // @@protoc_insertion_point(field_set:GCTeamPKPush.scoreBattle2)
}

// -------------------------------------------------------------------

// CGTeamPKHoldFightFlag

// optional int64 objId = 1;
inline bool CGTeamPKHoldFightFlag::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGTeamPKHoldFightFlag::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGTeamPKHoldFightFlag::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGTeamPKHoldFightFlag::clear_objid() {
  objid_ = GOOGLE_LONGLONG(0);
  clear_has_objid();
}
inline ::google::protobuf::int64 CGTeamPKHoldFightFlag::objid() const {
  // @@protoc_insertion_point(field_get:CGTeamPKHoldFightFlag.objId)
  return objid_;
}
inline void CGTeamPKHoldFightFlag::set_objid(::google::protobuf::int64 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:CGTeamPKHoldFightFlag.objId)
}

// -------------------------------------------------------------------

// GCTeamPKHoldFightFlag

// optional int64 objId = 1;
inline bool GCTeamPKHoldFightFlag::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCTeamPKHoldFightFlag::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCTeamPKHoldFightFlag::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCTeamPKHoldFightFlag::clear_objid() {
  objid_ = GOOGLE_LONGLONG(0);
  clear_has_objid();
}
inline ::google::protobuf::int64 GCTeamPKHoldFightFlag::objid() const {
  // @@protoc_insertion_point(field_get:GCTeamPKHoldFightFlag.objId)
  return objid_;
}
inline void GCTeamPKHoldFightFlag::set_objid(::google::protobuf::int64 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:GCTeamPKHoldFightFlag.objId)
}

// optional int32 camp = 2;
inline bool GCTeamPKHoldFightFlag::has_camp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCTeamPKHoldFightFlag::set_has_camp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCTeamPKHoldFightFlag::clear_has_camp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCTeamPKHoldFightFlag::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 GCTeamPKHoldFightFlag::camp() const {
  // @@protoc_insertion_point(field_get:GCTeamPKHoldFightFlag.camp)
  return camp_;
}
inline void GCTeamPKHoldFightFlag::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
  // @@protoc_insertion_point(field_set:GCTeamPKHoldFightFlag.camp)
}

// optional int64 playerId = 3;
inline bool GCTeamPKHoldFightFlag::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCTeamPKHoldFightFlag::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCTeamPKHoldFightFlag::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCTeamPKHoldFightFlag::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 GCTeamPKHoldFightFlag::playerid() const {
  // @@protoc_insertion_point(field_get:GCTeamPKHoldFightFlag.playerId)
  return playerid_;
}
inline void GCTeamPKHoldFightFlag::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GCTeamPKHoldFightFlag.playerId)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TeamPKMessage_2eproto__INCLUDED
