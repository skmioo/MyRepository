// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TowerMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TowerMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TowerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGTowerSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGTowerSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCTowerPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCTowerPush_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TowerMessage_2eproto() {
  protobuf_AddDesc_TowerMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TowerMessage.proto");
  GOOGLE_CHECK(file != NULL);
  TowerInfo_descriptor_ = file->message_type(0);
  static const int TowerInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, limitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, clearnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, pilenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, topnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, clearpilenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, maxvipnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, alreadybuy_),
  };
  TowerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerInfo_descriptor_,
      TowerInfo::default_instance_,
      TowerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerInfo));
  CGTowerSend_descriptor_ = file->message_type(1);
  static const int CGTowerSend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTowerSend, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTowerSend, buynum_),
  };
  CGTowerSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGTowerSend_descriptor_,
      CGTowerSend::default_instance_,
      CGTowerSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTowerSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTowerSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGTowerSend));
  RewardItem_descriptor_ = file->message_type(2);
  static const int RewardItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, num_),
  };
  RewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardItem_descriptor_,
      RewardItem::default_instance_,
      RewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardItem));
  GCTowerPush_descriptor_ = file->message_type(3);
  static const int GCTowerPush_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTowerPush, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTowerPush, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTowerPush, towerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTowerPush, rewarditems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTowerPush, firstrewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTowerPush, towerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTowerPush, begintime_),
  };
  GCTowerPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCTowerPush_descriptor_,
      GCTowerPush::default_instance_,
      GCTowerPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTowerPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTowerPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCTowerPush));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TowerMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerInfo_descriptor_, &TowerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGTowerSend_descriptor_, &CGTowerSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardItem_descriptor_, &RewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCTowerPush_descriptor_, &GCTowerPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TowerMessage_2eproto() {
  delete TowerInfo::default_instance_;
  delete TowerInfo_reflection_;
  delete CGTowerSend::default_instance_;
  delete CGTowerSend_reflection_;
  delete RewardItem::default_instance_;
  delete RewardItem_reflection_;
  delete GCTowerPush::default_instance_;
  delete GCTowerPush_reflection_;
}

void protobuf_AddDesc_TowerMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022TowerMessage.proto\"\302\001\n\tTowerInfo\022\020\n\010pl"
    "ayerID\030\001 \001(\003\022\020\n\010limitNum\030\002 \001(\005\022\020\n\010clearN"
    "um\030\003 \001(\005\022\017\n\007pileNum\030\004 \001(\005\022\016\n\006status\030\005 \001("
    "\005\022\021\n\tbeginTime\030\006 \001(\003\022\016\n\006topNum\030\007 \001(\005\022\024\n\014"
    "clearPileNum\030\010 \001(\005\022\021\n\tmaxVipNum\030\t \001(\005\022\022\n"
    "\nalreadyBuy\030\n \001(\005\".\n\013CGTowerSend\022\017\n\007oper"
    "ate\030\001 \001(\005\022\016\n\006buyNum\030\002 \001(\005\"3\n\nRewardItem\022"
    "\013\n\003bid\030\001 \001(\005\022\013\n\003sid\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\"\271"
    "\001\n\013GCTowerPush\022\017\n\007operate\030\001 \001(\005\022\021\n\ttimeS"
    "tamp\030\002 \001(\003\022\035\n\ttowerInfo\030\003 \001(\0132\n.TowerInf"
    "o\022 \n\013rewardItems\030\004 \003(\0132\013.RewardItem\022!\n\014f"
    "irstRewards\030\005 \003(\0132\013.RewardItem\022\017\n\007towerI"
    "D\030\006 \001(\005\022\021\n\tbeginTime\030\007 \001(\003B\031\n\027com.mile.c"
    "ommon.message", 533);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TowerMessage.proto", &protobuf_RegisterTypes);
  TowerInfo::default_instance_ = new TowerInfo();
  CGTowerSend::default_instance_ = new CGTowerSend();
  RewardItem::default_instance_ = new RewardItem();
  GCTowerPush::default_instance_ = new GCTowerPush();
  TowerInfo::default_instance_->InitAsDefaultInstance();
  CGTowerSend::default_instance_->InitAsDefaultInstance();
  RewardItem::default_instance_->InitAsDefaultInstance();
  GCTowerPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TowerMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TowerMessage_2eproto {
  StaticDescriptorInitializer_TowerMessage_2eproto() {
    protobuf_AddDesc_TowerMessage_2eproto();
  }
} static_descriptor_initializer_TowerMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TowerInfo::kPlayerIDFieldNumber;
const int TowerInfo::kLimitNumFieldNumber;
const int TowerInfo::kClearNumFieldNumber;
const int TowerInfo::kPileNumFieldNumber;
const int TowerInfo::kStatusFieldNumber;
const int TowerInfo::kBeginTimeFieldNumber;
const int TowerInfo::kTopNumFieldNumber;
const int TowerInfo::kClearPileNumFieldNumber;
const int TowerInfo::kMaxVipNumFieldNumber;
const int TowerInfo::kAlreadyBuyFieldNumber;
#endif  // !_MSC_VER

TowerInfo::TowerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TowerInfo)
}

void TowerInfo::InitAsDefaultInstance() {
}

TowerInfo::TowerInfo(const TowerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TowerInfo)
}

void TowerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  limitnum_ = 0;
  clearnum_ = 0;
  pilenum_ = 0;
  status_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  topnum_ = 0;
  clearpilenum_ = 0;
  maxvipnum_ = 0;
  alreadybuy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerInfo::~TowerInfo() {
  // @@protoc_insertion_point(destructor:TowerInfo)
  SharedDtor();
}

void TowerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerInfo_descriptor_;
}

const TowerInfo& TowerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TowerMessage_2eproto();
  return *default_instance_;
}

TowerInfo* TowerInfo::default_instance_ = NULL;

TowerInfo* TowerInfo::New() const {
  return new TowerInfo;
}

void TowerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TowerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(playerid_, clearpilenum_);
  }
  ZR_(maxvipnum_, alreadybuy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TowerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limitNum;
        break;
      }

      // optional int32 limitNum = 2;
      case 2: {
        if (tag == 16) {
         parse_limitNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitnum_)));
          set_has_limitnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_clearNum;
        break;
      }

      // optional int32 clearNum = 3;
      case 3: {
        if (tag == 24) {
         parse_clearNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clearnum_)));
          set_has_clearnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pileNum;
        break;
      }

      // optional int32 pileNum = 4;
      case 4: {
        if (tag == 32) {
         parse_pileNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pilenum_)));
          set_has_pilenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 6;
      case 6: {
        if (tag == 48) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_topNum;
        break;
      }

      // optional int32 topNum = 7;
      case 7: {
        if (tag == 56) {
         parse_topNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topnum_)));
          set_has_topnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_clearPileNum;
        break;
      }

      // optional int32 clearPileNum = 8;
      case 8: {
        if (tag == 64) {
         parse_clearPileNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clearpilenum_)));
          set_has_clearpilenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_maxVipNum;
        break;
      }

      // optional int32 maxVipNum = 9;
      case 9: {
        if (tag == 72) {
         parse_maxVipNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxvipnum_)));
          set_has_maxvipnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_alreadyBuy;
        break;
      }

      // optional int32 alreadyBuy = 10;
      case 10: {
        if (tag == 80) {
         parse_alreadyBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alreadybuy_)));
          set_has_alreadybuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TowerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TowerInfo)
  return false;
#undef DO_
}

void TowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TowerInfo)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int32 limitNum = 2;
  if (has_limitnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limitnum(), output);
  }

  // optional int32 clearNum = 3;
  if (has_clearnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clearnum(), output);
  }

  // optional int32 pileNum = 4;
  if (has_pilenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pilenum(), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional int64 beginTime = 6;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->begintime(), output);
  }

  // optional int32 topNum = 7;
  if (has_topnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->topnum(), output);
  }

  // optional int32 clearPileNum = 8;
  if (has_clearpilenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->clearpilenum(), output);
  }

  // optional int32 maxVipNum = 9;
  if (has_maxvipnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->maxvipnum(), output);
  }

  // optional int32 alreadyBuy = 10;
  if (has_alreadybuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->alreadybuy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TowerInfo)
}

::google::protobuf::uint8* TowerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TowerInfo)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 limitNum = 2;
  if (has_limitnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limitnum(), target);
  }

  // optional int32 clearNum = 3;
  if (has_clearnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clearnum(), target);
  }

  // optional int32 pileNum = 4;
  if (has_pilenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pilenum(), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional int64 beginTime = 6;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->begintime(), target);
  }

  // optional int32 topNum = 7;
  if (has_topnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->topnum(), target);
  }

  // optional int32 clearPileNum = 8;
  if (has_clearpilenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->clearpilenum(), target);
  }

  // optional int32 maxVipNum = 9;
  if (has_maxvipnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->maxvipnum(), target);
  }

  // optional int32 alreadyBuy = 10;
  if (has_alreadybuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->alreadybuy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TowerInfo)
  return target;
}

int TowerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int32 limitNum = 2;
    if (has_limitnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitnum());
    }

    // optional int32 clearNum = 3;
    if (has_clearnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clearnum());
    }

    // optional int32 pileNum = 4;
    if (has_pilenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pilenum());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int64 beginTime = 6;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int32 topNum = 7;
    if (has_topnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topnum());
    }

    // optional int32 clearPileNum = 8;
    if (has_clearpilenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clearpilenum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 maxVipNum = 9;
    if (has_maxvipnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxvipnum());
    }

    // optional int32 alreadyBuy = 10;
    if (has_alreadybuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alreadybuy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerInfo::MergeFrom(const TowerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_limitnum()) {
      set_limitnum(from.limitnum());
    }
    if (from.has_clearnum()) {
      set_clearnum(from.clearnum());
    }
    if (from.has_pilenum()) {
      set_pilenum(from.pilenum());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_topnum()) {
      set_topnum(from.topnum());
    }
    if (from.has_clearpilenum()) {
      set_clearpilenum(from.clearpilenum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxvipnum()) {
      set_maxvipnum(from.maxvipnum());
    }
    if (from.has_alreadybuy()) {
      set_alreadybuy(from.alreadybuy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerInfo::CopyFrom(const TowerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerInfo::IsInitialized() const {

  return true;
}

void TowerInfo::Swap(TowerInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(limitnum_, other->limitnum_);
    std::swap(clearnum_, other->clearnum_);
    std::swap(pilenum_, other->pilenum_);
    std::swap(status_, other->status_);
    std::swap(begintime_, other->begintime_);
    std::swap(topnum_, other->topnum_);
    std::swap(clearpilenum_, other->clearpilenum_);
    std::swap(maxvipnum_, other->maxvipnum_);
    std::swap(alreadybuy_, other->alreadybuy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerInfo_descriptor_;
  metadata.reflection = TowerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGTowerSend::kOperateFieldNumber;
const int CGTowerSend::kBuyNumFieldNumber;
#endif  // !_MSC_VER

CGTowerSend::CGTowerSend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGTowerSend)
}

void CGTowerSend::InitAsDefaultInstance() {
}

CGTowerSend::CGTowerSend(const CGTowerSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGTowerSend)
}

void CGTowerSend::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  buynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGTowerSend::~CGTowerSend() {
  // @@protoc_insertion_point(destructor:CGTowerSend)
  SharedDtor();
}

void CGTowerSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGTowerSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGTowerSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGTowerSend_descriptor_;
}

const CGTowerSend& CGTowerSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TowerMessage_2eproto();
  return *default_instance_;
}

CGTowerSend* CGTowerSend::default_instance_ = NULL;

CGTowerSend* CGTowerSend::New() const {
  return new CGTowerSend;
}

void CGTowerSend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGTowerSend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGTowerSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGTowerSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buyNum;
        break;
      }

      // optional int32 buyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGTowerSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGTowerSend)
  return false;
#undef DO_
}

void CGTowerSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGTowerSend)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 buyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGTowerSend)
}

::google::protobuf::uint8* CGTowerSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGTowerSend)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 buyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGTowerSend)
  return target;
}

int CGTowerSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 buyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGTowerSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGTowerSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGTowerSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGTowerSend::MergeFrom(const CGTowerSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGTowerSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGTowerSend::CopyFrom(const CGTowerSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGTowerSend::IsInitialized() const {

  return true;
}

void CGTowerSend::Swap(CGTowerSend* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGTowerSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGTowerSend_descriptor_;
  metadata.reflection = CGTowerSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardItem::kBidFieldNumber;
const int RewardItem::kSidFieldNumber;
const int RewardItem::kNumFieldNumber;
#endif  // !_MSC_VER

RewardItem::RewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardItem)
}

void RewardItem::InitAsDefaultInstance() {
}

RewardItem::RewardItem(const RewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardItem)
}

void RewardItem::SharedCtor() {
  _cached_size_ = 0;
  bid_ = 0;
  sid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardItem::~RewardItem() {
  // @@protoc_insertion_point(destructor:RewardItem)
  SharedDtor();
}

void RewardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardItem_descriptor_;
}

const RewardItem& RewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TowerMessage_2eproto();
  return *default_instance_;
}

RewardItem* RewardItem::default_instance_ = NULL;

RewardItem* RewardItem::New() const {
  return new RewardItem;
}

void RewardItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RewardItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional int32 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardItem)
  return false;
#undef DO_
}

void RewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardItem)
  // optional int32 bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bid(), output);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardItem)
}

::google::protobuf::uint8* RewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardItem)
  // optional int32 bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bid(), target);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardItem)
  return target;
}

int RewardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardItem::MergeFrom(const RewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardItem::CopyFrom(const RewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardItem::IsInitialized() const {

  return true;
}

void RewardItem::Swap(RewardItem* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(sid_, other->sid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardItem_descriptor_;
  metadata.reflection = RewardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCTowerPush::kOperateFieldNumber;
const int GCTowerPush::kTimeStampFieldNumber;
const int GCTowerPush::kTowerInfoFieldNumber;
const int GCTowerPush::kRewardItemsFieldNumber;
const int GCTowerPush::kFirstRewardsFieldNumber;
const int GCTowerPush::kTowerIDFieldNumber;
const int GCTowerPush::kBeginTimeFieldNumber;
#endif  // !_MSC_VER

GCTowerPush::GCTowerPush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCTowerPush)
}

void GCTowerPush::InitAsDefaultInstance() {
  towerinfo_ = const_cast< ::TowerInfo*>(&::TowerInfo::default_instance());
}

GCTowerPush::GCTowerPush(const GCTowerPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCTowerPush)
}

void GCTowerPush::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  towerinfo_ = NULL;
  towerid_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCTowerPush::~GCTowerPush() {
  // @@protoc_insertion_point(destructor:GCTowerPush)
  SharedDtor();
}

void GCTowerPush::SharedDtor() {
  if (this != default_instance_) {
    delete towerinfo_;
  }
}

void GCTowerPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCTowerPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCTowerPush_descriptor_;
}

const GCTowerPush& GCTowerPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TowerMessage_2eproto();
  return *default_instance_;
}

GCTowerPush* GCTowerPush::default_instance_ = NULL;

GCTowerPush* GCTowerPush::New() const {
  return new GCTowerPush;
}

void GCTowerPush::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCTowerPush*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 103) {
    ZR_(operate_, towerid_);
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_towerinfo()) {
      if (towerinfo_ != NULL) towerinfo_->::TowerInfo::Clear();
    }
    begintime_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewarditems_.Clear();
  firstrewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCTowerPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCTowerPush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeStamp;
        break;
      }

      // optional int64 timeStamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_towerInfo;
        break;
      }

      // optional .TowerInfo towerInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_towerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_towerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewardItems;
        break;
      }

      // repeated .RewardItem rewardItems = 4;
      case 4: {
        if (tag == 34) {
         parse_rewardItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewarditems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewardItems;
        if (input->ExpectTag(42)) goto parse_firstRewards;
        break;
      }

      // repeated .RewardItem firstRewards = 5;
      case 5: {
        if (tag == 42) {
         parse_firstRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_firstrewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_firstRewards;
        if (input->ExpectTag(48)) goto parse_towerID;
        break;
      }

      // optional int32 towerID = 6;
      case 6: {
        if (tag == 48) {
         parse_towerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 7;
      case 7: {
        if (tag == 56) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCTowerPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCTowerPush)
  return false;
#undef DO_
}

void GCTowerPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCTowerPush)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int64 timeStamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional .TowerInfo towerInfo = 3;
  if (has_towerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->towerinfo(), output);
  }

  // repeated .RewardItem rewardItems = 4;
  for (int i = 0; i < this->rewarditems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewarditems(i), output);
  }

  // repeated .RewardItem firstRewards = 5;
  for (int i = 0; i < this->firstrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->firstrewards(i), output);
  }

  // optional int32 towerID = 6;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->towerid(), output);
  }

  // optional int64 beginTime = 7;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->begintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCTowerPush)
}

::google::protobuf::uint8* GCTowerPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCTowerPush)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int64 timeStamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // optional .TowerInfo towerInfo = 3;
  if (has_towerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->towerinfo(), target);
  }

  // repeated .RewardItem rewardItems = 4;
  for (int i = 0; i < this->rewarditems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewarditems(i), target);
  }

  // repeated .RewardItem firstRewards = 5;
  for (int i = 0; i < this->firstrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->firstrewards(i), target);
  }

  // optional int32 towerID = 6;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->towerid(), target);
  }

  // optional int64 beginTime = 7;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->begintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCTowerPush)
  return target;
}

int GCTowerPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int64 timeStamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .TowerInfo towerInfo = 3;
    if (has_towerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->towerinfo());
    }

    // optional int32 towerID = 6;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->towerid());
    }

    // optional int64 beginTime = 7;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

  }
  // repeated .RewardItem rewardItems = 4;
  total_size += 1 * this->rewarditems_size();
  for (int i = 0; i < this->rewarditems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewarditems(i));
  }

  // repeated .RewardItem firstRewards = 5;
  total_size += 1 * this->firstrewards_size();
  for (int i = 0; i < this->firstrewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->firstrewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCTowerPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCTowerPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCTowerPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCTowerPush::MergeFrom(const GCTowerPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewarditems_.MergeFrom(from.rewarditems_);
  firstrewards_.MergeFrom(from.firstrewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_towerinfo()) {
      mutable_towerinfo()->::TowerInfo::MergeFrom(from.towerinfo());
    }
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCTowerPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCTowerPush::CopyFrom(const GCTowerPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTowerPush::IsInitialized() const {

  return true;
}

void GCTowerPush::Swap(GCTowerPush* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(towerinfo_, other->towerinfo_);
    rewarditems_.Swap(&other->rewarditems_);
    firstrewards_.Swap(&other->firstrewards_);
    std::swap(towerid_, other->towerid_);
    std::swap(begintime_, other->begintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCTowerPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCTowerPush_descriptor_;
  metadata.reflection = GCTowerPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
