// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TreasureEquipMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TreasureEquipMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* VocabularyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VocabularyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureEquipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureEquipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAllOnTreasureEquips_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAllOnTreasureEquips_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGOnOrOffTreasureEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGOnOrOffTreasureEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCOnOrOffTreasureEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCOnOrOffTreasureEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGRandomTreasureEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGRandomTreasureEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRandomTreasureEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRandomTreasureEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSaveTreasureEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSaveTreasureEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSaveTreasureEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSaveTreasureEquip_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TreasureEquipMessage_2eproto() {
  protobuf_AddDesc_TreasureEquipMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TreasureEquipMessage.proto");
  GOOGLE_CHECK(file != NULL);
  VocabularyInfo_descriptor_ = file->message_type(0);
  static const int VocabularyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocabularyInfo, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocabularyInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocabularyInfo, value_),
  };
  VocabularyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VocabularyInfo_descriptor_,
      VocabularyInfo::default_instance_,
      VocabularyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocabularyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocabularyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VocabularyInfo));
  TreasureEquipData_descriptor_ = file->message_type(1);
  static const int TreasureEquipData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipData, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipData, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipData, basevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipData, battlenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipData, vocalinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipData, tempvocalinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipData, sorce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipData, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipData, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipData, oldvocalbattlenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipData, newvocalbattlenumber_),
  };
  TreasureEquipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureEquipData_descriptor_,
      TreasureEquipData::default_instance_,
      TreasureEquipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureEquipData));
  GCAllOnTreasureEquips_descriptor_ = file->message_type(2);
  static const int GCAllOnTreasureEquips_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllOnTreasureEquips, equips_),
  };
  GCAllOnTreasureEquips_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAllOnTreasureEquips_descriptor_,
      GCAllOnTreasureEquips::default_instance_,
      GCAllOnTreasureEquips_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllOnTreasureEquips, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllOnTreasureEquips, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAllOnTreasureEquips));
  CGOnOrOffTreasureEquip_descriptor_ = file->message_type(3);
  static const int CGOnOrOffTreasureEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnOrOffTreasureEquip, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnOrOffTreasureEquip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnOrOffTreasureEquip, pos_),
  };
  CGOnOrOffTreasureEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGOnOrOffTreasureEquip_descriptor_,
      CGOnOrOffTreasureEquip::default_instance_,
      CGOnOrOffTreasureEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnOrOffTreasureEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnOrOffTreasureEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGOnOrOffTreasureEquip));
  GCOnOrOffTreasureEquip_descriptor_ = file->message_type(4);
  static const int GCOnOrOffTreasureEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOnOrOffTreasureEquip, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOnOrOffTreasureEquip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOnOrOffTreasureEquip, sts_),
  };
  GCOnOrOffTreasureEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCOnOrOffTreasureEquip_descriptor_,
      GCOnOrOffTreasureEquip::default_instance_,
      GCOnOrOffTreasureEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOnOrOffTreasureEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOnOrOffTreasureEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCOnOrOffTreasureEquip));
  CGRandomTreasureEquip_descriptor_ = file->message_type(5);
  static const int CGRandomTreasureEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRandomTreasureEquip, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRandomTreasureEquip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRandomTreasureEquip, costtype_),
  };
  CGRandomTreasureEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGRandomTreasureEquip_descriptor_,
      CGRandomTreasureEquip::default_instance_,
      CGRandomTreasureEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRandomTreasureEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRandomTreasureEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGRandomTreasureEquip));
  GCRandomTreasureEquip_descriptor_ = file->message_type(6);
  static const int GCRandomTreasureEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRandomTreasureEquip, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRandomTreasureEquip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRandomTreasureEquip, data_),
  };
  GCRandomTreasureEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRandomTreasureEquip_descriptor_,
      GCRandomTreasureEquip::default_instance_,
      GCRandomTreasureEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRandomTreasureEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRandomTreasureEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRandomTreasureEquip));
  CGSaveTreasureEquip_descriptor_ = file->message_type(7);
  static const int CGSaveTreasureEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSaveTreasureEquip, pid_),
  };
  CGSaveTreasureEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSaveTreasureEquip_descriptor_,
      CGSaveTreasureEquip::default_instance_,
      CGSaveTreasureEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSaveTreasureEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSaveTreasureEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSaveTreasureEquip));
  GCSaveTreasureEquip_descriptor_ = file->message_type(8);
  static const int GCSaveTreasureEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSaveTreasureEquip, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSaveTreasureEquip, data_),
  };
  GCSaveTreasureEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSaveTreasureEquip_descriptor_,
      GCSaveTreasureEquip::default_instance_,
      GCSaveTreasureEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSaveTreasureEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSaveTreasureEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSaveTreasureEquip));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TreasureEquipMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VocabularyInfo_descriptor_, &VocabularyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureEquipData_descriptor_, &TreasureEquipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAllOnTreasureEquips_descriptor_, &GCAllOnTreasureEquips::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGOnOrOffTreasureEquip_descriptor_, &CGOnOrOffTreasureEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCOnOrOffTreasureEquip_descriptor_, &GCOnOrOffTreasureEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGRandomTreasureEquip_descriptor_, &CGRandomTreasureEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRandomTreasureEquip_descriptor_, &GCRandomTreasureEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSaveTreasureEquip_descriptor_, &CGSaveTreasureEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSaveTreasureEquip_descriptor_, &GCSaveTreasureEquip::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TreasureEquipMessage_2eproto() {
  delete VocabularyInfo::default_instance_;
  delete VocabularyInfo_reflection_;
  delete TreasureEquipData::default_instance_;
  delete TreasureEquipData_reflection_;
  delete GCAllOnTreasureEquips::default_instance_;
  delete GCAllOnTreasureEquips_reflection_;
  delete CGOnOrOffTreasureEquip::default_instance_;
  delete CGOnOrOffTreasureEquip_reflection_;
  delete GCOnOrOffTreasureEquip::default_instance_;
  delete GCOnOrOffTreasureEquip_reflection_;
  delete CGRandomTreasureEquip::default_instance_;
  delete CGRandomTreasureEquip_reflection_;
  delete GCRandomTreasureEquip::default_instance_;
  delete GCRandomTreasureEquip_reflection_;
  delete CGSaveTreasureEquip::default_instance_;
  delete CGSaveTreasureEquip_reflection_;
  delete GCSaveTreasureEquip::default_instance_;
  delete GCSaveTreasureEquip_reflection_;
}

void protobuf_AddDesc_TreasureEquipMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032TreasureEquipMessage.proto\":\n\016Vocabula"
    "ryInfo\022\013\n\003tid\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\r\n\005val"
    "ue\030\003 \001(\t\"\207\002\n\021TreasureEquipData\022\013\n\003pid\030\001 "
    "\001(\003\022\013\n\003sid\030\002 \001(\005\022\021\n\tbaseValue\030\003 \001(\t\022\021\n\tb"
    "attleNum\030\004 \001(\005\022#\n\nvocalInfos\030\005 \003(\0132\017.Voc"
    "abularyInfo\022\'\n\016tempVocalInfos\030\006 \003(\0132\017.Vo"
    "cabularyInfo\022\r\n\005sorce\030\007 \001(\005\022\013\n\003pos\030\010 \001(\005"
    "\022\014\n\004bind\030\t \001(\005\022\034\n\024oldVocalBattleNumber\030\n"
    " \001(\005\022\034\n\024newVocalBattleNumber\030\013 \001(\005\";\n\025GC"
    "AllOnTreasureEquips\022\"\n\006equips\030\001 \003(\0132\022.Tr"
    "easureEquipData\"@\n\026CGOnOrOffTreasureEqui"
    "p\022\013\n\003pid\030\001 \001(\003\022\014\n\004type\030\002 \001(\005\022\013\n\003pos\030\003 \001("
    "\005\"@\n\026GCOnOrOffTreasureEquip\022\013\n\003pid\030\001 \001(\003"
    "\022\014\n\004type\030\002 \001(\005\022\013\n\003sts\030\003 \001(\005\"D\n\025CGRandomT"
    "reasureEquip\022\013\n\003pid\030\001 \001(\003\022\014\n\004type\030\002 \001(\005\022"
    "\020\n\010costType\030\003 \001(\005\"T\n\025GCRandomTreasureEqu"
    "ip\022\013\n\003pid\030\001 \001(\003\022\014\n\004type\030\002 \001(\005\022 \n\004data\030\003 "
    "\001(\0132\022.TreasureEquipData\"\"\n\023CGSaveTreasur"
    "eEquip\022\013\n\003pid\030\001 \001(\003\"D\n\023GCSaveTreasureEqu"
    "ip\022\013\n\003pid\030\001 \001(\003\022 \n\004data\030\002 \001(\0132\022.Treasure"
    "EquipDataB\031\n\027com.mile.common.message", 836);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TreasureEquipMessage.proto", &protobuf_RegisterTypes);
  VocabularyInfo::default_instance_ = new VocabularyInfo();
  TreasureEquipData::default_instance_ = new TreasureEquipData();
  GCAllOnTreasureEquips::default_instance_ = new GCAllOnTreasureEquips();
  CGOnOrOffTreasureEquip::default_instance_ = new CGOnOrOffTreasureEquip();
  GCOnOrOffTreasureEquip::default_instance_ = new GCOnOrOffTreasureEquip();
  CGRandomTreasureEquip::default_instance_ = new CGRandomTreasureEquip();
  GCRandomTreasureEquip::default_instance_ = new GCRandomTreasureEquip();
  CGSaveTreasureEquip::default_instance_ = new CGSaveTreasureEquip();
  GCSaveTreasureEquip::default_instance_ = new GCSaveTreasureEquip();
  VocabularyInfo::default_instance_->InitAsDefaultInstance();
  TreasureEquipData::default_instance_->InitAsDefaultInstance();
  GCAllOnTreasureEquips::default_instance_->InitAsDefaultInstance();
  CGOnOrOffTreasureEquip::default_instance_->InitAsDefaultInstance();
  GCOnOrOffTreasureEquip::default_instance_->InitAsDefaultInstance();
  CGRandomTreasureEquip::default_instance_->InitAsDefaultInstance();
  GCRandomTreasureEquip::default_instance_->InitAsDefaultInstance();
  CGSaveTreasureEquip::default_instance_->InitAsDefaultInstance();
  GCSaveTreasureEquip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TreasureEquipMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TreasureEquipMessage_2eproto {
  StaticDescriptorInitializer_TreasureEquipMessage_2eproto() {
    protobuf_AddDesc_TreasureEquipMessage_2eproto();
  }
} static_descriptor_initializer_TreasureEquipMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VocabularyInfo::kTidFieldNumber;
const int VocabularyInfo::kTypeFieldNumber;
const int VocabularyInfo::kValueFieldNumber;
#endif  // !_MSC_VER

VocabularyInfo::VocabularyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VocabularyInfo)
}

void VocabularyInfo::InitAsDefaultInstance() {
}

VocabularyInfo::VocabularyInfo(const VocabularyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VocabularyInfo)
}

void VocabularyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tid_ = 0;
  type_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VocabularyInfo::~VocabularyInfo() {
  // @@protoc_insertion_point(destructor:VocabularyInfo)
  SharedDtor();
}

void VocabularyInfo::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void VocabularyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VocabularyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VocabularyInfo_descriptor_;
}

const VocabularyInfo& VocabularyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureEquipMessage_2eproto();
  return *default_instance_;
}

VocabularyInfo* VocabularyInfo::default_instance_ = NULL;

VocabularyInfo* VocabularyInfo::New() const {
  return new VocabularyInfo;
}

void VocabularyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VocabularyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(tid_, type_);
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VocabularyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VocabularyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VocabularyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VocabularyInfo)
  return false;
#undef DO_
}

void VocabularyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VocabularyInfo)
  // optional int32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VocabularyInfo)
}

::google::protobuf::uint8* VocabularyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VocabularyInfo)
  // optional int32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VocabularyInfo)
  return target;
}

int VocabularyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VocabularyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VocabularyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VocabularyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VocabularyInfo::MergeFrom(const VocabularyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VocabularyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VocabularyInfo::CopyFrom(const VocabularyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VocabularyInfo::IsInitialized() const {

  return true;
}

void VocabularyInfo::Swap(VocabularyInfo* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VocabularyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VocabularyInfo_descriptor_;
  metadata.reflection = VocabularyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureEquipData::kPidFieldNumber;
const int TreasureEquipData::kSidFieldNumber;
const int TreasureEquipData::kBaseValueFieldNumber;
const int TreasureEquipData::kBattleNumFieldNumber;
const int TreasureEquipData::kVocalInfosFieldNumber;
const int TreasureEquipData::kTempVocalInfosFieldNumber;
const int TreasureEquipData::kSorceFieldNumber;
const int TreasureEquipData::kPosFieldNumber;
const int TreasureEquipData::kBindFieldNumber;
const int TreasureEquipData::kOldVocalBattleNumberFieldNumber;
const int TreasureEquipData::kNewVocalBattleNumberFieldNumber;
#endif  // !_MSC_VER

TreasureEquipData::TreasureEquipData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TreasureEquipData)
}

void TreasureEquipData::InitAsDefaultInstance() {
}

TreasureEquipData::TreasureEquipData(const TreasureEquipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TreasureEquipData)
}

void TreasureEquipData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  sid_ = 0;
  basevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battlenum_ = 0;
  sorce_ = 0;
  pos_ = 0;
  bind_ = 0;
  oldvocalbattlenumber_ = 0;
  newvocalbattlenumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureEquipData::~TreasureEquipData() {
  // @@protoc_insertion_point(destructor:TreasureEquipData)
  SharedDtor();
}

void TreasureEquipData::SharedDtor() {
  if (basevalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete basevalue_;
  }
  if (this != default_instance_) {
  }
}

void TreasureEquipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureEquipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureEquipData_descriptor_;
}

const TreasureEquipData& TreasureEquipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureEquipMessage_2eproto();
  return *default_instance_;
}

TreasureEquipData* TreasureEquipData::default_instance_ = NULL;

TreasureEquipData* TreasureEquipData::New() const {
  return new TreasureEquipData;
}

void TreasureEquipData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TreasureEquipData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 207) {
    ZR_(sid_, battlenum_);
    ZR_(sorce_, pos_);
    pid_ = GOOGLE_LONGLONG(0);
    if (has_basevalue()) {
      if (basevalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        basevalue_->clear();
      }
    }
  }
  ZR_(bind_, newvocalbattlenumber_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  vocalinfos_.Clear();
  tempvocalinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureEquipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TreasureEquipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional int32 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_baseValue;
        break;
      }

      // optional string baseValue = 3;
      case 3: {
        if (tag == 26) {
         parse_baseValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basevalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->basevalue().data(), this->basevalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "basevalue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_battleNum;
        break;
      }

      // optional int32 battleNum = 4;
      case 4: {
        if (tag == 32) {
         parse_battleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlenum_)));
          set_has_battlenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_vocalInfos;
        break;
      }

      // repeated .VocabularyInfo vocalInfos = 5;
      case 5: {
        if (tag == 42) {
         parse_vocalInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vocalinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_vocalInfos;
        if (input->ExpectTag(50)) goto parse_tempVocalInfos;
        break;
      }

      // repeated .VocabularyInfo tempVocalInfos = 6;
      case 6: {
        if (tag == 50) {
         parse_tempVocalInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tempvocalinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tempVocalInfos;
        if (input->ExpectTag(56)) goto parse_sorce;
        break;
      }

      // optional int32 sorce = 7;
      case 7: {
        if (tag == 56) {
         parse_sorce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sorce_)));
          set_has_sorce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pos;
        break;
      }

      // optional int32 pos = 8;
      case 8: {
        if (tag == 64) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bind;
        break;
      }

      // optional int32 bind = 9;
      case 9: {
        if (tag == 72) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_oldVocalBattleNumber;
        break;
      }

      // optional int32 oldVocalBattleNumber = 10;
      case 10: {
        if (tag == 80) {
         parse_oldVocalBattleNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldvocalbattlenumber_)));
          set_has_oldvocalbattlenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_newVocalBattleNumber;
        break;
      }

      // optional int32 newVocalBattleNumber = 11;
      case 11: {
        if (tag == 88) {
         parse_newVocalBattleNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newvocalbattlenumber_)));
          set_has_newvocalbattlenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TreasureEquipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TreasureEquipData)
  return false;
#undef DO_
}

void TreasureEquipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TreasureEquipData)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // optional string baseValue = 3;
  if (has_basevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->basevalue().data(), this->basevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "basevalue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->basevalue(), output);
  }

  // optional int32 battleNum = 4;
  if (has_battlenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battlenum(), output);
  }

  // repeated .VocabularyInfo vocalInfos = 5;
  for (int i = 0; i < this->vocalinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vocalinfos(i), output);
  }

  // repeated .VocabularyInfo tempVocalInfos = 6;
  for (int i = 0; i < this->tempvocalinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tempvocalinfos(i), output);
  }

  // optional int32 sorce = 7;
  if (has_sorce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sorce(), output);
  }

  // optional int32 pos = 8;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pos(), output);
  }

  // optional int32 bind = 9;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bind(), output);
  }

  // optional int32 oldVocalBattleNumber = 10;
  if (has_oldvocalbattlenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->oldvocalbattlenumber(), output);
  }

  // optional int32 newVocalBattleNumber = 11;
  if (has_newvocalbattlenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->newvocalbattlenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TreasureEquipData)
}

::google::protobuf::uint8* TreasureEquipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TreasureEquipData)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // optional string baseValue = 3;
  if (has_basevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->basevalue().data(), this->basevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "basevalue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->basevalue(), target);
  }

  // optional int32 battleNum = 4;
  if (has_battlenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battlenum(), target);
  }

  // repeated .VocabularyInfo vocalInfos = 5;
  for (int i = 0; i < this->vocalinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vocalinfos(i), target);
  }

  // repeated .VocabularyInfo tempVocalInfos = 6;
  for (int i = 0; i < this->tempvocalinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tempvocalinfos(i), target);
  }

  // optional int32 sorce = 7;
  if (has_sorce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sorce(), target);
  }

  // optional int32 pos = 8;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pos(), target);
  }

  // optional int32 bind = 9;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bind(), target);
  }

  // optional int32 oldVocalBattleNumber = 10;
  if (has_oldvocalbattlenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->oldvocalbattlenumber(), target);
  }

  // optional int32 newVocalBattleNumber = 11;
  if (has_newvocalbattlenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->newvocalbattlenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TreasureEquipData)
  return target;
}

int TreasureEquipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional string baseValue = 3;
    if (has_basevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->basevalue());
    }

    // optional int32 battleNum = 4;
    if (has_battlenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlenum());
    }

    // optional int32 sorce = 7;
    if (has_sorce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sorce());
    }

    // optional int32 pos = 8;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bind = 9;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

    // optional int32 oldVocalBattleNumber = 10;
    if (has_oldvocalbattlenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oldvocalbattlenumber());
    }

    // optional int32 newVocalBattleNumber = 11;
    if (has_newvocalbattlenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newvocalbattlenumber());
    }

  }
  // repeated .VocabularyInfo vocalInfos = 5;
  total_size += 1 * this->vocalinfos_size();
  for (int i = 0; i < this->vocalinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vocalinfos(i));
  }

  // repeated .VocabularyInfo tempVocalInfos = 6;
  total_size += 1 * this->tempvocalinfos_size();
  for (int i = 0; i < this->tempvocalinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tempvocalinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureEquipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureEquipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureEquipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureEquipData::MergeFrom(const TreasureEquipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  vocalinfos_.MergeFrom(from.vocalinfos_);
  tempvocalinfos_.MergeFrom(from.tempvocalinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_basevalue()) {
      set_basevalue(from.basevalue());
    }
    if (from.has_battlenum()) {
      set_battlenum(from.battlenum());
    }
    if (from.has_sorce()) {
      set_sorce(from.sorce());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_oldvocalbattlenumber()) {
      set_oldvocalbattlenumber(from.oldvocalbattlenumber());
    }
    if (from.has_newvocalbattlenumber()) {
      set_newvocalbattlenumber(from.newvocalbattlenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureEquipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureEquipData::CopyFrom(const TreasureEquipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureEquipData::IsInitialized() const {

  return true;
}

void TreasureEquipData::Swap(TreasureEquipData* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(sid_, other->sid_);
    std::swap(basevalue_, other->basevalue_);
    std::swap(battlenum_, other->battlenum_);
    vocalinfos_.Swap(&other->vocalinfos_);
    tempvocalinfos_.Swap(&other->tempvocalinfos_);
    std::swap(sorce_, other->sorce_);
    std::swap(pos_, other->pos_);
    std::swap(bind_, other->bind_);
    std::swap(oldvocalbattlenumber_, other->oldvocalbattlenumber_);
    std::swap(newvocalbattlenumber_, other->newvocalbattlenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureEquipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureEquipData_descriptor_;
  metadata.reflection = TreasureEquipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAllOnTreasureEquips::kEquipsFieldNumber;
#endif  // !_MSC_VER

GCAllOnTreasureEquips::GCAllOnTreasureEquips()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCAllOnTreasureEquips)
}

void GCAllOnTreasureEquips::InitAsDefaultInstance() {
}

GCAllOnTreasureEquips::GCAllOnTreasureEquips(const GCAllOnTreasureEquips& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCAllOnTreasureEquips)
}

void GCAllOnTreasureEquips::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAllOnTreasureEquips::~GCAllOnTreasureEquips() {
  // @@protoc_insertion_point(destructor:GCAllOnTreasureEquips)
  SharedDtor();
}

void GCAllOnTreasureEquips::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCAllOnTreasureEquips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAllOnTreasureEquips::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAllOnTreasureEquips_descriptor_;
}

const GCAllOnTreasureEquips& GCAllOnTreasureEquips::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureEquipMessage_2eproto();
  return *default_instance_;
}

GCAllOnTreasureEquips* GCAllOnTreasureEquips::default_instance_ = NULL;

GCAllOnTreasureEquips* GCAllOnTreasureEquips::New() const {
  return new GCAllOnTreasureEquips;
}

void GCAllOnTreasureEquips::Clear() {
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAllOnTreasureEquips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCAllOnTreasureEquips)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TreasureEquipData equips = 1;
      case 1: {
        if (tag == 10) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_equips;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCAllOnTreasureEquips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCAllOnTreasureEquips)
  return false;
#undef DO_
}

void GCAllOnTreasureEquips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCAllOnTreasureEquips)
  // repeated .TreasureEquipData equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCAllOnTreasureEquips)
}

::google::protobuf::uint8* GCAllOnTreasureEquips::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCAllOnTreasureEquips)
  // repeated .TreasureEquipData equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCAllOnTreasureEquips)
  return target;
}

int GCAllOnTreasureEquips::ByteSize() const {
  int total_size = 0;

  // repeated .TreasureEquipData equips = 1;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAllOnTreasureEquips::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAllOnTreasureEquips* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAllOnTreasureEquips*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAllOnTreasureEquips::MergeFrom(const GCAllOnTreasureEquips& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAllOnTreasureEquips::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAllOnTreasureEquips::CopyFrom(const GCAllOnTreasureEquips& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAllOnTreasureEquips::IsInitialized() const {

  return true;
}

void GCAllOnTreasureEquips::Swap(GCAllOnTreasureEquips* other) {
  if (other != this) {
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAllOnTreasureEquips::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAllOnTreasureEquips_descriptor_;
  metadata.reflection = GCAllOnTreasureEquips_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGOnOrOffTreasureEquip::kPidFieldNumber;
const int CGOnOrOffTreasureEquip::kTypeFieldNumber;
const int CGOnOrOffTreasureEquip::kPosFieldNumber;
#endif  // !_MSC_VER

CGOnOrOffTreasureEquip::CGOnOrOffTreasureEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGOnOrOffTreasureEquip)
}

void CGOnOrOffTreasureEquip::InitAsDefaultInstance() {
}

CGOnOrOffTreasureEquip::CGOnOrOffTreasureEquip(const CGOnOrOffTreasureEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGOnOrOffTreasureEquip)
}

void CGOnOrOffTreasureEquip::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGOnOrOffTreasureEquip::~CGOnOrOffTreasureEquip() {
  // @@protoc_insertion_point(destructor:CGOnOrOffTreasureEquip)
  SharedDtor();
}

void CGOnOrOffTreasureEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGOnOrOffTreasureEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGOnOrOffTreasureEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGOnOrOffTreasureEquip_descriptor_;
}

const CGOnOrOffTreasureEquip& CGOnOrOffTreasureEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureEquipMessage_2eproto();
  return *default_instance_;
}

CGOnOrOffTreasureEquip* CGOnOrOffTreasureEquip::default_instance_ = NULL;

CGOnOrOffTreasureEquip* CGOnOrOffTreasureEquip::New() const {
  return new CGOnOrOffTreasureEquip;
}

void CGOnOrOffTreasureEquip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGOnOrOffTreasureEquip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, pos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGOnOrOffTreasureEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGOnOrOffTreasureEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional int32 pos = 3;
      case 3: {
        if (tag == 24) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGOnOrOffTreasureEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGOnOrOffTreasureEquip)
  return false;
#undef DO_
}

void CGOnOrOffTreasureEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGOnOrOffTreasureEquip)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGOnOrOffTreasureEquip)
}

::google::protobuf::uint8* CGOnOrOffTreasureEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGOnOrOffTreasureEquip)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGOnOrOffTreasureEquip)
  return target;
}

int CGOnOrOffTreasureEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGOnOrOffTreasureEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGOnOrOffTreasureEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGOnOrOffTreasureEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGOnOrOffTreasureEquip::MergeFrom(const CGOnOrOffTreasureEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGOnOrOffTreasureEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGOnOrOffTreasureEquip::CopyFrom(const CGOnOrOffTreasureEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOnOrOffTreasureEquip::IsInitialized() const {

  return true;
}

void CGOnOrOffTreasureEquip::Swap(CGOnOrOffTreasureEquip* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGOnOrOffTreasureEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGOnOrOffTreasureEquip_descriptor_;
  metadata.reflection = CGOnOrOffTreasureEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCOnOrOffTreasureEquip::kPidFieldNumber;
const int GCOnOrOffTreasureEquip::kTypeFieldNumber;
const int GCOnOrOffTreasureEquip::kStsFieldNumber;
#endif  // !_MSC_VER

GCOnOrOffTreasureEquip::GCOnOrOffTreasureEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCOnOrOffTreasureEquip)
}

void GCOnOrOffTreasureEquip::InitAsDefaultInstance() {
}

GCOnOrOffTreasureEquip::GCOnOrOffTreasureEquip(const GCOnOrOffTreasureEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCOnOrOffTreasureEquip)
}

void GCOnOrOffTreasureEquip::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  sts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCOnOrOffTreasureEquip::~GCOnOrOffTreasureEquip() {
  // @@protoc_insertion_point(destructor:GCOnOrOffTreasureEquip)
  SharedDtor();
}

void GCOnOrOffTreasureEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCOnOrOffTreasureEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCOnOrOffTreasureEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCOnOrOffTreasureEquip_descriptor_;
}

const GCOnOrOffTreasureEquip& GCOnOrOffTreasureEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureEquipMessage_2eproto();
  return *default_instance_;
}

GCOnOrOffTreasureEquip* GCOnOrOffTreasureEquip::default_instance_ = NULL;

GCOnOrOffTreasureEquip* GCOnOrOffTreasureEquip::New() const {
  return new GCOnOrOffTreasureEquip;
}

void GCOnOrOffTreasureEquip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCOnOrOffTreasureEquip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, sts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCOnOrOffTreasureEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCOnOrOffTreasureEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sts;
        break;
      }

      // optional int32 sts = 3;
      case 3: {
        if (tag == 24) {
         parse_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCOnOrOffTreasureEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCOnOrOffTreasureEquip)
  return false;
#undef DO_
}

void GCOnOrOffTreasureEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCOnOrOffTreasureEquip)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 sts = 3;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCOnOrOffTreasureEquip)
}

::google::protobuf::uint8* GCOnOrOffTreasureEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCOnOrOffTreasureEquip)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 sts = 3;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCOnOrOffTreasureEquip)
  return target;
}

int GCOnOrOffTreasureEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 sts = 3;
    if (has_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCOnOrOffTreasureEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCOnOrOffTreasureEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCOnOrOffTreasureEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCOnOrOffTreasureEquip::MergeFrom(const GCOnOrOffTreasureEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sts()) {
      set_sts(from.sts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCOnOrOffTreasureEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCOnOrOffTreasureEquip::CopyFrom(const GCOnOrOffTreasureEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCOnOrOffTreasureEquip::IsInitialized() const {

  return true;
}

void GCOnOrOffTreasureEquip::Swap(GCOnOrOffTreasureEquip* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(type_, other->type_);
    std::swap(sts_, other->sts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCOnOrOffTreasureEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCOnOrOffTreasureEquip_descriptor_;
  metadata.reflection = GCOnOrOffTreasureEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGRandomTreasureEquip::kPidFieldNumber;
const int CGRandomTreasureEquip::kTypeFieldNumber;
const int CGRandomTreasureEquip::kCostTypeFieldNumber;
#endif  // !_MSC_VER

CGRandomTreasureEquip::CGRandomTreasureEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGRandomTreasureEquip)
}

void CGRandomTreasureEquip::InitAsDefaultInstance() {
}

CGRandomTreasureEquip::CGRandomTreasureEquip(const CGRandomTreasureEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGRandomTreasureEquip)
}

void CGRandomTreasureEquip::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  costtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGRandomTreasureEquip::~CGRandomTreasureEquip() {
  // @@protoc_insertion_point(destructor:CGRandomTreasureEquip)
  SharedDtor();
}

void CGRandomTreasureEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGRandomTreasureEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGRandomTreasureEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGRandomTreasureEquip_descriptor_;
}

const CGRandomTreasureEquip& CGRandomTreasureEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureEquipMessage_2eproto();
  return *default_instance_;
}

CGRandomTreasureEquip* CGRandomTreasureEquip::default_instance_ = NULL;

CGRandomTreasureEquip* CGRandomTreasureEquip::New() const {
  return new CGRandomTreasureEquip;
}

void CGRandomTreasureEquip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGRandomTreasureEquip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, costtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGRandomTreasureEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGRandomTreasureEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_costType;
        break;
      }

      // optional int32 costType = 3;
      case 3: {
        if (tag == 24) {
         parse_costType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costtype_)));
          set_has_costtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGRandomTreasureEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGRandomTreasureEquip)
  return false;
#undef DO_
}

void CGRandomTreasureEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGRandomTreasureEquip)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 costType = 3;
  if (has_costtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->costtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGRandomTreasureEquip)
}

::google::protobuf::uint8* CGRandomTreasureEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGRandomTreasureEquip)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 costType = 3;
  if (has_costtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->costtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGRandomTreasureEquip)
  return target;
}

int CGRandomTreasureEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 costType = 3;
    if (has_costtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGRandomTreasureEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGRandomTreasureEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGRandomTreasureEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGRandomTreasureEquip::MergeFrom(const CGRandomTreasureEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_costtype()) {
      set_costtype(from.costtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGRandomTreasureEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGRandomTreasureEquip::CopyFrom(const CGRandomTreasureEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGRandomTreasureEquip::IsInitialized() const {

  return true;
}

void CGRandomTreasureEquip::Swap(CGRandomTreasureEquip* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(type_, other->type_);
    std::swap(costtype_, other->costtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGRandomTreasureEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGRandomTreasureEquip_descriptor_;
  metadata.reflection = CGRandomTreasureEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRandomTreasureEquip::kPidFieldNumber;
const int GCRandomTreasureEquip::kTypeFieldNumber;
const int GCRandomTreasureEquip::kDataFieldNumber;
#endif  // !_MSC_VER

GCRandomTreasureEquip::GCRandomTreasureEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRandomTreasureEquip)
}

void GCRandomTreasureEquip::InitAsDefaultInstance() {
  data_ = const_cast< ::TreasureEquipData*>(&::TreasureEquipData::default_instance());
}

GCRandomTreasureEquip::GCRandomTreasureEquip(const GCRandomTreasureEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRandomTreasureEquip)
}

void GCRandomTreasureEquip::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRandomTreasureEquip::~GCRandomTreasureEquip() {
  // @@protoc_insertion_point(destructor:GCRandomTreasureEquip)
  SharedDtor();
}

void GCRandomTreasureEquip::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GCRandomTreasureEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRandomTreasureEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRandomTreasureEquip_descriptor_;
}

const GCRandomTreasureEquip& GCRandomTreasureEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureEquipMessage_2eproto();
  return *default_instance_;
}

GCRandomTreasureEquip* GCRandomTreasureEquip::default_instance_ = NULL;

GCRandomTreasureEquip* GCRandomTreasureEquip::New() const {
  return new GCRandomTreasureEquip;
}

void GCRandomTreasureEquip::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    pid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::TreasureEquipData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRandomTreasureEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRandomTreasureEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .TreasureEquipData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRandomTreasureEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRandomTreasureEquip)
  return false;
#undef DO_
}

void GCRandomTreasureEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRandomTreasureEquip)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional .TreasureEquipData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRandomTreasureEquip)
}

::google::protobuf::uint8* GCRandomTreasureEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRandomTreasureEquip)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional .TreasureEquipData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRandomTreasureEquip)
  return target;
}

int GCRandomTreasureEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .TreasureEquipData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRandomTreasureEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRandomTreasureEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRandomTreasureEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRandomTreasureEquip::MergeFrom(const GCRandomTreasureEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      mutable_data()->::TreasureEquipData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRandomTreasureEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRandomTreasureEquip::CopyFrom(const GCRandomTreasureEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRandomTreasureEquip::IsInitialized() const {

  return true;
}

void GCRandomTreasureEquip::Swap(GCRandomTreasureEquip* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRandomTreasureEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRandomTreasureEquip_descriptor_;
  metadata.reflection = GCRandomTreasureEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSaveTreasureEquip::kPidFieldNumber;
#endif  // !_MSC_VER

CGSaveTreasureEquip::CGSaveTreasureEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSaveTreasureEquip)
}

void CGSaveTreasureEquip::InitAsDefaultInstance() {
}

CGSaveTreasureEquip::CGSaveTreasureEquip(const CGSaveTreasureEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSaveTreasureEquip)
}

void CGSaveTreasureEquip::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSaveTreasureEquip::~CGSaveTreasureEquip() {
  // @@protoc_insertion_point(destructor:CGSaveTreasureEquip)
  SharedDtor();
}

void CGSaveTreasureEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSaveTreasureEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSaveTreasureEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSaveTreasureEquip_descriptor_;
}

const CGSaveTreasureEquip& CGSaveTreasureEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureEquipMessage_2eproto();
  return *default_instance_;
}

CGSaveTreasureEquip* CGSaveTreasureEquip::default_instance_ = NULL;

CGSaveTreasureEquip* CGSaveTreasureEquip::New() const {
  return new CGSaveTreasureEquip;
}

void CGSaveTreasureEquip::Clear() {
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSaveTreasureEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSaveTreasureEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSaveTreasureEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSaveTreasureEquip)
  return false;
#undef DO_
}

void CGSaveTreasureEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSaveTreasureEquip)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSaveTreasureEquip)
}

::google::protobuf::uint8* CGSaveTreasureEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSaveTreasureEquip)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSaveTreasureEquip)
  return target;
}

int CGSaveTreasureEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSaveTreasureEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSaveTreasureEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSaveTreasureEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSaveTreasureEquip::MergeFrom(const CGSaveTreasureEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSaveTreasureEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSaveTreasureEquip::CopyFrom(const CGSaveTreasureEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSaveTreasureEquip::IsInitialized() const {

  return true;
}

void CGSaveTreasureEquip::Swap(CGSaveTreasureEquip* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSaveTreasureEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSaveTreasureEquip_descriptor_;
  metadata.reflection = CGSaveTreasureEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSaveTreasureEquip::kPidFieldNumber;
const int GCSaveTreasureEquip::kDataFieldNumber;
#endif  // !_MSC_VER

GCSaveTreasureEquip::GCSaveTreasureEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSaveTreasureEquip)
}

void GCSaveTreasureEquip::InitAsDefaultInstance() {
  data_ = const_cast< ::TreasureEquipData*>(&::TreasureEquipData::default_instance());
}

GCSaveTreasureEquip::GCSaveTreasureEquip(const GCSaveTreasureEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSaveTreasureEquip)
}

void GCSaveTreasureEquip::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSaveTreasureEquip::~GCSaveTreasureEquip() {
  // @@protoc_insertion_point(destructor:GCSaveTreasureEquip)
  SharedDtor();
}

void GCSaveTreasureEquip::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GCSaveTreasureEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSaveTreasureEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSaveTreasureEquip_descriptor_;
}

const GCSaveTreasureEquip& GCSaveTreasureEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureEquipMessage_2eproto();
  return *default_instance_;
}

GCSaveTreasureEquip* GCSaveTreasureEquip::default_instance_ = NULL;

GCSaveTreasureEquip* GCSaveTreasureEquip::New() const {
  return new GCSaveTreasureEquip;
}

void GCSaveTreasureEquip::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    pid_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::TreasureEquipData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSaveTreasureEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSaveTreasureEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .TreasureEquipData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSaveTreasureEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSaveTreasureEquip)
  return false;
#undef DO_
}

void GCSaveTreasureEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSaveTreasureEquip)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional .TreasureEquipData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSaveTreasureEquip)
}

::google::protobuf::uint8* GCSaveTreasureEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSaveTreasureEquip)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional .TreasureEquipData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSaveTreasureEquip)
  return target;
}

int GCSaveTreasureEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional .TreasureEquipData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSaveTreasureEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSaveTreasureEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSaveTreasureEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSaveTreasureEquip::MergeFrom(const GCSaveTreasureEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_data()) {
      mutable_data()->::TreasureEquipData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSaveTreasureEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSaveTreasureEquip::CopyFrom(const GCSaveTreasureEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSaveTreasureEquip::IsInitialized() const {

  return true;
}

void GCSaveTreasureEquip::Swap(GCSaveTreasureEquip* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSaveTreasureEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSaveTreasureEquip_descriptor_;
  metadata.reflection = GCSaveTreasureEquip_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
