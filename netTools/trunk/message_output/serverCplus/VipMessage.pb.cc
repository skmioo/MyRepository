// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VipMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VipMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GCPushVipBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPushVipBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetRewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetRewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetRewardDataBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetRewardDataBack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VipMessage_2eproto() {
  protobuf_AddDesc_VipMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VipMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GCPushVipBack_descriptor_ = file->message_type(0);
  static const int GCPushVipBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushVipBack, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushVipBack, summoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushVipBack, vipdata_),
  };
  GCPushVipBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPushVipBack_descriptor_,
      GCPushVipBack::default_instance_,
      GCPushVipBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushVipBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushVipBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPushVipBack));
  CGGetRewardData_descriptor_ = file->message_type(1);
  static const int CGGetRewardData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRewardData, vip_),
  };
  CGGetRewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetRewardData_descriptor_,
      CGGetRewardData::default_instance_,
      CGGetRewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetRewardData));
  GCGetRewardDataBack_descriptor_ = file->message_type(2);
  static const int GCGetRewardDataBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRewardDataBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRewardDataBack, vip_),
  };
  GCGetRewardDataBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetRewardDataBack_descriptor_,
      GCGetRewardDataBack::default_instance_,
      GCGetRewardDataBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRewardDataBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRewardDataBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetRewardDataBack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VipMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPushVipBack_descriptor_, &GCPushVipBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetRewardData_descriptor_, &CGGetRewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetRewardDataBack_descriptor_, &GCGetRewardDataBack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VipMessage_2eproto() {
  delete GCPushVipBack::default_instance_;
  delete GCPushVipBack_reflection_;
  delete CGGetRewardData::default_instance_;
  delete CGGetRewardData_reflection_;
  delete GCGetRewardDataBack::default_instance_;
  delete GCGetRewardDataBack_reflection_;
}

void protobuf_AddDesc_VipMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020VipMessage.proto\032\022InnerMessage.proto\"I"
    "\n\rGCPushVipBack\022\013\n\003vip\030\001 \001(\005\022\020\n\010summoney"
    "\030\002 \001(\005\022\031\n\007vipdata\030\003 \003(\0132\010.VipData\"\036\n\017CGG"
    "etRewardData\022\013\n\003vip\030\001 \001(\005\"0\n\023GCGetReward"
    "DataBack\022\014\n\004flag\030\001 \001(\005\022\013\n\003vip\030\002 \001(\005B\031\n\027c"
    "om.mile.common.message", 222);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VipMessage.proto", &protobuf_RegisterTypes);
  GCPushVipBack::default_instance_ = new GCPushVipBack();
  CGGetRewardData::default_instance_ = new CGGetRewardData();
  GCGetRewardDataBack::default_instance_ = new GCGetRewardDataBack();
  GCPushVipBack::default_instance_->InitAsDefaultInstance();
  CGGetRewardData::default_instance_->InitAsDefaultInstance();
  GCGetRewardDataBack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VipMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VipMessage_2eproto {
  StaticDescriptorInitializer_VipMessage_2eproto() {
    protobuf_AddDesc_VipMessage_2eproto();
  }
} static_descriptor_initializer_VipMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GCPushVipBack::kVipFieldNumber;
const int GCPushVipBack::kSummoneyFieldNumber;
const int GCPushVipBack::kVipdataFieldNumber;
#endif  // !_MSC_VER

GCPushVipBack::GCPushVipBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPushVipBack)
}

void GCPushVipBack::InitAsDefaultInstance() {
}

GCPushVipBack::GCPushVipBack(const GCPushVipBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPushVipBack)
}

void GCPushVipBack::SharedCtor() {
  _cached_size_ = 0;
  vip_ = 0;
  summoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPushVipBack::~GCPushVipBack() {
  // @@protoc_insertion_point(destructor:GCPushVipBack)
  SharedDtor();
}

void GCPushVipBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPushVipBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPushVipBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPushVipBack_descriptor_;
}

const GCPushVipBack& GCPushVipBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipMessage_2eproto();
  return *default_instance_;
}

GCPushVipBack* GCPushVipBack::default_instance_ = NULL;

GCPushVipBack* GCPushVipBack::New() const {
  return new GCPushVipBack;
}

void GCPushVipBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPushVipBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(vip_, summoney_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  vipdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPushVipBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPushVipBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_summoney;
        break;
      }

      // optional int32 summoney = 2;
      case 2: {
        if (tag == 16) {
         parse_summoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &summoney_)));
          set_has_summoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vipdata;
        break;
      }

      // repeated .VipData vipdata = 3;
      case 3: {
        if (tag == 26) {
         parse_vipdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vipdata;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPushVipBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPushVipBack)
  return false;
#undef DO_
}

void GCPushVipBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPushVipBack)
  // optional int32 vip = 1;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vip(), output);
  }

  // optional int32 summoney = 2;
  if (has_summoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->summoney(), output);
  }

  // repeated .VipData vipdata = 3;
  for (int i = 0; i < this->vipdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vipdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPushVipBack)
}

::google::protobuf::uint8* GCPushVipBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPushVipBack)
  // optional int32 vip = 1;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vip(), target);
  }

  // optional int32 summoney = 2;
  if (has_summoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->summoney(), target);
  }

  // repeated .VipData vipdata = 3;
  for (int i = 0; i < this->vipdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vipdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPushVipBack)
  return target;
}

int GCPushVipBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vip = 1;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int32 summoney = 2;
    if (has_summoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->summoney());
    }

  }
  // repeated .VipData vipdata = 3;
  total_size += 1 * this->vipdata_size();
  for (int i = 0; i < this->vipdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPushVipBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPushVipBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPushVipBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPushVipBack::MergeFrom(const GCPushVipBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipdata_.MergeFrom(from.vipdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_summoney()) {
      set_summoney(from.summoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPushVipBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPushVipBack::CopyFrom(const GCPushVipBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPushVipBack::IsInitialized() const {

  return true;
}

void GCPushVipBack::Swap(GCPushVipBack* other) {
  if (other != this) {
    std::swap(vip_, other->vip_);
    std::swap(summoney_, other->summoney_);
    vipdata_.Swap(&other->vipdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPushVipBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPushVipBack_descriptor_;
  metadata.reflection = GCPushVipBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetRewardData::kVipFieldNumber;
#endif  // !_MSC_VER

CGGetRewardData::CGGetRewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetRewardData)
}

void CGGetRewardData::InitAsDefaultInstance() {
}

CGGetRewardData::CGGetRewardData(const CGGetRewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetRewardData)
}

void CGGetRewardData::SharedCtor() {
  _cached_size_ = 0;
  vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetRewardData::~CGGetRewardData() {
  // @@protoc_insertion_point(destructor:CGGetRewardData)
  SharedDtor();
}

void CGGetRewardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetRewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetRewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetRewardData_descriptor_;
}

const CGGetRewardData& CGGetRewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipMessage_2eproto();
  return *default_instance_;
}

CGGetRewardData* CGGetRewardData::default_instance_ = NULL;

CGGetRewardData* CGGetRewardData::New() const {
  return new CGGetRewardData;
}

void CGGetRewardData::Clear() {
  vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetRewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetRewardData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetRewardData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetRewardData)
  return false;
#undef DO_
}

void CGGetRewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetRewardData)
  // optional int32 vip = 1;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetRewardData)
}

::google::protobuf::uint8* CGGetRewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetRewardData)
  // optional int32 vip = 1;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetRewardData)
  return target;
}

int CGGetRewardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vip = 1;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetRewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetRewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetRewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetRewardData::MergeFrom(const CGGetRewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetRewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetRewardData::CopyFrom(const CGGetRewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetRewardData::IsInitialized() const {

  return true;
}

void CGGetRewardData::Swap(CGGetRewardData* other) {
  if (other != this) {
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetRewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetRewardData_descriptor_;
  metadata.reflection = CGGetRewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetRewardDataBack::kFlagFieldNumber;
const int GCGetRewardDataBack::kVipFieldNumber;
#endif  // !_MSC_VER

GCGetRewardDataBack::GCGetRewardDataBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetRewardDataBack)
}

void GCGetRewardDataBack::InitAsDefaultInstance() {
}

GCGetRewardDataBack::GCGetRewardDataBack(const GCGetRewardDataBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetRewardDataBack)
}

void GCGetRewardDataBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetRewardDataBack::~GCGetRewardDataBack() {
  // @@protoc_insertion_point(destructor:GCGetRewardDataBack)
  SharedDtor();
}

void GCGetRewardDataBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetRewardDataBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetRewardDataBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetRewardDataBack_descriptor_;
}

const GCGetRewardDataBack& GCGetRewardDataBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipMessage_2eproto();
  return *default_instance_;
}

GCGetRewardDataBack* GCGetRewardDataBack::default_instance_ = NULL;

GCGetRewardDataBack* GCGetRewardDataBack::New() const {
  return new GCGetRewardDataBack;
}

void GCGetRewardDataBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGetRewardDataBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(flag_, vip_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetRewardDataBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetRewardDataBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vip;
        break;
      }

      // optional int32 vip = 2;
      case 2: {
        if (tag == 16) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetRewardDataBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetRewardDataBack)
  return false;
#undef DO_
}

void GCGetRewardDataBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetRewardDataBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 vip = 2;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetRewardDataBack)
}

::google::protobuf::uint8* GCGetRewardDataBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetRewardDataBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 vip = 2;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetRewardDataBack)
  return target;
}

int GCGetRewardDataBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 vip = 2;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetRewardDataBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetRewardDataBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetRewardDataBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetRewardDataBack::MergeFrom(const GCGetRewardDataBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetRewardDataBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetRewardDataBack::CopyFrom(const GCGetRewardDataBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetRewardDataBack::IsInitialized() const {

  return true;
}

void GCGetRewardDataBack::Swap(GCGetRewardDataBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetRewardDataBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetRewardDataBack_descriptor_;
  metadata.reflection = GCGetRewardDataBack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
