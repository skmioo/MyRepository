// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VitalityMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VitalityMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ActiveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActiveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PowerMedicalData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerMedicalData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActiveStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActiveStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGOpenActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGOpenActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCOpenActiveBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCOpenActiveBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetActiveReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetActiveReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetActiveRewardBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetActiveRewardBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetPowerMedical_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetPowerMedical_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetPowerMedicalBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetPowerMedicalBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGDeepThinkOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGDeepThinkOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDeepThinkOperationBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDeepThinkOperationBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetDeepThinkExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetDeepThinkExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetDeepThinkExpBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetDeepThinkExpBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCBroadcastSystemNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCBroadcastSystemNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPushNextDayReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPushNextDayReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetNextDayReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetNextDayReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetNextDayRewardBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetNextDayRewardBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetCDKReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetCDKReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetCDKRewardBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetCDKRewardBack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VitalityMessage_2eproto() {
  protobuf_AddDesc_VitalityMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VitalityMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ActiveData_descriptor_ = file->message_type(0);
  static const int ActiveData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveData, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveData, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveData, activestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveData, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveData, openlevel_),
  };
  ActiveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActiveData_descriptor_,
      ActiveData::default_instance_,
      ActiveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActiveData));
  PowerMedicalData_descriptor_ = file->message_type(1);
  static const int PowerMedicalData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerMedicalData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerMedicalData, power_),
  };
  PowerMedicalData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PowerMedicalData_descriptor_,
      PowerMedicalData::default_instance_,
      PowerMedicalData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerMedicalData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerMedicalData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PowerMedicalData));
  ActiveStruct_descriptor_ = file->message_type(2);
  static const int ActiveStruct_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveStruct, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveStruct, status_),
  };
  ActiveStruct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActiveStruct_descriptor_,
      ActiveStruct::default_instance_,
      ActiveStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveStruct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveStruct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActiveStruct));
  CGOpenActive_descriptor_ = file->message_type(3);
  static const int CGOpenActive_offsets_[1] = {
  };
  CGOpenActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGOpenActive_descriptor_,
      CGOpenActive::default_instance_,
      CGOpenActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpenActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpenActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGOpenActive));
  GCOpenActiveBack_descriptor_ = file->message_type(4);
  static const int GCOpenActiveBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenActiveBack, sumact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenActiveBack, activedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenActiveBack, actiestruct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenActiveBack, resetflag_),
  };
  GCOpenActiveBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCOpenActiveBack_descriptor_,
      GCOpenActiveBack::default_instance_,
      GCOpenActiveBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenActiveBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenActiveBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCOpenActiveBack));
  CGGetActiveReward_descriptor_ = file->message_type(5);
  static const int CGGetActiveReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetActiveReward, id_),
  };
  CGGetActiveReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetActiveReward_descriptor_,
      CGGetActiveReward::default_instance_,
      CGGetActiveReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetActiveReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetActiveReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetActiveReward));
  GCGetActiveRewardBack_descriptor_ = file->message_type(6);
  static const int GCGetActiveRewardBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetActiveRewardBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetActiveRewardBack, rewardid_),
  };
  GCGetActiveRewardBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetActiveRewardBack_descriptor_,
      GCGetActiveRewardBack::default_instance_,
      GCGetActiveRewardBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetActiveRewardBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetActiveRewardBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetActiveRewardBack));
  CGGetPowerMedical_descriptor_ = file->message_type(7);
  static const int CGGetPowerMedical_offsets_[1] = {
  };
  CGGetPowerMedical_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetPowerMedical_descriptor_,
      CGGetPowerMedical::default_instance_,
      CGGetPowerMedical_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPowerMedical, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPowerMedical, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetPowerMedical));
  GCGetPowerMedicalBack_descriptor_ = file->message_type(8);
  static const int GCGetPowerMedicalBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetPowerMedicalBack, powermedicaldata_),
  };
  GCGetPowerMedicalBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetPowerMedicalBack_descriptor_,
      GCGetPowerMedicalBack::default_instance_,
      GCGetPowerMedicalBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetPowerMedicalBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetPowerMedicalBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetPowerMedicalBack));
  CGDeepThinkOperation_descriptor_ = file->message_type(9);
  static const int CGDeepThinkOperation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDeepThinkOperation, type_),
  };
  CGDeepThinkOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGDeepThinkOperation_descriptor_,
      CGDeepThinkOperation::default_instance_,
      CGDeepThinkOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDeepThinkOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDeepThinkOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGDeepThinkOperation));
  GCDeepThinkOperationBack_descriptor_ = file->message_type(10);
  static const int GCDeepThinkOperationBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeepThinkOperationBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeepThinkOperationBack, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeepThinkOperationBack, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeepThinkOperationBack, duration_),
  };
  GCDeepThinkOperationBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDeepThinkOperationBack_descriptor_,
      GCDeepThinkOperationBack::default_instance_,
      GCDeepThinkOperationBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeepThinkOperationBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeepThinkOperationBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDeepThinkOperationBack));
  CGGetDeepThinkExp_descriptor_ = file->message_type(11);
  static const int CGGetDeepThinkExp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetDeepThinkExp, mult_),
  };
  CGGetDeepThinkExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetDeepThinkExp_descriptor_,
      CGGetDeepThinkExp::default_instance_,
      CGGetDeepThinkExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetDeepThinkExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetDeepThinkExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetDeepThinkExp));
  GCGetDeepThinkExpBack_descriptor_ = file->message_type(12);
  static const int GCGetDeepThinkExpBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetDeepThinkExpBack, flag_),
  };
  GCGetDeepThinkExpBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetDeepThinkExpBack_descriptor_,
      GCGetDeepThinkExpBack::default_instance_,
      GCGetDeepThinkExpBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetDeepThinkExpBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetDeepThinkExpBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetDeepThinkExpBack));
  GCBroadcastSystemNotice_descriptor_ = file->message_type(13);
  static const int GCBroadcastSystemNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBroadcastSystemNotice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBroadcastSystemNotice, lauid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBroadcastSystemNotice, param_),
  };
  GCBroadcastSystemNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCBroadcastSystemNotice_descriptor_,
      GCBroadcastSystemNotice::default_instance_,
      GCBroadcastSystemNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBroadcastSystemNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBroadcastSystemNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCBroadcastSystemNotice));
  GCPushNextDayReward_descriptor_ = file->message_type(14);
  static const int GCPushNextDayReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushNextDayReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushNextDayReward, gettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushNextDayReward, servertime_),
  };
  GCPushNextDayReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPushNextDayReward_descriptor_,
      GCPushNextDayReward::default_instance_,
      GCPushNextDayReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushNextDayReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushNextDayReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPushNextDayReward));
  CGGetNextDayReward_descriptor_ = file->message_type(15);
  static const int CGGetNextDayReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetNextDayReward, id_),
  };
  CGGetNextDayReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetNextDayReward_descriptor_,
      CGGetNextDayReward::default_instance_,
      CGGetNextDayReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetNextDayReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetNextDayReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetNextDayReward));
  GCGetNextDayRewardBack_descriptor_ = file->message_type(16);
  static const int GCGetNextDayRewardBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetNextDayRewardBack, flag_),
  };
  GCGetNextDayRewardBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetNextDayRewardBack_descriptor_,
      GCGetNextDayRewardBack::default_instance_,
      GCGetNextDayRewardBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetNextDayRewardBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetNextDayRewardBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetNextDayRewardBack));
  CGGetCDKReward_descriptor_ = file->message_type(17);
  static const int CGGetCDKReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCDKReward, cdk_),
  };
  CGGetCDKReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetCDKReward_descriptor_,
      CGGetCDKReward::default_instance_,
      CGGetCDKReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCDKReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCDKReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetCDKReward));
  GCGetCDKRewardBack_descriptor_ = file->message_type(18);
  static const int GCGetCDKRewardBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetCDKRewardBack, flag_),
  };
  GCGetCDKRewardBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetCDKRewardBack_descriptor_,
      GCGetCDKRewardBack::default_instance_,
      GCGetCDKRewardBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetCDKRewardBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetCDKRewardBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetCDKRewardBack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VitalityMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActiveData_descriptor_, &ActiveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PowerMedicalData_descriptor_, &PowerMedicalData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActiveStruct_descriptor_, &ActiveStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGOpenActive_descriptor_, &CGOpenActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCOpenActiveBack_descriptor_, &GCOpenActiveBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetActiveReward_descriptor_, &CGGetActiveReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetActiveRewardBack_descriptor_, &GCGetActiveRewardBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetPowerMedical_descriptor_, &CGGetPowerMedical::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetPowerMedicalBack_descriptor_, &GCGetPowerMedicalBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGDeepThinkOperation_descriptor_, &CGDeepThinkOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDeepThinkOperationBack_descriptor_, &GCDeepThinkOperationBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetDeepThinkExp_descriptor_, &CGGetDeepThinkExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetDeepThinkExpBack_descriptor_, &GCGetDeepThinkExpBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCBroadcastSystemNotice_descriptor_, &GCBroadcastSystemNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPushNextDayReward_descriptor_, &GCPushNextDayReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetNextDayReward_descriptor_, &CGGetNextDayReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetNextDayRewardBack_descriptor_, &GCGetNextDayRewardBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetCDKReward_descriptor_, &CGGetCDKReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetCDKRewardBack_descriptor_, &GCGetCDKRewardBack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VitalityMessage_2eproto() {
  delete ActiveData::default_instance_;
  delete ActiveData_reflection_;
  delete PowerMedicalData::default_instance_;
  delete PowerMedicalData_reflection_;
  delete ActiveStruct::default_instance_;
  delete ActiveStruct_reflection_;
  delete CGOpenActive::default_instance_;
  delete CGOpenActive_reflection_;
  delete GCOpenActiveBack::default_instance_;
  delete GCOpenActiveBack_reflection_;
  delete CGGetActiveReward::default_instance_;
  delete CGGetActiveReward_reflection_;
  delete GCGetActiveRewardBack::default_instance_;
  delete GCGetActiveRewardBack_reflection_;
  delete CGGetPowerMedical::default_instance_;
  delete CGGetPowerMedical_reflection_;
  delete GCGetPowerMedicalBack::default_instance_;
  delete GCGetPowerMedicalBack_reflection_;
  delete CGDeepThinkOperation::default_instance_;
  delete CGDeepThinkOperation_reflection_;
  delete GCDeepThinkOperationBack::default_instance_;
  delete GCDeepThinkOperationBack_reflection_;
  delete CGGetDeepThinkExp::default_instance_;
  delete CGGetDeepThinkExp_reflection_;
  delete GCGetDeepThinkExpBack::default_instance_;
  delete GCGetDeepThinkExpBack_reflection_;
  delete GCBroadcastSystemNotice::default_instance_;
  delete GCBroadcastSystemNotice_reflection_;
  delete GCPushNextDayReward::default_instance_;
  delete GCPushNextDayReward_reflection_;
  delete CGGetNextDayReward::default_instance_;
  delete CGGetNextDayReward_reflection_;
  delete GCGetNextDayRewardBack::default_instance_;
  delete GCGetNextDayRewardBack_reflection_;
  delete CGGetCDKReward::default_instance_;
  delete CGGetCDKReward_reflection_;
  delete GCGetCDKRewardBack::default_instance_;
  delete GCGetCDKRewardBack_reflection_;
}

void protobuf_AddDesc_VitalityMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025VitalityMessage.proto\032\022InnerMessage.pr"
    "oto\"u\n\nActiveData\022\n\n\002id\030\001 \001(\005\022\r\n\005count\030\002"
    " \001(\005\022\022\n\ntotalCount\030\003 \001(\005\022\023\n\013activeState\030"
    "\004 \001(\005\022\020\n\010opentime\030\005 \001(\003\022\021\n\topenlevel\030\006 \001"
    "(\005\"-\n\020PowerMedicalData\022\n\n\002id\030\001 \001(\005\022\r\n\005po"
    "wer\030\002 \001(\005\"0\n\014ActiveStruct\022\020\n\010rewardid\030\001 "
    "\001(\005\022\016\n\006status\030\002 \001(\005\"\016\n\014CGOpenActive\"z\n\020G"
    "COpenActiveBack\022\016\n\006sumact\030\001 \001(\005\022\037\n\nactiv"
    "edata\030\002 \003(\0132\013.ActiveData\022\"\n\013actiestruct\030"
    "\003 \003(\0132\r.ActiveStruct\022\021\n\tresetFlag\030\004 \001(\005\""
    "\037\n\021CGGetActiveReward\022\n\n\002id\030\001 \001(\005\"7\n\025GCGe"
    "tActiveRewardBack\022\014\n\004flag\030\001 \001(\005\022\020\n\010rewar"
    "did\030\002 \001(\005\"\023\n\021CGGetPowerMedical\"D\n\025GCGetP"
    "owerMedicalBack\022+\n\020powerMedicalData\030\001 \003("
    "\0132\021.PowerMedicalData\"$\n\024CGDeepThinkOpera"
    "tion\022\014\n\004type\030\001 \001(\005\"^\n\030GCDeepThinkOperati"
    "onBack\022\014\n\004type\030\001 \001(\005\022\021\n\tstarttime\030\002 \001(\003\022"
    "\017\n\007endtime\030\003 \001(\003\022\020\n\010duration\030\004 \001(\003\"!\n\021CG"
    "GetDeepThinkExp\022\014\n\004mult\030\001 \001(\005\"%\n\025GCGetDe"
    "epThinkExpBack\022\014\n\004flag\030\001 \001(\005\"E\n\027GCBroadc"
    "astSystemNotice\022\014\n\004type\030\001 \001(\005\022\r\n\005lauId\030\002"
    " \001(\005\022\r\n\005param\030\003 \003(\t\"F\n\023GCPushNextDayRewa"
    "rd\022\n\n\002id\030\001 \001(\005\022\017\n\007gettime\030\002 \001(\003\022\022\n\nserve"
    "rtime\030\003 \001(\003\" \n\022CGGetNextDayReward\022\n\n\002id\030"
    "\001 \001(\005\"&\n\026GCGetNextDayRewardBack\022\014\n\004flag\030"
    "\001 \001(\005\"\035\n\016CGGetCDKReward\022\013\n\003cdk\030\001 \001(\t\"\"\n\022"
    "GCGetCDKRewardBack\022\014\n\004flag\030\001 \001(\005B\031\n\027com."
    "mile.common.message", 1099);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VitalityMessage.proto", &protobuf_RegisterTypes);
  ActiveData::default_instance_ = new ActiveData();
  PowerMedicalData::default_instance_ = new PowerMedicalData();
  ActiveStruct::default_instance_ = new ActiveStruct();
  CGOpenActive::default_instance_ = new CGOpenActive();
  GCOpenActiveBack::default_instance_ = new GCOpenActiveBack();
  CGGetActiveReward::default_instance_ = new CGGetActiveReward();
  GCGetActiveRewardBack::default_instance_ = new GCGetActiveRewardBack();
  CGGetPowerMedical::default_instance_ = new CGGetPowerMedical();
  GCGetPowerMedicalBack::default_instance_ = new GCGetPowerMedicalBack();
  CGDeepThinkOperation::default_instance_ = new CGDeepThinkOperation();
  GCDeepThinkOperationBack::default_instance_ = new GCDeepThinkOperationBack();
  CGGetDeepThinkExp::default_instance_ = new CGGetDeepThinkExp();
  GCGetDeepThinkExpBack::default_instance_ = new GCGetDeepThinkExpBack();
  GCBroadcastSystemNotice::default_instance_ = new GCBroadcastSystemNotice();
  GCPushNextDayReward::default_instance_ = new GCPushNextDayReward();
  CGGetNextDayReward::default_instance_ = new CGGetNextDayReward();
  GCGetNextDayRewardBack::default_instance_ = new GCGetNextDayRewardBack();
  CGGetCDKReward::default_instance_ = new CGGetCDKReward();
  GCGetCDKRewardBack::default_instance_ = new GCGetCDKRewardBack();
  ActiveData::default_instance_->InitAsDefaultInstance();
  PowerMedicalData::default_instance_->InitAsDefaultInstance();
  ActiveStruct::default_instance_->InitAsDefaultInstance();
  CGOpenActive::default_instance_->InitAsDefaultInstance();
  GCOpenActiveBack::default_instance_->InitAsDefaultInstance();
  CGGetActiveReward::default_instance_->InitAsDefaultInstance();
  GCGetActiveRewardBack::default_instance_->InitAsDefaultInstance();
  CGGetPowerMedical::default_instance_->InitAsDefaultInstance();
  GCGetPowerMedicalBack::default_instance_->InitAsDefaultInstance();
  CGDeepThinkOperation::default_instance_->InitAsDefaultInstance();
  GCDeepThinkOperationBack::default_instance_->InitAsDefaultInstance();
  CGGetDeepThinkExp::default_instance_->InitAsDefaultInstance();
  GCGetDeepThinkExpBack::default_instance_->InitAsDefaultInstance();
  GCBroadcastSystemNotice::default_instance_->InitAsDefaultInstance();
  GCPushNextDayReward::default_instance_->InitAsDefaultInstance();
  CGGetNextDayReward::default_instance_->InitAsDefaultInstance();
  GCGetNextDayRewardBack::default_instance_->InitAsDefaultInstance();
  CGGetCDKReward::default_instance_->InitAsDefaultInstance();
  GCGetCDKRewardBack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VitalityMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VitalityMessage_2eproto {
  StaticDescriptorInitializer_VitalityMessage_2eproto() {
    protobuf_AddDesc_VitalityMessage_2eproto();
  }
} static_descriptor_initializer_VitalityMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ActiveData::kIdFieldNumber;
const int ActiveData::kCountFieldNumber;
const int ActiveData::kTotalCountFieldNumber;
const int ActiveData::kActiveStateFieldNumber;
const int ActiveData::kOpentimeFieldNumber;
const int ActiveData::kOpenlevelFieldNumber;
#endif  // !_MSC_VER

ActiveData::ActiveData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActiveData)
}

void ActiveData::InitAsDefaultInstance() {
}

ActiveData::ActiveData(const ActiveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActiveData)
}

void ActiveData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  totalcount_ = 0;
  activestate_ = 0;
  opentime_ = GOOGLE_LONGLONG(0);
  openlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActiveData::~ActiveData() {
  // @@protoc_insertion_point(destructor:ActiveData)
  SharedDtor();
}

void ActiveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActiveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActiveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActiveData_descriptor_;
}

const ActiveData& ActiveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

ActiveData* ActiveData::default_instance_ = NULL;

ActiveData* ActiveData::New() const {
  return new ActiveData;
}

void ActiveData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActiveData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, openlevel_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActiveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActiveData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalCount;
        break;
      }

      // optional int32 totalCount = 3;
      case 3: {
        if (tag == 24) {
         parse_totalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_activeState;
        break;
      }

      // optional int32 activeState = 4;
      case 4: {
        if (tag == 32) {
         parse_activeState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activestate_)));
          set_has_activestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_opentime;
        break;
      }

      // optional int64 opentime = 5;
      case 5: {
        if (tag == 40) {
         parse_opentime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_openlevel;
        break;
      }

      // optional int32 openlevel = 6;
      case 6: {
        if (tag == 48) {
         parse_openlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openlevel_)));
          set_has_openlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActiveData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActiveData)
  return false;
#undef DO_
}

void ActiveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActiveData)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional int32 totalCount = 3;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalcount(), output);
  }

  // optional int32 activeState = 4;
  if (has_activestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->activestate(), output);
  }

  // optional int64 opentime = 5;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->opentime(), output);
  }

  // optional int32 openlevel = 6;
  if (has_openlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->openlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActiveData)
}

::google::protobuf::uint8* ActiveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActiveData)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional int32 totalCount = 3;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalcount(), target);
  }

  // optional int32 activeState = 4;
  if (has_activestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->activestate(), target);
  }

  // optional int64 opentime = 5;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->opentime(), target);
  }

  // optional int32 openlevel = 6;
  if (has_openlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->openlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActiveData)
  return target;
}

int ActiveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 totalCount = 3;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

    // optional int32 activeState = 4;
    if (has_activestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activestate());
    }

    // optional int64 opentime = 5;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->opentime());
    }

    // optional int32 openlevel = 6;
    if (has_openlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActiveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActiveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActiveData::MergeFrom(const ActiveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
    if (from.has_activestate()) {
      set_activestate(from.activestate());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_openlevel()) {
      set_openlevel(from.openlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActiveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveData::CopyFrom(const ActiveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveData::IsInitialized() const {

  return true;
}

void ActiveData::Swap(ActiveData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(totalcount_, other->totalcount_);
    std::swap(activestate_, other->activestate_);
    std::swap(opentime_, other->opentime_);
    std::swap(openlevel_, other->openlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActiveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActiveData_descriptor_;
  metadata.reflection = ActiveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PowerMedicalData::kIdFieldNumber;
const int PowerMedicalData::kPowerFieldNumber;
#endif  // !_MSC_VER

PowerMedicalData::PowerMedicalData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PowerMedicalData)
}

void PowerMedicalData::InitAsDefaultInstance() {
}

PowerMedicalData::PowerMedicalData(const PowerMedicalData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PowerMedicalData)
}

void PowerMedicalData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerMedicalData::~PowerMedicalData() {
  // @@protoc_insertion_point(destructor:PowerMedicalData)
  SharedDtor();
}

void PowerMedicalData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PowerMedicalData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerMedicalData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerMedicalData_descriptor_;
}

const PowerMedicalData& PowerMedicalData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

PowerMedicalData* PowerMedicalData::default_instance_ = NULL;

PowerMedicalData* PowerMedicalData::New() const {
  return new PowerMedicalData;
}

void PowerMedicalData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PowerMedicalData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, power_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PowerMedicalData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PowerMedicalData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_power;
        break;
      }

      // optional int32 power = 2;
      case 2: {
        if (tag == 16) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PowerMedicalData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PowerMedicalData)
  return false;
#undef DO_
}

void PowerMedicalData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PowerMedicalData)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 power = 2;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PowerMedicalData)
}

::google::protobuf::uint8* PowerMedicalData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PowerMedicalData)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 power = 2;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PowerMedicalData)
  return target;
}

int PowerMedicalData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 power = 2;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerMedicalData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PowerMedicalData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PowerMedicalData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PowerMedicalData::MergeFrom(const PowerMedicalData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PowerMedicalData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerMedicalData::CopyFrom(const PowerMedicalData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerMedicalData::IsInitialized() const {

  return true;
}

void PowerMedicalData::Swap(PowerMedicalData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PowerMedicalData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerMedicalData_descriptor_;
  metadata.reflection = PowerMedicalData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActiveStruct::kRewardidFieldNumber;
const int ActiveStruct::kStatusFieldNumber;
#endif  // !_MSC_VER

ActiveStruct::ActiveStruct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActiveStruct)
}

void ActiveStruct::InitAsDefaultInstance() {
}

ActiveStruct::ActiveStruct(const ActiveStruct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActiveStruct)
}

void ActiveStruct::SharedCtor() {
  _cached_size_ = 0;
  rewardid_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActiveStruct::~ActiveStruct() {
  // @@protoc_insertion_point(destructor:ActiveStruct)
  SharedDtor();
}

void ActiveStruct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActiveStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActiveStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActiveStruct_descriptor_;
}

const ActiveStruct& ActiveStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

ActiveStruct* ActiveStruct::default_instance_ = NULL;

ActiveStruct* ActiveStruct::New() const {
  return new ActiveStruct;
}

void ActiveStruct::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActiveStruct*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rewardid_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActiveStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActiveStruct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rewardid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActiveStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActiveStruct)
  return false;
#undef DO_
}

void ActiveStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActiveStruct)
  // optional int32 rewardid = 1;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rewardid(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActiveStruct)
}

::google::protobuf::uint8* ActiveStruct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActiveStruct)
  // optional int32 rewardid = 1;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rewardid(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActiveStruct)
  return target;
}

int ActiveStruct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rewardid = 1;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardid());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveStruct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActiveStruct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActiveStruct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActiveStruct::MergeFrom(const ActiveStruct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActiveStruct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveStruct::CopyFrom(const ActiveStruct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveStruct::IsInitialized() const {

  return true;
}

void ActiveStruct::Swap(ActiveStruct* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActiveStruct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActiveStruct_descriptor_;
  metadata.reflection = ActiveStruct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGOpenActive::CGOpenActive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGOpenActive)
}

void CGOpenActive::InitAsDefaultInstance() {
}

CGOpenActive::CGOpenActive(const CGOpenActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGOpenActive)
}

void CGOpenActive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGOpenActive::~CGOpenActive() {
  // @@protoc_insertion_point(destructor:CGOpenActive)
  SharedDtor();
}

void CGOpenActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGOpenActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGOpenActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGOpenActive_descriptor_;
}

const CGOpenActive& CGOpenActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

CGOpenActive* CGOpenActive::default_instance_ = NULL;

CGOpenActive* CGOpenActive::New() const {
  return new CGOpenActive;
}

void CGOpenActive::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGOpenActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGOpenActive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGOpenActive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGOpenActive)
  return false;
#undef DO_
}

void CGOpenActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGOpenActive)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGOpenActive)
}

::google::protobuf::uint8* CGOpenActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGOpenActive)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGOpenActive)
  return target;
}

int CGOpenActive::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGOpenActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGOpenActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGOpenActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGOpenActive::MergeFrom(const CGOpenActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGOpenActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGOpenActive::CopyFrom(const CGOpenActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOpenActive::IsInitialized() const {

  return true;
}

void CGOpenActive::Swap(CGOpenActive* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGOpenActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGOpenActive_descriptor_;
  metadata.reflection = CGOpenActive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCOpenActiveBack::kSumactFieldNumber;
const int GCOpenActiveBack::kActivedataFieldNumber;
const int GCOpenActiveBack::kActiestructFieldNumber;
const int GCOpenActiveBack::kResetFlagFieldNumber;
#endif  // !_MSC_VER

GCOpenActiveBack::GCOpenActiveBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCOpenActiveBack)
}

void GCOpenActiveBack::InitAsDefaultInstance() {
}

GCOpenActiveBack::GCOpenActiveBack(const GCOpenActiveBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCOpenActiveBack)
}

void GCOpenActiveBack::SharedCtor() {
  _cached_size_ = 0;
  sumact_ = 0;
  resetflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCOpenActiveBack::~GCOpenActiveBack() {
  // @@protoc_insertion_point(destructor:GCOpenActiveBack)
  SharedDtor();
}

void GCOpenActiveBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCOpenActiveBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCOpenActiveBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCOpenActiveBack_descriptor_;
}

const GCOpenActiveBack& GCOpenActiveBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

GCOpenActiveBack* GCOpenActiveBack::default_instance_ = NULL;

GCOpenActiveBack* GCOpenActiveBack::New() const {
  return new GCOpenActiveBack;
}

void GCOpenActiveBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCOpenActiveBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sumact_, resetflag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  activedata_.Clear();
  actiestruct_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCOpenActiveBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCOpenActiveBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sumact = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sumact_)));
          set_has_sumact();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_activedata;
        break;
      }

      // repeated .ActiveData activedata = 2;
      case 2: {
        if (tag == 18) {
         parse_activedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_activedata;
        if (input->ExpectTag(26)) goto parse_actiestruct;
        break;
      }

      // repeated .ActiveStruct actiestruct = 3;
      case 3: {
        if (tag == 26) {
         parse_actiestruct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actiestruct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_actiestruct;
        if (input->ExpectTag(32)) goto parse_resetFlag;
        break;
      }

      // optional int32 resetFlag = 4;
      case 4: {
        if (tag == 32) {
         parse_resetFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resetflag_)));
          set_has_resetflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCOpenActiveBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCOpenActiveBack)
  return false;
#undef DO_
}

void GCOpenActiveBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCOpenActiveBack)
  // optional int32 sumact = 1;
  if (has_sumact()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sumact(), output);
  }

  // repeated .ActiveData activedata = 2;
  for (int i = 0; i < this->activedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->activedata(i), output);
  }

  // repeated .ActiveStruct actiestruct = 3;
  for (int i = 0; i < this->actiestruct_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->actiestruct(i), output);
  }

  // optional int32 resetFlag = 4;
  if (has_resetflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->resetflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCOpenActiveBack)
}

::google::protobuf::uint8* GCOpenActiveBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCOpenActiveBack)
  // optional int32 sumact = 1;
  if (has_sumact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sumact(), target);
  }

  // repeated .ActiveData activedata = 2;
  for (int i = 0; i < this->activedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->activedata(i), target);
  }

  // repeated .ActiveStruct actiestruct = 3;
  for (int i = 0; i < this->actiestruct_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->actiestruct(i), target);
  }

  // optional int32 resetFlag = 4;
  if (has_resetflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->resetflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCOpenActiveBack)
  return target;
}

int GCOpenActiveBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sumact = 1;
    if (has_sumact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sumact());
    }

    // optional int32 resetFlag = 4;
    if (has_resetflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resetflag());
    }

  }
  // repeated .ActiveData activedata = 2;
  total_size += 1 * this->activedata_size();
  for (int i = 0; i < this->activedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activedata(i));
  }

  // repeated .ActiveStruct actiestruct = 3;
  total_size += 1 * this->actiestruct_size();
  for (int i = 0; i < this->actiestruct_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actiestruct(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCOpenActiveBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCOpenActiveBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCOpenActiveBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCOpenActiveBack::MergeFrom(const GCOpenActiveBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  activedata_.MergeFrom(from.activedata_);
  actiestruct_.MergeFrom(from.actiestruct_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sumact()) {
      set_sumact(from.sumact());
    }
    if (from.has_resetflag()) {
      set_resetflag(from.resetflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCOpenActiveBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCOpenActiveBack::CopyFrom(const GCOpenActiveBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCOpenActiveBack::IsInitialized() const {

  return true;
}

void GCOpenActiveBack::Swap(GCOpenActiveBack* other) {
  if (other != this) {
    std::swap(sumact_, other->sumact_);
    activedata_.Swap(&other->activedata_);
    actiestruct_.Swap(&other->actiestruct_);
    std::swap(resetflag_, other->resetflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCOpenActiveBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCOpenActiveBack_descriptor_;
  metadata.reflection = GCOpenActiveBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetActiveReward::kIdFieldNumber;
#endif  // !_MSC_VER

CGGetActiveReward::CGGetActiveReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetActiveReward)
}

void CGGetActiveReward::InitAsDefaultInstance() {
}

CGGetActiveReward::CGGetActiveReward(const CGGetActiveReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetActiveReward)
}

void CGGetActiveReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetActiveReward::~CGGetActiveReward() {
  // @@protoc_insertion_point(destructor:CGGetActiveReward)
  SharedDtor();
}

void CGGetActiveReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetActiveReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetActiveReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetActiveReward_descriptor_;
}

const CGGetActiveReward& CGGetActiveReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

CGGetActiveReward* CGGetActiveReward::default_instance_ = NULL;

CGGetActiveReward* CGGetActiveReward::New() const {
  return new CGGetActiveReward;
}

void CGGetActiveReward::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetActiveReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetActiveReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetActiveReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetActiveReward)
  return false;
#undef DO_
}

void CGGetActiveReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetActiveReward)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetActiveReward)
}

::google::protobuf::uint8* CGGetActiveReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetActiveReward)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetActiveReward)
  return target;
}

int CGGetActiveReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetActiveReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetActiveReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetActiveReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetActiveReward::MergeFrom(const CGGetActiveReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetActiveReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetActiveReward::CopyFrom(const CGGetActiveReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetActiveReward::IsInitialized() const {

  return true;
}

void CGGetActiveReward::Swap(CGGetActiveReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetActiveReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetActiveReward_descriptor_;
  metadata.reflection = CGGetActiveReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetActiveRewardBack::kFlagFieldNumber;
const int GCGetActiveRewardBack::kRewardidFieldNumber;
#endif  // !_MSC_VER

GCGetActiveRewardBack::GCGetActiveRewardBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetActiveRewardBack)
}

void GCGetActiveRewardBack::InitAsDefaultInstance() {
}

GCGetActiveRewardBack::GCGetActiveRewardBack(const GCGetActiveRewardBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetActiveRewardBack)
}

void GCGetActiveRewardBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  rewardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetActiveRewardBack::~GCGetActiveRewardBack() {
  // @@protoc_insertion_point(destructor:GCGetActiveRewardBack)
  SharedDtor();
}

void GCGetActiveRewardBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetActiveRewardBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetActiveRewardBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetActiveRewardBack_descriptor_;
}

const GCGetActiveRewardBack& GCGetActiveRewardBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

GCGetActiveRewardBack* GCGetActiveRewardBack::default_instance_ = NULL;

GCGetActiveRewardBack* GCGetActiveRewardBack::New() const {
  return new GCGetActiveRewardBack;
}

void GCGetActiveRewardBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGetActiveRewardBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(flag_, rewardid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetActiveRewardBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetActiveRewardBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rewardid;
        break;
      }

      // optional int32 rewardid = 2;
      case 2: {
        if (tag == 16) {
         parse_rewardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetActiveRewardBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetActiveRewardBack)
  return false;
#undef DO_
}

void GCGetActiveRewardBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetActiveRewardBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 rewardid = 2;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetActiveRewardBack)
}

::google::protobuf::uint8* GCGetActiveRewardBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetActiveRewardBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 rewardid = 2;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetActiveRewardBack)
  return target;
}

int GCGetActiveRewardBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 rewardid = 2;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetActiveRewardBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetActiveRewardBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetActiveRewardBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetActiveRewardBack::MergeFrom(const GCGetActiveRewardBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetActiveRewardBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetActiveRewardBack::CopyFrom(const GCGetActiveRewardBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetActiveRewardBack::IsInitialized() const {

  return true;
}

void GCGetActiveRewardBack::Swap(GCGetActiveRewardBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetActiveRewardBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetActiveRewardBack_descriptor_;
  metadata.reflection = GCGetActiveRewardBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGGetPowerMedical::CGGetPowerMedical()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetPowerMedical)
}

void CGGetPowerMedical::InitAsDefaultInstance() {
}

CGGetPowerMedical::CGGetPowerMedical(const CGGetPowerMedical& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetPowerMedical)
}

void CGGetPowerMedical::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetPowerMedical::~CGGetPowerMedical() {
  // @@protoc_insertion_point(destructor:CGGetPowerMedical)
  SharedDtor();
}

void CGGetPowerMedical::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetPowerMedical::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetPowerMedical::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetPowerMedical_descriptor_;
}

const CGGetPowerMedical& CGGetPowerMedical::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

CGGetPowerMedical* CGGetPowerMedical::default_instance_ = NULL;

CGGetPowerMedical* CGGetPowerMedical::New() const {
  return new CGGetPowerMedical;
}

void CGGetPowerMedical::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetPowerMedical::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetPowerMedical)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetPowerMedical)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetPowerMedical)
  return false;
#undef DO_
}

void CGGetPowerMedical::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetPowerMedical)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetPowerMedical)
}

::google::protobuf::uint8* CGGetPowerMedical::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetPowerMedical)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetPowerMedical)
  return target;
}

int CGGetPowerMedical::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetPowerMedical::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetPowerMedical* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetPowerMedical*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetPowerMedical::MergeFrom(const CGGetPowerMedical& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetPowerMedical::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetPowerMedical::CopyFrom(const CGGetPowerMedical& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetPowerMedical::IsInitialized() const {

  return true;
}

void CGGetPowerMedical::Swap(CGGetPowerMedical* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetPowerMedical::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetPowerMedical_descriptor_;
  metadata.reflection = CGGetPowerMedical_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetPowerMedicalBack::kPowerMedicalDataFieldNumber;
#endif  // !_MSC_VER

GCGetPowerMedicalBack::GCGetPowerMedicalBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetPowerMedicalBack)
}

void GCGetPowerMedicalBack::InitAsDefaultInstance() {
}

GCGetPowerMedicalBack::GCGetPowerMedicalBack(const GCGetPowerMedicalBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetPowerMedicalBack)
}

void GCGetPowerMedicalBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetPowerMedicalBack::~GCGetPowerMedicalBack() {
  // @@protoc_insertion_point(destructor:GCGetPowerMedicalBack)
  SharedDtor();
}

void GCGetPowerMedicalBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetPowerMedicalBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetPowerMedicalBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetPowerMedicalBack_descriptor_;
}

const GCGetPowerMedicalBack& GCGetPowerMedicalBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

GCGetPowerMedicalBack* GCGetPowerMedicalBack::default_instance_ = NULL;

GCGetPowerMedicalBack* GCGetPowerMedicalBack::New() const {
  return new GCGetPowerMedicalBack;
}

void GCGetPowerMedicalBack::Clear() {
  powermedicaldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetPowerMedicalBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetPowerMedicalBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PowerMedicalData powerMedicalData = 1;
      case 1: {
        if (tag == 10) {
         parse_powerMedicalData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_powermedicaldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_powerMedicalData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetPowerMedicalBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetPowerMedicalBack)
  return false;
#undef DO_
}

void GCGetPowerMedicalBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetPowerMedicalBack)
  // repeated .PowerMedicalData powerMedicalData = 1;
  for (int i = 0; i < this->powermedicaldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->powermedicaldata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetPowerMedicalBack)
}

::google::protobuf::uint8* GCGetPowerMedicalBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetPowerMedicalBack)
  // repeated .PowerMedicalData powerMedicalData = 1;
  for (int i = 0; i < this->powermedicaldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->powermedicaldata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetPowerMedicalBack)
  return target;
}

int GCGetPowerMedicalBack::ByteSize() const {
  int total_size = 0;

  // repeated .PowerMedicalData powerMedicalData = 1;
  total_size += 1 * this->powermedicaldata_size();
  for (int i = 0; i < this->powermedicaldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->powermedicaldata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetPowerMedicalBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetPowerMedicalBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetPowerMedicalBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetPowerMedicalBack::MergeFrom(const GCGetPowerMedicalBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  powermedicaldata_.MergeFrom(from.powermedicaldata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetPowerMedicalBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetPowerMedicalBack::CopyFrom(const GCGetPowerMedicalBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetPowerMedicalBack::IsInitialized() const {

  return true;
}

void GCGetPowerMedicalBack::Swap(GCGetPowerMedicalBack* other) {
  if (other != this) {
    powermedicaldata_.Swap(&other->powermedicaldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetPowerMedicalBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetPowerMedicalBack_descriptor_;
  metadata.reflection = GCGetPowerMedicalBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGDeepThinkOperation::kTypeFieldNumber;
#endif  // !_MSC_VER

CGDeepThinkOperation::CGDeepThinkOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGDeepThinkOperation)
}

void CGDeepThinkOperation::InitAsDefaultInstance() {
}

CGDeepThinkOperation::CGDeepThinkOperation(const CGDeepThinkOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGDeepThinkOperation)
}

void CGDeepThinkOperation::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGDeepThinkOperation::~CGDeepThinkOperation() {
  // @@protoc_insertion_point(destructor:CGDeepThinkOperation)
  SharedDtor();
}

void CGDeepThinkOperation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGDeepThinkOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGDeepThinkOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGDeepThinkOperation_descriptor_;
}

const CGDeepThinkOperation& CGDeepThinkOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

CGDeepThinkOperation* CGDeepThinkOperation::default_instance_ = NULL;

CGDeepThinkOperation* CGDeepThinkOperation::New() const {
  return new CGDeepThinkOperation;
}

void CGDeepThinkOperation::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGDeepThinkOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGDeepThinkOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGDeepThinkOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGDeepThinkOperation)
  return false;
#undef DO_
}

void CGDeepThinkOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGDeepThinkOperation)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGDeepThinkOperation)
}

::google::protobuf::uint8* CGDeepThinkOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGDeepThinkOperation)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGDeepThinkOperation)
  return target;
}

int CGDeepThinkOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGDeepThinkOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGDeepThinkOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGDeepThinkOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGDeepThinkOperation::MergeFrom(const CGDeepThinkOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGDeepThinkOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGDeepThinkOperation::CopyFrom(const CGDeepThinkOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGDeepThinkOperation::IsInitialized() const {

  return true;
}

void CGDeepThinkOperation::Swap(CGDeepThinkOperation* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGDeepThinkOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGDeepThinkOperation_descriptor_;
  metadata.reflection = CGDeepThinkOperation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDeepThinkOperationBack::kTypeFieldNumber;
const int GCDeepThinkOperationBack::kStarttimeFieldNumber;
const int GCDeepThinkOperationBack::kEndtimeFieldNumber;
const int GCDeepThinkOperationBack::kDurationFieldNumber;
#endif  // !_MSC_VER

GCDeepThinkOperationBack::GCDeepThinkOperationBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDeepThinkOperationBack)
}

void GCDeepThinkOperationBack::InitAsDefaultInstance() {
}

GCDeepThinkOperationBack::GCDeepThinkOperationBack(const GCDeepThinkOperationBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDeepThinkOperationBack)
}

void GCDeepThinkOperationBack::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  duration_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDeepThinkOperationBack::~GCDeepThinkOperationBack() {
  // @@protoc_insertion_point(destructor:GCDeepThinkOperationBack)
  SharedDtor();
}

void GCDeepThinkOperationBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDeepThinkOperationBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDeepThinkOperationBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDeepThinkOperationBack_descriptor_;
}

const GCDeepThinkOperationBack& GCDeepThinkOperationBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

GCDeepThinkOperationBack* GCDeepThinkOperationBack::default_instance_ = NULL;

GCDeepThinkOperationBack* GCDeepThinkOperationBack::New() const {
  return new GCDeepThinkOperationBack;
}

void GCDeepThinkOperationBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCDeepThinkOperationBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(starttime_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDeepThinkOperationBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDeepThinkOperationBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_starttime;
        break;
      }

      // optional int64 starttime = 2;
      case 2: {
        if (tag == 16) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // optional int64 endtime = 3;
      case 3: {
        if (tag == 24) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_duration;
        break;
      }

      // optional int64 duration = 4;
      case 4: {
        if (tag == 32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDeepThinkOperationBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDeepThinkOperationBack)
  return false;
#undef DO_
}

void GCDeepThinkOperationBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDeepThinkOperationBack)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 starttime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->starttime(), output);
  }

  // optional int64 endtime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // optional int64 duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDeepThinkOperationBack)
}

::google::protobuf::uint8* GCDeepThinkOperationBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDeepThinkOperationBack)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 starttime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->starttime(), target);
  }

  // optional int64 endtime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // optional int64 duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDeepThinkOperationBack)
  return target;
}

int GCDeepThinkOperationBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 starttime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 endtime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int64 duration = 4;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDeepThinkOperationBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDeepThinkOperationBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDeepThinkOperationBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDeepThinkOperationBack::MergeFrom(const GCDeepThinkOperationBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDeepThinkOperationBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDeepThinkOperationBack::CopyFrom(const GCDeepThinkOperationBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDeepThinkOperationBack::IsInitialized() const {

  return true;
}

void GCDeepThinkOperationBack::Swap(GCDeepThinkOperationBack* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDeepThinkOperationBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDeepThinkOperationBack_descriptor_;
  metadata.reflection = GCDeepThinkOperationBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetDeepThinkExp::kMultFieldNumber;
#endif  // !_MSC_VER

CGGetDeepThinkExp::CGGetDeepThinkExp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetDeepThinkExp)
}

void CGGetDeepThinkExp::InitAsDefaultInstance() {
}

CGGetDeepThinkExp::CGGetDeepThinkExp(const CGGetDeepThinkExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetDeepThinkExp)
}

void CGGetDeepThinkExp::SharedCtor() {
  _cached_size_ = 0;
  mult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetDeepThinkExp::~CGGetDeepThinkExp() {
  // @@protoc_insertion_point(destructor:CGGetDeepThinkExp)
  SharedDtor();
}

void CGGetDeepThinkExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetDeepThinkExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetDeepThinkExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetDeepThinkExp_descriptor_;
}

const CGGetDeepThinkExp& CGGetDeepThinkExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

CGGetDeepThinkExp* CGGetDeepThinkExp::default_instance_ = NULL;

CGGetDeepThinkExp* CGGetDeepThinkExp::New() const {
  return new CGGetDeepThinkExp;
}

void CGGetDeepThinkExp::Clear() {
  mult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetDeepThinkExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetDeepThinkExp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mult = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mult_)));
          set_has_mult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetDeepThinkExp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetDeepThinkExp)
  return false;
#undef DO_
}

void CGGetDeepThinkExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetDeepThinkExp)
  // optional int32 mult = 1;
  if (has_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetDeepThinkExp)
}

::google::protobuf::uint8* CGGetDeepThinkExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetDeepThinkExp)
  // optional int32 mult = 1;
  if (has_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetDeepThinkExp)
  return target;
}

int CGGetDeepThinkExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mult = 1;
    if (has_mult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetDeepThinkExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetDeepThinkExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetDeepThinkExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetDeepThinkExp::MergeFrom(const CGGetDeepThinkExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mult()) {
      set_mult(from.mult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetDeepThinkExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetDeepThinkExp::CopyFrom(const CGGetDeepThinkExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetDeepThinkExp::IsInitialized() const {

  return true;
}

void CGGetDeepThinkExp::Swap(CGGetDeepThinkExp* other) {
  if (other != this) {
    std::swap(mult_, other->mult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetDeepThinkExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetDeepThinkExp_descriptor_;
  metadata.reflection = CGGetDeepThinkExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetDeepThinkExpBack::kFlagFieldNumber;
#endif  // !_MSC_VER

GCGetDeepThinkExpBack::GCGetDeepThinkExpBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetDeepThinkExpBack)
}

void GCGetDeepThinkExpBack::InitAsDefaultInstance() {
}

GCGetDeepThinkExpBack::GCGetDeepThinkExpBack(const GCGetDeepThinkExpBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetDeepThinkExpBack)
}

void GCGetDeepThinkExpBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetDeepThinkExpBack::~GCGetDeepThinkExpBack() {
  // @@protoc_insertion_point(destructor:GCGetDeepThinkExpBack)
  SharedDtor();
}

void GCGetDeepThinkExpBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetDeepThinkExpBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetDeepThinkExpBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetDeepThinkExpBack_descriptor_;
}

const GCGetDeepThinkExpBack& GCGetDeepThinkExpBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

GCGetDeepThinkExpBack* GCGetDeepThinkExpBack::default_instance_ = NULL;

GCGetDeepThinkExpBack* GCGetDeepThinkExpBack::New() const {
  return new GCGetDeepThinkExpBack;
}

void GCGetDeepThinkExpBack::Clear() {
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetDeepThinkExpBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetDeepThinkExpBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetDeepThinkExpBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetDeepThinkExpBack)
  return false;
#undef DO_
}

void GCGetDeepThinkExpBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetDeepThinkExpBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetDeepThinkExpBack)
}

::google::protobuf::uint8* GCGetDeepThinkExpBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetDeepThinkExpBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetDeepThinkExpBack)
  return target;
}

int GCGetDeepThinkExpBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetDeepThinkExpBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetDeepThinkExpBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetDeepThinkExpBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetDeepThinkExpBack::MergeFrom(const GCGetDeepThinkExpBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetDeepThinkExpBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetDeepThinkExpBack::CopyFrom(const GCGetDeepThinkExpBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetDeepThinkExpBack::IsInitialized() const {

  return true;
}

void GCGetDeepThinkExpBack::Swap(GCGetDeepThinkExpBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetDeepThinkExpBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetDeepThinkExpBack_descriptor_;
  metadata.reflection = GCGetDeepThinkExpBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCBroadcastSystemNotice::kTypeFieldNumber;
const int GCBroadcastSystemNotice::kLauIdFieldNumber;
const int GCBroadcastSystemNotice::kParamFieldNumber;
#endif  // !_MSC_VER

GCBroadcastSystemNotice::GCBroadcastSystemNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCBroadcastSystemNotice)
}

void GCBroadcastSystemNotice::InitAsDefaultInstance() {
}

GCBroadcastSystemNotice::GCBroadcastSystemNotice(const GCBroadcastSystemNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCBroadcastSystemNotice)
}

void GCBroadcastSystemNotice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  lauid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCBroadcastSystemNotice::~GCBroadcastSystemNotice() {
  // @@protoc_insertion_point(destructor:GCBroadcastSystemNotice)
  SharedDtor();
}

void GCBroadcastSystemNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCBroadcastSystemNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCBroadcastSystemNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCBroadcastSystemNotice_descriptor_;
}

const GCBroadcastSystemNotice& GCBroadcastSystemNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

GCBroadcastSystemNotice* GCBroadcastSystemNotice::default_instance_ = NULL;

GCBroadcastSystemNotice* GCBroadcastSystemNotice::New() const {
  return new GCBroadcastSystemNotice;
}

void GCBroadcastSystemNotice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCBroadcastSystemNotice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, lauid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCBroadcastSystemNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCBroadcastSystemNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lauId;
        break;
      }

      // optional int32 lauId = 2;
      case 2: {
        if (tag == 16) {
         parse_lauId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lauid_)));
          set_has_lauid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_param;
        break;
      }

      // repeated string param = 3;
      case 3: {
        if (tag == 26) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param(this->param_size() - 1).data(),
            this->param(this->param_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCBroadcastSystemNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCBroadcastSystemNotice)
  return false;
#undef DO_
}

void GCBroadcastSystemNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCBroadcastSystemNotice)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 lauId = 2;
  if (has_lauid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lauid(), output);
  }

  // repeated string param = 3;
  for (int i = 0; i < this->param_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->param(i).data(), this->param(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "param");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCBroadcastSystemNotice)
}

::google::protobuf::uint8* GCBroadcastSystemNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCBroadcastSystemNotice)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 lauId = 2;
  if (has_lauid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lauid(), target);
  }

  // repeated string param = 3;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCBroadcastSystemNotice)
  return target;
}

int GCBroadcastSystemNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 lauId = 2;
    if (has_lauid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lauid());
    }

  }
  // repeated string param = 3;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCBroadcastSystemNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCBroadcastSystemNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCBroadcastSystemNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCBroadcastSystemNotice::MergeFrom(const GCBroadcastSystemNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lauid()) {
      set_lauid(from.lauid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCBroadcastSystemNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCBroadcastSystemNotice::CopyFrom(const GCBroadcastSystemNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBroadcastSystemNotice::IsInitialized() const {

  return true;
}

void GCBroadcastSystemNotice::Swap(GCBroadcastSystemNotice* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(lauid_, other->lauid_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCBroadcastSystemNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCBroadcastSystemNotice_descriptor_;
  metadata.reflection = GCBroadcastSystemNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPushNextDayReward::kIdFieldNumber;
const int GCPushNextDayReward::kGettimeFieldNumber;
const int GCPushNextDayReward::kServertimeFieldNumber;
#endif  // !_MSC_VER

GCPushNextDayReward::GCPushNextDayReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPushNextDayReward)
}

void GCPushNextDayReward::InitAsDefaultInstance() {
}

GCPushNextDayReward::GCPushNextDayReward(const GCPushNextDayReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPushNextDayReward)
}

void GCPushNextDayReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  gettime_ = GOOGLE_LONGLONG(0);
  servertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPushNextDayReward::~GCPushNextDayReward() {
  // @@protoc_insertion_point(destructor:GCPushNextDayReward)
  SharedDtor();
}

void GCPushNextDayReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPushNextDayReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPushNextDayReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPushNextDayReward_descriptor_;
}

const GCPushNextDayReward& GCPushNextDayReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

GCPushNextDayReward* GCPushNextDayReward::default_instance_ = NULL;

GCPushNextDayReward* GCPushNextDayReward::New() const {
  return new GCPushNextDayReward;
}

void GCPushNextDayReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPushNextDayReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gettime_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPushNextDayReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPushNextDayReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gettime;
        break;
      }

      // optional int64 gettime = 2;
      case 2: {
        if (tag == 16) {
         parse_gettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gettime_)));
          set_has_gettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_servertime;
        break;
      }

      // optional int64 servertime = 3;
      case 3: {
        if (tag == 24) {
         parse_servertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPushNextDayReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPushNextDayReward)
  return false;
#undef DO_
}

void GCPushNextDayReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPushNextDayReward)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 gettime = 2;
  if (has_gettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gettime(), output);
  }

  // optional int64 servertime = 3;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->servertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPushNextDayReward)
}

::google::protobuf::uint8* GCPushNextDayReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPushNextDayReward)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 gettime = 2;
  if (has_gettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gettime(), target);
  }

  // optional int64 servertime = 3;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->servertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPushNextDayReward)
  return target;
}

int GCPushNextDayReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 gettime = 2;
    if (has_gettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gettime());
    }

    // optional int64 servertime = 3;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPushNextDayReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPushNextDayReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPushNextDayReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPushNextDayReward::MergeFrom(const GCPushNextDayReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gettime()) {
      set_gettime(from.gettime());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPushNextDayReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPushNextDayReward::CopyFrom(const GCPushNextDayReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPushNextDayReward::IsInitialized() const {

  return true;
}

void GCPushNextDayReward::Swap(GCPushNextDayReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gettime_, other->gettime_);
    std::swap(servertime_, other->servertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPushNextDayReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPushNextDayReward_descriptor_;
  metadata.reflection = GCPushNextDayReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetNextDayReward::kIdFieldNumber;
#endif  // !_MSC_VER

CGGetNextDayReward::CGGetNextDayReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetNextDayReward)
}

void CGGetNextDayReward::InitAsDefaultInstance() {
}

CGGetNextDayReward::CGGetNextDayReward(const CGGetNextDayReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetNextDayReward)
}

void CGGetNextDayReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetNextDayReward::~CGGetNextDayReward() {
  // @@protoc_insertion_point(destructor:CGGetNextDayReward)
  SharedDtor();
}

void CGGetNextDayReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetNextDayReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetNextDayReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetNextDayReward_descriptor_;
}

const CGGetNextDayReward& CGGetNextDayReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

CGGetNextDayReward* CGGetNextDayReward::default_instance_ = NULL;

CGGetNextDayReward* CGGetNextDayReward::New() const {
  return new CGGetNextDayReward;
}

void CGGetNextDayReward::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetNextDayReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetNextDayReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetNextDayReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetNextDayReward)
  return false;
#undef DO_
}

void CGGetNextDayReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetNextDayReward)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetNextDayReward)
}

::google::protobuf::uint8* CGGetNextDayReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetNextDayReward)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetNextDayReward)
  return target;
}

int CGGetNextDayReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetNextDayReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetNextDayReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetNextDayReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetNextDayReward::MergeFrom(const CGGetNextDayReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetNextDayReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetNextDayReward::CopyFrom(const CGGetNextDayReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetNextDayReward::IsInitialized() const {

  return true;
}

void CGGetNextDayReward::Swap(CGGetNextDayReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetNextDayReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetNextDayReward_descriptor_;
  metadata.reflection = CGGetNextDayReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetNextDayRewardBack::kFlagFieldNumber;
#endif  // !_MSC_VER

GCGetNextDayRewardBack::GCGetNextDayRewardBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetNextDayRewardBack)
}

void GCGetNextDayRewardBack::InitAsDefaultInstance() {
}

GCGetNextDayRewardBack::GCGetNextDayRewardBack(const GCGetNextDayRewardBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetNextDayRewardBack)
}

void GCGetNextDayRewardBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetNextDayRewardBack::~GCGetNextDayRewardBack() {
  // @@protoc_insertion_point(destructor:GCGetNextDayRewardBack)
  SharedDtor();
}

void GCGetNextDayRewardBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetNextDayRewardBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetNextDayRewardBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetNextDayRewardBack_descriptor_;
}

const GCGetNextDayRewardBack& GCGetNextDayRewardBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

GCGetNextDayRewardBack* GCGetNextDayRewardBack::default_instance_ = NULL;

GCGetNextDayRewardBack* GCGetNextDayRewardBack::New() const {
  return new GCGetNextDayRewardBack;
}

void GCGetNextDayRewardBack::Clear() {
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetNextDayRewardBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetNextDayRewardBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetNextDayRewardBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetNextDayRewardBack)
  return false;
#undef DO_
}

void GCGetNextDayRewardBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetNextDayRewardBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetNextDayRewardBack)
}

::google::protobuf::uint8* GCGetNextDayRewardBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetNextDayRewardBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetNextDayRewardBack)
  return target;
}

int GCGetNextDayRewardBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetNextDayRewardBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetNextDayRewardBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetNextDayRewardBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetNextDayRewardBack::MergeFrom(const GCGetNextDayRewardBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetNextDayRewardBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetNextDayRewardBack::CopyFrom(const GCGetNextDayRewardBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetNextDayRewardBack::IsInitialized() const {

  return true;
}

void GCGetNextDayRewardBack::Swap(GCGetNextDayRewardBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetNextDayRewardBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetNextDayRewardBack_descriptor_;
  metadata.reflection = GCGetNextDayRewardBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetCDKReward::kCdkFieldNumber;
#endif  // !_MSC_VER

CGGetCDKReward::CGGetCDKReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetCDKReward)
}

void CGGetCDKReward::InitAsDefaultInstance() {
}

CGGetCDKReward::CGGetCDKReward(const CGGetCDKReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetCDKReward)
}

void CGGetCDKReward::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cdk_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetCDKReward::~CGGetCDKReward() {
  // @@protoc_insertion_point(destructor:CGGetCDKReward)
  SharedDtor();
}

void CGGetCDKReward::SharedDtor() {
  if (cdk_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cdk_;
  }
  if (this != default_instance_) {
  }
}

void CGGetCDKReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetCDKReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetCDKReward_descriptor_;
}

const CGGetCDKReward& CGGetCDKReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

CGGetCDKReward* CGGetCDKReward::default_instance_ = NULL;

CGGetCDKReward* CGGetCDKReward::New() const {
  return new CGGetCDKReward;
}

void CGGetCDKReward::Clear() {
  if (has_cdk()) {
    if (cdk_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      cdk_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetCDKReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetCDKReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cdk = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdk().data(), this->cdk().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cdk");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetCDKReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetCDKReward)
  return false;
#undef DO_
}

void CGGetCDKReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetCDKReward)
  // optional string cdk = 1;
  if (has_cdk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdk().data(), this->cdk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdk");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cdk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetCDKReward)
}

::google::protobuf::uint8* CGGetCDKReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetCDKReward)
  // optional string cdk = 1;
  if (has_cdk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdk().data(), this->cdk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdk");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cdk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetCDKReward)
  return target;
}

int CGGetCDKReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cdk = 1;
    if (has_cdk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdk());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetCDKReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetCDKReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetCDKReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetCDKReward::MergeFrom(const CGGetCDKReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cdk()) {
      set_cdk(from.cdk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetCDKReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetCDKReward::CopyFrom(const CGGetCDKReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetCDKReward::IsInitialized() const {

  return true;
}

void CGGetCDKReward::Swap(CGGetCDKReward* other) {
  if (other != this) {
    std::swap(cdk_, other->cdk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetCDKReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetCDKReward_descriptor_;
  metadata.reflection = CGGetCDKReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetCDKRewardBack::kFlagFieldNumber;
#endif  // !_MSC_VER

GCGetCDKRewardBack::GCGetCDKRewardBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetCDKRewardBack)
}

void GCGetCDKRewardBack::InitAsDefaultInstance() {
}

GCGetCDKRewardBack::GCGetCDKRewardBack(const GCGetCDKRewardBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetCDKRewardBack)
}

void GCGetCDKRewardBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetCDKRewardBack::~GCGetCDKRewardBack() {
  // @@protoc_insertion_point(destructor:GCGetCDKRewardBack)
  SharedDtor();
}

void GCGetCDKRewardBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetCDKRewardBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetCDKRewardBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetCDKRewardBack_descriptor_;
}

const GCGetCDKRewardBack& GCGetCDKRewardBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VitalityMessage_2eproto();
  return *default_instance_;
}

GCGetCDKRewardBack* GCGetCDKRewardBack::default_instance_ = NULL;

GCGetCDKRewardBack* GCGetCDKRewardBack::New() const {
  return new GCGetCDKRewardBack;
}

void GCGetCDKRewardBack::Clear() {
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetCDKRewardBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetCDKRewardBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetCDKRewardBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetCDKRewardBack)
  return false;
#undef DO_
}

void GCGetCDKRewardBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetCDKRewardBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetCDKRewardBack)
}

::google::protobuf::uint8* GCGetCDKRewardBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetCDKRewardBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetCDKRewardBack)
  return target;
}

int GCGetCDKRewardBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetCDKRewardBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetCDKRewardBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetCDKRewardBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetCDKRewardBack::MergeFrom(const GCGetCDKRewardBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetCDKRewardBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetCDKRewardBack::CopyFrom(const GCGetCDKRewardBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetCDKRewardBack::IsInitialized() const {

  return true;
}

void GCGetCDKRewardBack::Swap(GCGetCDKRewardBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetCDKRewardBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetCDKRewardBack_descriptor_;
  metadata.reflection = GCGetCDKRewardBack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
