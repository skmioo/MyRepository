// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WelfareMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WelfareMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WelfareItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPushWelfare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPushWelfare_reflection_ = NULL;
const ::google::protobuf::Descriptor* SprintTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SprintTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCWelfare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCWelfare_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGOpenWelfare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGOpenWelfare_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCOpenOnLineWelfareBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCOpenOnLineWelfareBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetWelfareReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetWelfareReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetWelfareRewardBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetWelfareRewardBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetLevelRewardOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetLevelRewardOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetLevelRewardOverBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetLevelRewardOverBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPushContinuousLandDayNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPushContinuousLandDayNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGContinuousLandOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGContinuousLandOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCContinuousLandOverBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCContinuousLandOverBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGRequestGetReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGRequestGetReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRequestGetRewardBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRequestGetRewardBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGDailyShare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGDailyShare_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDailyShare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDailyShare_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetLoginReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetLoginReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetLoginReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetLoginReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShareRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCShareRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCShareRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetShareReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetShareReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetShareReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetShareReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCOnlineViewSts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCOnlineViewSts_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGRwdOnLineGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGRwdOnLineGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRwdOnLineGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRwdOnLineGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDoubleExpmsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDoubleExpmsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WelfareMessage_2eproto() {
  protobuf_AddDesc_WelfareMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WelfareMessage.proto");
  GOOGLE_CHECK(file != NULL);
  WelfareItem_descriptor_ = file->message_type(0);
  static const int WelfareItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareItem, temid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareItem, bind_),
  };
  WelfareItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareItem_descriptor_,
      WelfareItem::default_instance_,
      WelfareItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareItem));
  WelfareStruct_descriptor_ = file->message_type(1);
  static const int WelfareStruct_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareStruct, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareStruct, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareStruct, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareStruct, sprinttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareStruct, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareStruct, showrew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareStruct, showname_),
  };
  WelfareStruct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareStruct_descriptor_,
      WelfareStruct::default_instance_,
      WelfareStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareStruct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareStruct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareStruct));
  GCPushWelfare_descriptor_ = file->message_type(2);
  static const int GCPushWelfare_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushWelfare, welfaretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushWelfare, welfarestruct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushWelfare, sprinttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushWelfare, actdays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushWelfare, paynum_),
  };
  GCPushWelfare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPushWelfare_descriptor_,
      GCPushWelfare::default_instance_,
      GCPushWelfare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushWelfare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushWelfare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPushWelfare));
  SprintTime_descriptor_ = file->message_type(3);
  static const int SprintTime_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SprintTime, sprinttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SprintTime, statetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SprintTime, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SprintTime, opentype_),
  };
  SprintTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SprintTime_descriptor_,
      SprintTime::default_instance_,
      SprintTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SprintTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SprintTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SprintTime));
  GCWelfare_descriptor_ = file->message_type(4);
  static const int GCWelfare_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWelfare, sprinttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWelfare, statetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWelfare, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWelfare, opentype_),
  };
  GCWelfare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCWelfare_descriptor_,
      GCWelfare::default_instance_,
      GCWelfare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWelfare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWelfare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCWelfare));
  CGOpenWelfare_descriptor_ = file->message_type(5);
  static const int CGOpenWelfare_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpenWelfare, type_),
  };
  CGOpenWelfare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGOpenWelfare_descriptor_,
      CGOpenWelfare::default_instance_,
      CGOpenWelfare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpenWelfare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpenWelfare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGOpenWelfare));
  GCOpenOnLineWelfareBack_descriptor_ = file->message_type(6);
  static const int GCOpenOnLineWelfareBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenOnLineWelfareBack, onlinetime_),
  };
  GCOpenOnLineWelfareBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCOpenOnLineWelfareBack_descriptor_,
      GCOpenOnLineWelfareBack::default_instance_,
      GCOpenOnLineWelfareBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenOnLineWelfareBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenOnLineWelfareBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCOpenOnLineWelfareBack));
  CGGetWelfareReward_descriptor_ = file->message_type(7);
  static const int CGGetWelfareReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetWelfareReward, welfaretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetWelfareReward, temid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetWelfareReward, sprinttype_),
  };
  CGGetWelfareReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetWelfareReward_descriptor_,
      CGGetWelfareReward::default_instance_,
      CGGetWelfareReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetWelfareReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetWelfareReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetWelfareReward));
  GCGetWelfareRewardBack_descriptor_ = file->message_type(8);
  static const int GCGetWelfareRewardBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetWelfareRewardBack, welfaretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetWelfareRewardBack, welfarestruct_),
  };
  GCGetWelfareRewardBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetWelfareRewardBack_descriptor_,
      GCGetWelfareRewardBack::default_instance_,
      GCGetWelfareRewardBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetWelfareRewardBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetWelfareRewardBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetWelfareRewardBack));
  CGGetLevelRewardOver_descriptor_ = file->message_type(9);
  static const int CGGetLevelRewardOver_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetLevelRewardOver, id_),
  };
  CGGetLevelRewardOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetLevelRewardOver_descriptor_,
      CGGetLevelRewardOver::default_instance_,
      CGGetLevelRewardOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetLevelRewardOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetLevelRewardOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetLevelRewardOver));
  GCGetLevelRewardOverBack_descriptor_ = file->message_type(10);
  static const int GCGetLevelRewardOverBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetLevelRewardOverBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetLevelRewardOverBack, welfarestruct_),
  };
  GCGetLevelRewardOverBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetLevelRewardOverBack_descriptor_,
      GCGetLevelRewardOverBack::default_instance_,
      GCGetLevelRewardOverBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetLevelRewardOverBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetLevelRewardOverBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetLevelRewardOverBack));
  GCPushContinuousLandDayNum_descriptor_ = file->message_type(11);
  static const int GCPushContinuousLandDayNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushContinuousLandDayNum, daynum_),
  };
  GCPushContinuousLandDayNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPushContinuousLandDayNum_descriptor_,
      GCPushContinuousLandDayNum::default_instance_,
      GCPushContinuousLandDayNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushContinuousLandDayNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushContinuousLandDayNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPushContinuousLandDayNum));
  CGContinuousLandOver_descriptor_ = file->message_type(12);
  static const int CGContinuousLandOver_offsets_[1] = {
  };
  CGContinuousLandOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGContinuousLandOver_descriptor_,
      CGContinuousLandOver::default_instance_,
      CGContinuousLandOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGContinuousLandOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGContinuousLandOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGContinuousLandOver));
  GCContinuousLandOverBack_descriptor_ = file->message_type(13);
  static const int GCContinuousLandOverBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCContinuousLandOverBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCContinuousLandOverBack, welfarestruct_),
  };
  GCContinuousLandOverBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCContinuousLandOverBack_descriptor_,
      GCContinuousLandOverBack::default_instance_,
      GCContinuousLandOverBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCContinuousLandOverBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCContinuousLandOverBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCContinuousLandOverBack));
  CGRequestGetReward_descriptor_ = file->message_type(14);
  static const int CGRequestGetReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRequestGetReward, type_),
  };
  CGRequestGetReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGRequestGetReward_descriptor_,
      CGRequestGetReward::default_instance_,
      CGRequestGetReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRequestGetReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRequestGetReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGRequestGetReward));
  GCRequestGetRewardBack_descriptor_ = file->message_type(15);
  static const int GCRequestGetRewardBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRequestGetRewardBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRequestGetRewardBack, flag_),
  };
  GCRequestGetRewardBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRequestGetRewardBack_descriptor_,
      GCRequestGetRewardBack::default_instance_,
      GCRequestGetRewardBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRequestGetRewardBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRequestGetRewardBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRequestGetRewardBack));
  CGDailyShare_descriptor_ = file->message_type(16);
  static const int CGDailyShare_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDailyShare, type_),
  };
  CGDailyShare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGDailyShare_descriptor_,
      CGDailyShare::default_instance_,
      CGDailyShare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDailyShare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDailyShare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGDailyShare));
  GCDailyShare_descriptor_ = file->message_type(17);
  static const int GCDailyShare_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDailyShare, type_),
  };
  GCDailyShare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDailyShare_descriptor_,
      GCDailyShare::default_instance_,
      GCDailyShare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDailyShare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDailyShare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDailyShare));
  CGGetLoginReward_descriptor_ = file->message_type(18);
  static const int CGGetLoginReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetLoginReward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetLoginReward, id_),
  };
  CGGetLoginReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetLoginReward_descriptor_,
      CGGetLoginReward::default_instance_,
      CGGetLoginReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetLoginReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetLoginReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetLoginReward));
  GCGetLoginReward_descriptor_ = file->message_type(19);
  static const int GCGetLoginReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetLoginReward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetLoginReward, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetLoginReward, welfarestruct_),
  };
  GCGetLoginReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetLoginReward_descriptor_,
      GCGetLoginReward::default_instance_,
      GCGetLoginReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetLoginReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetLoginReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetLoginReward));
  ShareRewardInfo_descriptor_ = file->message_type(20);
  static const int ShareRewardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareRewardInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareRewardInfo, gettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareRewardInfo, state_),
  };
  ShareRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareRewardInfo_descriptor_,
      ShareRewardInfo::default_instance_,
      ShareRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareRewardInfo));
  GCShareRewardInfo_descriptor_ = file->message_type(21);
  static const int GCShareRewardInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShareRewardInfo, rewardinfolist_),
  };
  GCShareRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCShareRewardInfo_descriptor_,
      GCShareRewardInfo::default_instance_,
      GCShareRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShareRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShareRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCShareRewardInfo));
  CGGetShareReward_descriptor_ = file->message_type(22);
  static const int CGGetShareReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetShareReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetShareReward, type_),
  };
  CGGetShareReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetShareReward_descriptor_,
      CGGetShareReward::default_instance_,
      CGGetShareReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetShareReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetShareReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetShareReward));
  GCGetShareReward_descriptor_ = file->message_type(23);
  static const int GCGetShareReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetShareReward, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetShareReward, rewardinfo_),
  };
  GCGetShareReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetShareReward_descriptor_,
      GCGetShareReward::default_instance_,
      GCGetShareReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetShareReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetShareReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetShareReward));
  GCOnlineViewSts_descriptor_ = file->message_type(24);
  static const int GCOnlineViewSts_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOnlineViewSts, flag_),
  };
  GCOnlineViewSts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCOnlineViewSts_descriptor_,
      GCOnlineViewSts::default_instance_,
      GCOnlineViewSts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOnlineViewSts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOnlineViewSts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCOnlineViewSts));
  CGRwdOnLineGift_descriptor_ = file->message_type(25);
  static const int CGRwdOnLineGift_offsets_[1] = {
  };
  CGRwdOnLineGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGRwdOnLineGift_descriptor_,
      CGRwdOnLineGift::default_instance_,
      CGRwdOnLineGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRwdOnLineGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRwdOnLineGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGRwdOnLineGift));
  GCRwdOnLineGift_descriptor_ = file->message_type(26);
  static const int GCRwdOnLineGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRwdOnLineGift, rwds_),
  };
  GCRwdOnLineGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRwdOnLineGift_descriptor_,
      GCRwdOnLineGift::default_instance_,
      GCRwdOnLineGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRwdOnLineGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRwdOnLineGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRwdOnLineGift));
  GCDoubleExpmsg_descriptor_ = file->message_type(27);
  static const int GCDoubleExpmsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoubleExpmsg, dungeontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoubleExpmsg, sts_),
  };
  GCDoubleExpmsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDoubleExpmsg_descriptor_,
      GCDoubleExpmsg::default_instance_,
      GCDoubleExpmsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoubleExpmsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoubleExpmsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDoubleExpmsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WelfareMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareItem_descriptor_, &WelfareItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareStruct_descriptor_, &WelfareStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPushWelfare_descriptor_, &GCPushWelfare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SprintTime_descriptor_, &SprintTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCWelfare_descriptor_, &GCWelfare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGOpenWelfare_descriptor_, &CGOpenWelfare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCOpenOnLineWelfareBack_descriptor_, &GCOpenOnLineWelfareBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetWelfareReward_descriptor_, &CGGetWelfareReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetWelfareRewardBack_descriptor_, &GCGetWelfareRewardBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetLevelRewardOver_descriptor_, &CGGetLevelRewardOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetLevelRewardOverBack_descriptor_, &GCGetLevelRewardOverBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPushContinuousLandDayNum_descriptor_, &GCPushContinuousLandDayNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGContinuousLandOver_descriptor_, &CGContinuousLandOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCContinuousLandOverBack_descriptor_, &GCContinuousLandOverBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGRequestGetReward_descriptor_, &CGRequestGetReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRequestGetRewardBack_descriptor_, &GCRequestGetRewardBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGDailyShare_descriptor_, &CGDailyShare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDailyShare_descriptor_, &GCDailyShare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetLoginReward_descriptor_, &CGGetLoginReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetLoginReward_descriptor_, &GCGetLoginReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareRewardInfo_descriptor_, &ShareRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCShareRewardInfo_descriptor_, &GCShareRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetShareReward_descriptor_, &CGGetShareReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetShareReward_descriptor_, &GCGetShareReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCOnlineViewSts_descriptor_, &GCOnlineViewSts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGRwdOnLineGift_descriptor_, &CGRwdOnLineGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRwdOnLineGift_descriptor_, &GCRwdOnLineGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDoubleExpmsg_descriptor_, &GCDoubleExpmsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WelfareMessage_2eproto() {
  delete WelfareItem::default_instance_;
  delete WelfareItem_reflection_;
  delete WelfareStruct::default_instance_;
  delete WelfareStruct_reflection_;
  delete GCPushWelfare::default_instance_;
  delete GCPushWelfare_reflection_;
  delete SprintTime::default_instance_;
  delete SprintTime_reflection_;
  delete GCWelfare::default_instance_;
  delete GCWelfare_reflection_;
  delete CGOpenWelfare::default_instance_;
  delete CGOpenWelfare_reflection_;
  delete GCOpenOnLineWelfareBack::default_instance_;
  delete GCOpenOnLineWelfareBack_reflection_;
  delete CGGetWelfareReward::default_instance_;
  delete CGGetWelfareReward_reflection_;
  delete GCGetWelfareRewardBack::default_instance_;
  delete GCGetWelfareRewardBack_reflection_;
  delete CGGetLevelRewardOver::default_instance_;
  delete CGGetLevelRewardOver_reflection_;
  delete GCGetLevelRewardOverBack::default_instance_;
  delete GCGetLevelRewardOverBack_reflection_;
  delete GCPushContinuousLandDayNum::default_instance_;
  delete GCPushContinuousLandDayNum_reflection_;
  delete CGContinuousLandOver::default_instance_;
  delete CGContinuousLandOver_reflection_;
  delete GCContinuousLandOverBack::default_instance_;
  delete GCContinuousLandOverBack_reflection_;
  delete CGRequestGetReward::default_instance_;
  delete CGRequestGetReward_reflection_;
  delete GCRequestGetRewardBack::default_instance_;
  delete GCRequestGetRewardBack_reflection_;
  delete CGDailyShare::default_instance_;
  delete CGDailyShare_reflection_;
  delete GCDailyShare::default_instance_;
  delete GCDailyShare_reflection_;
  delete CGGetLoginReward::default_instance_;
  delete CGGetLoginReward_reflection_;
  delete GCGetLoginReward::default_instance_;
  delete GCGetLoginReward_reflection_;
  delete ShareRewardInfo::default_instance_;
  delete ShareRewardInfo_reflection_;
  delete GCShareRewardInfo::default_instance_;
  delete GCShareRewardInfo_reflection_;
  delete CGGetShareReward::default_instance_;
  delete CGGetShareReward_reflection_;
  delete GCGetShareReward::default_instance_;
  delete GCGetShareReward_reflection_;
  delete GCOnlineViewSts::default_instance_;
  delete GCOnlineViewSts_reflection_;
  delete CGRwdOnLineGift::default_instance_;
  delete CGRwdOnLineGift_reflection_;
  delete GCRwdOnLineGift::default_instance_;
  delete GCRwdOnLineGift_reflection_;
  delete GCDoubleExpmsg::default_instance_;
  delete GCDoubleExpmsg_reflection_;
}

void protobuf_AddDesc_WelfareMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024WelfareMessage.proto\032\022InnerMessage.pro"
    "to\"7\n\013WelfareItem\022\r\n\005temId\030\001 \001(\005\022\013\n\003num\030"
    "\002 \001(\005\022\014\n\004bind\030\003 \001(\005\"\216\001\n\rWelfareStruct\022\n\n"
    "\002id\030\001 \001(\005\022\033\n\005items\030\002 \003(\0132\014.WelfareItem\022\016"
    "\n\006status\030\003 \001(\005\022\022\n\nsprintType\030\004 \001(\005\022\r\n\005pa"
    "ram\030\005 \001(\003\022\017\n\007showRew\030\006 \001(\t\022\020\n\010showName\030\007"
    " \001(\t\"\215\001\n\rGCPushWelfare\022\023\n\013welfareType\030\001 "
    "\001(\005\022%\n\rwelfareStruct\030\002 \003(\0132\016.WelfareStru"
    "ct\022\037\n\nsprintTime\030\003 \003(\0132\013.SprintTime\022\017\n\007a"
    "ctDays\030\004 \001(\005\022\016\n\006payNum\030\005 \001(\005\"V\n\nSprintTi"
    "me\022\022\n\nsprintType\030\001 \001(\005\022\021\n\tstateTime\030\002 \001("
    "\t\022\017\n\007endTime\030\003 \001(\t\022\020\n\010openType\030\004 \001(\005\"U\n\t"
    "GCWelfare\022\022\n\nsprintType\030\001 \001(\005\022\021\n\tstateTi"
    "me\030\002 \001(\t\022\017\n\007endTime\030\003 \001(\t\022\020\n\010openType\030\004 "
    "\001(\005\"\035\n\rCGOpenWelfare\022\014\n\004type\030\001 \001(\005\"-\n\027GC"
    "OpenOnLineWelfareBack\022\022\n\nonlinetime\030\001 \001("
    "\003\"L\n\022CGGetWelfareReward\022\023\n\013welfareType\030\001"
    " \001(\005\022\r\n\005temId\030\002 \001(\005\022\022\n\nsprintType\030\003 \001(\005\""
    "T\n\026GCGetWelfareRewardBack\022\023\n\013welfareType"
    "\030\001 \001(\005\022%\n\rwelfareStruct\030\002 \003(\0132\016.WelfareS"
    "truct\"\"\n\024CGGetLevelRewardOver\022\n\n\002id\030\001 \001("
    "\005\"O\n\030GCGetLevelRewardOverBack\022\014\n\004flag\030\001 "
    "\001(\005\022%\n\rwelfareStruct\030\002 \003(\0132\016.WelfareStru"
    "ct\",\n\032GCPushContinuousLandDayNum\022\016\n\006dayN"
    "um\030\001 \001(\005\"\026\n\024CGContinuousLandOver\"O\n\030GCCo"
    "ntinuousLandOverBack\022\014\n\004flag\030\001 \001(\005\022%\n\rwe"
    "lfareStruct\030\002 \003(\0132\016.WelfareStruct\"\"\n\022CGR"
    "equestGetReward\022\014\n\004type\030\001 \001(\005\"4\n\026GCReque"
    "stGetRewardBack\022\014\n\004type\030\001 \001(\005\022\014\n\004flag\030\002 "
    "\001(\005\"\034\n\014CGDailyShare\022\014\n\004type\030\001 \001(\005\"\034\n\014GCD"
    "ailyShare\022\014\n\004type\030\001 \001(\005\",\n\020CGGetLoginRew"
    "ard\022\014\n\004type\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"U\n\020GCGetLo"
    "ginReward\022\014\n\004type\030\001 \001(\005\022\014\n\004flag\030\002 \001(\005\022%\n"
    "\rwelfareStruct\030\003 \001(\0132\016.WelfareStruct\"=\n\017"
    "ShareRewardInfo\022\n\n\002id\030\001 \001(\005\022\017\n\007getTime\030\002"
    " \001(\003\022\r\n\005state\030\003 \001(\005\"=\n\021GCShareRewardInfo"
    "\022(\n\016rewardInfoList\030\001 \003(\0132\020.ShareRewardIn"
    "fo\",\n\020CGGetShareReward\022\n\n\002id\030\001 \001(\005\022\014\n\004ty"
    "pe\030\002 \001(\005\"F\n\020GCGetShareReward\022\014\n\004flag\030\001 \001"
    "(\005\022$\n\nrewardInfo\030\002 \001(\0132\020.ShareRewardInfo"
    "\"\037\n\017GCOnlineViewSts\022\014\n\004flag\030\001 \001(\005\"\021\n\017CGR"
    "wdOnLineGift\"/\n\017GCRwdOnLineGift\022\034\n\004rwds\030"
    "\001 \003(\0132\016.WelfareStruct\"2\n\016GCDoubleExpmsg\022"
    "\023\n\013dungeonType\030\001 \003(\005\022\013\n\003sts\030\002 \001(\005B\031\n\027com"
    ".mile.common.message", 1780);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WelfareMessage.proto", &protobuf_RegisterTypes);
  WelfareItem::default_instance_ = new WelfareItem();
  WelfareStruct::default_instance_ = new WelfareStruct();
  GCPushWelfare::default_instance_ = new GCPushWelfare();
  SprintTime::default_instance_ = new SprintTime();
  GCWelfare::default_instance_ = new GCWelfare();
  CGOpenWelfare::default_instance_ = new CGOpenWelfare();
  GCOpenOnLineWelfareBack::default_instance_ = new GCOpenOnLineWelfareBack();
  CGGetWelfareReward::default_instance_ = new CGGetWelfareReward();
  GCGetWelfareRewardBack::default_instance_ = new GCGetWelfareRewardBack();
  CGGetLevelRewardOver::default_instance_ = new CGGetLevelRewardOver();
  GCGetLevelRewardOverBack::default_instance_ = new GCGetLevelRewardOverBack();
  GCPushContinuousLandDayNum::default_instance_ = new GCPushContinuousLandDayNum();
  CGContinuousLandOver::default_instance_ = new CGContinuousLandOver();
  GCContinuousLandOverBack::default_instance_ = new GCContinuousLandOverBack();
  CGRequestGetReward::default_instance_ = new CGRequestGetReward();
  GCRequestGetRewardBack::default_instance_ = new GCRequestGetRewardBack();
  CGDailyShare::default_instance_ = new CGDailyShare();
  GCDailyShare::default_instance_ = new GCDailyShare();
  CGGetLoginReward::default_instance_ = new CGGetLoginReward();
  GCGetLoginReward::default_instance_ = new GCGetLoginReward();
  ShareRewardInfo::default_instance_ = new ShareRewardInfo();
  GCShareRewardInfo::default_instance_ = new GCShareRewardInfo();
  CGGetShareReward::default_instance_ = new CGGetShareReward();
  GCGetShareReward::default_instance_ = new GCGetShareReward();
  GCOnlineViewSts::default_instance_ = new GCOnlineViewSts();
  CGRwdOnLineGift::default_instance_ = new CGRwdOnLineGift();
  GCRwdOnLineGift::default_instance_ = new GCRwdOnLineGift();
  GCDoubleExpmsg::default_instance_ = new GCDoubleExpmsg();
  WelfareItem::default_instance_->InitAsDefaultInstance();
  WelfareStruct::default_instance_->InitAsDefaultInstance();
  GCPushWelfare::default_instance_->InitAsDefaultInstance();
  SprintTime::default_instance_->InitAsDefaultInstance();
  GCWelfare::default_instance_->InitAsDefaultInstance();
  CGOpenWelfare::default_instance_->InitAsDefaultInstance();
  GCOpenOnLineWelfareBack::default_instance_->InitAsDefaultInstance();
  CGGetWelfareReward::default_instance_->InitAsDefaultInstance();
  GCGetWelfareRewardBack::default_instance_->InitAsDefaultInstance();
  CGGetLevelRewardOver::default_instance_->InitAsDefaultInstance();
  GCGetLevelRewardOverBack::default_instance_->InitAsDefaultInstance();
  GCPushContinuousLandDayNum::default_instance_->InitAsDefaultInstance();
  CGContinuousLandOver::default_instance_->InitAsDefaultInstance();
  GCContinuousLandOverBack::default_instance_->InitAsDefaultInstance();
  CGRequestGetReward::default_instance_->InitAsDefaultInstance();
  GCRequestGetRewardBack::default_instance_->InitAsDefaultInstance();
  CGDailyShare::default_instance_->InitAsDefaultInstance();
  GCDailyShare::default_instance_->InitAsDefaultInstance();
  CGGetLoginReward::default_instance_->InitAsDefaultInstance();
  GCGetLoginReward::default_instance_->InitAsDefaultInstance();
  ShareRewardInfo::default_instance_->InitAsDefaultInstance();
  GCShareRewardInfo::default_instance_->InitAsDefaultInstance();
  CGGetShareReward::default_instance_->InitAsDefaultInstance();
  GCGetShareReward::default_instance_->InitAsDefaultInstance();
  GCOnlineViewSts::default_instance_->InitAsDefaultInstance();
  CGRwdOnLineGift::default_instance_->InitAsDefaultInstance();
  GCRwdOnLineGift::default_instance_->InitAsDefaultInstance();
  GCDoubleExpmsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WelfareMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WelfareMessage_2eproto {
  StaticDescriptorInitializer_WelfareMessage_2eproto() {
    protobuf_AddDesc_WelfareMessage_2eproto();
  }
} static_descriptor_initializer_WelfareMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WelfareItem::kTemIdFieldNumber;
const int WelfareItem::kNumFieldNumber;
const int WelfareItem::kBindFieldNumber;
#endif  // !_MSC_VER

WelfareItem::WelfareItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WelfareItem)
}

void WelfareItem::InitAsDefaultInstance() {
}

WelfareItem::WelfareItem(const WelfareItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WelfareItem)
}

void WelfareItem::SharedCtor() {
  _cached_size_ = 0;
  temid_ = 0;
  num_ = 0;
  bind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareItem::~WelfareItem() {
  // @@protoc_insertion_point(destructor:WelfareItem)
  SharedDtor();
}

void WelfareItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareItem_descriptor_;
}

const WelfareItem& WelfareItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

WelfareItem* WelfareItem::default_instance_ = NULL;

WelfareItem* WelfareItem::New() const {
  return new WelfareItem;
}

void WelfareItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WelfareItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(temid_, bind_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WelfareItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 temId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temid_)));
          set_has_temid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bind;
        break;
      }

      // optional int32 bind = 3;
      case 3: {
        if (tag == 24) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WelfareItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WelfareItem)
  return false;
#undef DO_
}

void WelfareItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WelfareItem)
  // optional int32 temId = 1;
  if (has_temid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->temid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WelfareItem)
}

::google::protobuf::uint8* WelfareItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WelfareItem)
  // optional int32 temId = 1;
  if (has_temid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->temid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WelfareItem)
  return target;
}

int WelfareItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 temId = 1;
    if (has_temid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->temid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 bind = 3;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareItem::MergeFrom(const WelfareItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temid()) {
      set_temid(from.temid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareItem::CopyFrom(const WelfareItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareItem::IsInitialized() const {

  return true;
}

void WelfareItem::Swap(WelfareItem* other) {
  if (other != this) {
    std::swap(temid_, other->temid_);
    std::swap(num_, other->num_);
    std::swap(bind_, other->bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareItem_descriptor_;
  metadata.reflection = WelfareItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareStruct::kIdFieldNumber;
const int WelfareStruct::kItemsFieldNumber;
const int WelfareStruct::kStatusFieldNumber;
const int WelfareStruct::kSprintTypeFieldNumber;
const int WelfareStruct::kParamFieldNumber;
const int WelfareStruct::kShowRewFieldNumber;
const int WelfareStruct::kShowNameFieldNumber;
#endif  // !_MSC_VER

WelfareStruct::WelfareStruct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WelfareStruct)
}

void WelfareStruct::InitAsDefaultInstance() {
}

WelfareStruct::WelfareStruct(const WelfareStruct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WelfareStruct)
}

void WelfareStruct::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  sprinttype_ = 0;
  param_ = GOOGLE_LONGLONG(0);
  showrew_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  showname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareStruct::~WelfareStruct() {
  // @@protoc_insertion_point(destructor:WelfareStruct)
  SharedDtor();
}

void WelfareStruct::SharedDtor() {
  if (showrew_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete showrew_;
  }
  if (showname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete showname_;
  }
  if (this != default_instance_) {
  }
}

void WelfareStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareStruct_descriptor_;
}

const WelfareStruct& WelfareStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

WelfareStruct* WelfareStruct::default_instance_ = NULL;

WelfareStruct* WelfareStruct::New() const {
  return new WelfareStruct;
}

void WelfareStruct::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WelfareStruct*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 125) {
    ZR_(id_, param_);
    sprinttype_ = 0;
    if (has_showrew()) {
      if (showrew_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        showrew_->clear();
      }
    }
    if (has_showname()) {
      if (showname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        showname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WelfareStruct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .WelfareItem items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sprintType;
        break;
      }

      // optional int32 sprintType = 4;
      case 4: {
        if (tag == 32) {
         parse_sprintType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sprinttype_)));
          set_has_sprinttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_param;
        break;
      }

      // optional int64 param = 5;
      case 5: {
        if (tag == 40) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_showRew;
        break;
      }

      // optional string showRew = 6;
      case 6: {
        if (tag == 50) {
         parse_showRew:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_showrew()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->showrew().data(), this->showrew().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "showrew");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_showName;
        break;
      }

      // optional string showName = 7;
      case 7: {
        if (tag == 58) {
         parse_showName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_showname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->showname().data(), this->showname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "showname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WelfareStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WelfareStruct)
  return false;
#undef DO_
}

void WelfareStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WelfareStruct)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .WelfareItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // optional int32 sprintType = 4;
  if (has_sprinttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sprinttype(), output);
  }

  // optional int64 param = 5;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->param(), output);
  }

  // optional string showRew = 6;
  if (has_showrew()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->showrew().data(), this->showrew().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "showrew");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->showrew(), output);
  }

  // optional string showName = 7;
  if (has_showname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->showname().data(), this->showname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "showname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->showname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WelfareStruct)
}

::google::protobuf::uint8* WelfareStruct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WelfareStruct)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .WelfareItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // optional int32 sprintType = 4;
  if (has_sprinttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sprinttype(), target);
  }

  // optional int64 param = 5;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->param(), target);
  }

  // optional string showRew = 6;
  if (has_showrew()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->showrew().data(), this->showrew().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "showrew");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->showrew(), target);
  }

  // optional string showName = 7;
  if (has_showname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->showname().data(), this->showname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "showname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->showname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WelfareStruct)
  return target;
}

int WelfareStruct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 sprintType = 4;
    if (has_sprinttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sprinttype());
    }

    // optional int64 param = 5;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param());
    }

    // optional string showRew = 6;
    if (has_showrew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->showrew());
    }

    // optional string showName = 7;
    if (has_showname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->showname());
    }

  }
  // repeated .WelfareItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareStruct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareStruct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareStruct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareStruct::MergeFrom(const WelfareStruct& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_sprinttype()) {
      set_sprinttype(from.sprinttype());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_showrew()) {
      set_showrew(from.showrew());
    }
    if (from.has_showname()) {
      set_showname(from.showname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareStruct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareStruct::CopyFrom(const WelfareStruct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareStruct::IsInitialized() const {

  return true;
}

void WelfareStruct::Swap(WelfareStruct* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    items_.Swap(&other->items_);
    std::swap(status_, other->status_);
    std::swap(sprinttype_, other->sprinttype_);
    std::swap(param_, other->param_);
    std::swap(showrew_, other->showrew_);
    std::swap(showname_, other->showname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareStruct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareStruct_descriptor_;
  metadata.reflection = WelfareStruct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPushWelfare::kWelfareTypeFieldNumber;
const int GCPushWelfare::kWelfareStructFieldNumber;
const int GCPushWelfare::kSprintTimeFieldNumber;
const int GCPushWelfare::kActDaysFieldNumber;
const int GCPushWelfare::kPayNumFieldNumber;
#endif  // !_MSC_VER

GCPushWelfare::GCPushWelfare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPushWelfare)
}

void GCPushWelfare::InitAsDefaultInstance() {
}

GCPushWelfare::GCPushWelfare(const GCPushWelfare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPushWelfare)
}

void GCPushWelfare::SharedCtor() {
  _cached_size_ = 0;
  welfaretype_ = 0;
  actdays_ = 0;
  paynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPushWelfare::~GCPushWelfare() {
  // @@protoc_insertion_point(destructor:GCPushWelfare)
  SharedDtor();
}

void GCPushWelfare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPushWelfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPushWelfare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPushWelfare_descriptor_;
}

const GCPushWelfare& GCPushWelfare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCPushWelfare* GCPushWelfare::default_instance_ = NULL;

GCPushWelfare* GCPushWelfare::New() const {
  return new GCPushWelfare;
}

void GCPushWelfare::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPushWelfare*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 25) {
    ZR_(welfaretype_, actdays_);
    paynum_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  welfarestruct_.Clear();
  sprinttime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPushWelfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPushWelfare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 welfareType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &welfaretype_)));
          set_has_welfaretype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_welfareStruct;
        break;
      }

      // repeated .WelfareStruct welfareStruct = 2;
      case 2: {
        if (tag == 18) {
         parse_welfareStruct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_welfarestruct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_welfareStruct;
        if (input->ExpectTag(26)) goto parse_sprintTime;
        break;
      }

      // repeated .SprintTime sprintTime = 3;
      case 3: {
        if (tag == 26) {
         parse_sprintTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sprinttime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sprintTime;
        if (input->ExpectTag(32)) goto parse_actDays;
        break;
      }

      // optional int32 actDays = 4;
      case 4: {
        if (tag == 32) {
         parse_actDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actdays_)));
          set_has_actdays();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_payNum;
        break;
      }

      // optional int32 payNum = 5;
      case 5: {
        if (tag == 40) {
         parse_payNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paynum_)));
          set_has_paynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPushWelfare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPushWelfare)
  return false;
#undef DO_
}

void GCPushWelfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPushWelfare)
  // optional int32 welfareType = 1;
  if (has_welfaretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->welfaretype(), output);
  }

  // repeated .WelfareStruct welfareStruct = 2;
  for (int i = 0; i < this->welfarestruct_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->welfarestruct(i), output);
  }

  // repeated .SprintTime sprintTime = 3;
  for (int i = 0; i < this->sprinttime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sprinttime(i), output);
  }

  // optional int32 actDays = 4;
  if (has_actdays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actdays(), output);
  }

  // optional int32 payNum = 5;
  if (has_paynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->paynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPushWelfare)
}

::google::protobuf::uint8* GCPushWelfare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPushWelfare)
  // optional int32 welfareType = 1;
  if (has_welfaretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->welfaretype(), target);
  }

  // repeated .WelfareStruct welfareStruct = 2;
  for (int i = 0; i < this->welfarestruct_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->welfarestruct(i), target);
  }

  // repeated .SprintTime sprintTime = 3;
  for (int i = 0; i < this->sprinttime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sprinttime(i), target);
  }

  // optional int32 actDays = 4;
  if (has_actdays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->actdays(), target);
  }

  // optional int32 payNum = 5;
  if (has_paynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->paynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPushWelfare)
  return target;
}

int GCPushWelfare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 welfareType = 1;
    if (has_welfaretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->welfaretype());
    }

    // optional int32 actDays = 4;
    if (has_actdays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actdays());
    }

    // optional int32 payNum = 5;
    if (has_paynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paynum());
    }

  }
  // repeated .WelfareStruct welfareStruct = 2;
  total_size += 1 * this->welfarestruct_size();
  for (int i = 0; i < this->welfarestruct_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->welfarestruct(i));
  }

  // repeated .SprintTime sprintTime = 3;
  total_size += 1 * this->sprinttime_size();
  for (int i = 0; i < this->sprinttime_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sprinttime(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPushWelfare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPushWelfare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPushWelfare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPushWelfare::MergeFrom(const GCPushWelfare& from) {
  GOOGLE_CHECK_NE(&from, this);
  welfarestruct_.MergeFrom(from.welfarestruct_);
  sprinttime_.MergeFrom(from.sprinttime_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_welfaretype()) {
      set_welfaretype(from.welfaretype());
    }
    if (from.has_actdays()) {
      set_actdays(from.actdays());
    }
    if (from.has_paynum()) {
      set_paynum(from.paynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPushWelfare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPushWelfare::CopyFrom(const GCPushWelfare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPushWelfare::IsInitialized() const {

  return true;
}

void GCPushWelfare::Swap(GCPushWelfare* other) {
  if (other != this) {
    std::swap(welfaretype_, other->welfaretype_);
    welfarestruct_.Swap(&other->welfarestruct_);
    sprinttime_.Swap(&other->sprinttime_);
    std::swap(actdays_, other->actdays_);
    std::swap(paynum_, other->paynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPushWelfare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPushWelfare_descriptor_;
  metadata.reflection = GCPushWelfare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SprintTime::kSprintTypeFieldNumber;
const int SprintTime::kStateTimeFieldNumber;
const int SprintTime::kEndTimeFieldNumber;
const int SprintTime::kOpenTypeFieldNumber;
#endif  // !_MSC_VER

SprintTime::SprintTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SprintTime)
}

void SprintTime::InitAsDefaultInstance() {
}

SprintTime::SprintTime(const SprintTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SprintTime)
}

void SprintTime::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sprinttype_ = 0;
  statetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opentype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SprintTime::~SprintTime() {
  // @@protoc_insertion_point(destructor:SprintTime)
  SharedDtor();
}

void SprintTime::SharedDtor() {
  if (statetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statetime_;
  }
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (this != default_instance_) {
  }
}

void SprintTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SprintTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SprintTime_descriptor_;
}

const SprintTime& SprintTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

SprintTime* SprintTime::default_instance_ = NULL;

SprintTime* SprintTime::New() const {
  return new SprintTime;
}

void SprintTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SprintTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(sprinttype_, opentype_);
    if (has_statetime()) {
      if (statetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        statetime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endtime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SprintTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SprintTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sprintType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sprinttype_)));
          set_has_sprinttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stateTime;
        break;
      }

      // optional string stateTime = 2;
      case 2: {
        if (tag == 18) {
         parse_stateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statetime().data(), this->statetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "statetime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_endTime;
        break;
      }

      // optional string endTime = 3;
      case 3: {
        if (tag == 26) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_openType;
        break;
      }

      // optional int32 openType = 4;
      case 4: {
        if (tag == 32) {
         parse_openType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentype_)));
          set_has_opentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SprintTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SprintTime)
  return false;
#undef DO_
}

void SprintTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SprintTime)
  // optional int32 sprintType = 1;
  if (has_sprinttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sprinttype(), output);
  }

  // optional string stateTime = 2;
  if (has_statetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statetime().data(), this->statetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statetime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->statetime(), output);
  }

  // optional string endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->endtime(), output);
  }

  // optional int32 openType = 4;
  if (has_opentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opentype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SprintTime)
}

::google::protobuf::uint8* SprintTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SprintTime)
  // optional int32 sprintType = 1;
  if (has_sprinttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sprinttype(), target);
  }

  // optional string stateTime = 2;
  if (has_statetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statetime().data(), this->statetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statetime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->statetime(), target);
  }

  // optional string endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->endtime(), target);
  }

  // optional int32 openType = 4;
  if (has_opentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->opentype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SprintTime)
  return target;
}

int SprintTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sprintType = 1;
    if (has_sprinttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sprinttype());
    }

    // optional string stateTime = 2;
    if (has_statetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statetime());
    }

    // optional string endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

    // optional int32 openType = 4;
    if (has_opentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SprintTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SprintTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SprintTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SprintTime::MergeFrom(const SprintTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sprinttype()) {
      set_sprinttype(from.sprinttype());
    }
    if (from.has_statetime()) {
      set_statetime(from.statetime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_opentype()) {
      set_opentype(from.opentype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SprintTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SprintTime::CopyFrom(const SprintTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SprintTime::IsInitialized() const {

  return true;
}

void SprintTime::Swap(SprintTime* other) {
  if (other != this) {
    std::swap(sprinttype_, other->sprinttype_);
    std::swap(statetime_, other->statetime_);
    std::swap(endtime_, other->endtime_);
    std::swap(opentype_, other->opentype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SprintTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SprintTime_descriptor_;
  metadata.reflection = SprintTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCWelfare::kSprintTypeFieldNumber;
const int GCWelfare::kStateTimeFieldNumber;
const int GCWelfare::kEndTimeFieldNumber;
const int GCWelfare::kOpenTypeFieldNumber;
#endif  // !_MSC_VER

GCWelfare::GCWelfare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCWelfare)
}

void GCWelfare::InitAsDefaultInstance() {
}

GCWelfare::GCWelfare(const GCWelfare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCWelfare)
}

void GCWelfare::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sprinttype_ = 0;
  statetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opentype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCWelfare::~GCWelfare() {
  // @@protoc_insertion_point(destructor:GCWelfare)
  SharedDtor();
}

void GCWelfare::SharedDtor() {
  if (statetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statetime_;
  }
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (this != default_instance_) {
  }
}

void GCWelfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCWelfare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCWelfare_descriptor_;
}

const GCWelfare& GCWelfare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCWelfare* GCWelfare::default_instance_ = NULL;

GCWelfare* GCWelfare::New() const {
  return new GCWelfare;
}

void GCWelfare::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCWelfare*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(sprinttype_, opentype_);
    if (has_statetime()) {
      if (statetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        statetime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endtime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCWelfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCWelfare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sprintType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sprinttype_)));
          set_has_sprinttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stateTime;
        break;
      }

      // optional string stateTime = 2;
      case 2: {
        if (tag == 18) {
         parse_stateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statetime().data(), this->statetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "statetime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_endTime;
        break;
      }

      // optional string endTime = 3;
      case 3: {
        if (tag == 26) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_openType;
        break;
      }

      // optional int32 openType = 4;
      case 4: {
        if (tag == 32) {
         parse_openType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentype_)));
          set_has_opentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCWelfare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCWelfare)
  return false;
#undef DO_
}

void GCWelfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCWelfare)
  // optional int32 sprintType = 1;
  if (has_sprinttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sprinttype(), output);
  }

  // optional string stateTime = 2;
  if (has_statetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statetime().data(), this->statetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statetime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->statetime(), output);
  }

  // optional string endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->endtime(), output);
  }

  // optional int32 openType = 4;
  if (has_opentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opentype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCWelfare)
}

::google::protobuf::uint8* GCWelfare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCWelfare)
  // optional int32 sprintType = 1;
  if (has_sprinttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sprinttype(), target);
  }

  // optional string stateTime = 2;
  if (has_statetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statetime().data(), this->statetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statetime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->statetime(), target);
  }

  // optional string endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->endtime(), target);
  }

  // optional int32 openType = 4;
  if (has_opentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->opentype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCWelfare)
  return target;
}

int GCWelfare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sprintType = 1;
    if (has_sprinttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sprinttype());
    }

    // optional string stateTime = 2;
    if (has_statetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statetime());
    }

    // optional string endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

    // optional int32 openType = 4;
    if (has_opentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCWelfare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCWelfare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCWelfare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCWelfare::MergeFrom(const GCWelfare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sprinttype()) {
      set_sprinttype(from.sprinttype());
    }
    if (from.has_statetime()) {
      set_statetime(from.statetime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_opentype()) {
      set_opentype(from.opentype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCWelfare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCWelfare::CopyFrom(const GCWelfare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCWelfare::IsInitialized() const {

  return true;
}

void GCWelfare::Swap(GCWelfare* other) {
  if (other != this) {
    std::swap(sprinttype_, other->sprinttype_);
    std::swap(statetime_, other->statetime_);
    std::swap(endtime_, other->endtime_);
    std::swap(opentype_, other->opentype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCWelfare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCWelfare_descriptor_;
  metadata.reflection = GCWelfare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGOpenWelfare::kTypeFieldNumber;
#endif  // !_MSC_VER

CGOpenWelfare::CGOpenWelfare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGOpenWelfare)
}

void CGOpenWelfare::InitAsDefaultInstance() {
}

CGOpenWelfare::CGOpenWelfare(const CGOpenWelfare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGOpenWelfare)
}

void CGOpenWelfare::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGOpenWelfare::~CGOpenWelfare() {
  // @@protoc_insertion_point(destructor:CGOpenWelfare)
  SharedDtor();
}

void CGOpenWelfare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGOpenWelfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGOpenWelfare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGOpenWelfare_descriptor_;
}

const CGOpenWelfare& CGOpenWelfare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

CGOpenWelfare* CGOpenWelfare::default_instance_ = NULL;

CGOpenWelfare* CGOpenWelfare::New() const {
  return new CGOpenWelfare;
}

void CGOpenWelfare::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGOpenWelfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGOpenWelfare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGOpenWelfare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGOpenWelfare)
  return false;
#undef DO_
}

void CGOpenWelfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGOpenWelfare)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGOpenWelfare)
}

::google::protobuf::uint8* CGOpenWelfare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGOpenWelfare)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGOpenWelfare)
  return target;
}

int CGOpenWelfare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGOpenWelfare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGOpenWelfare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGOpenWelfare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGOpenWelfare::MergeFrom(const CGOpenWelfare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGOpenWelfare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGOpenWelfare::CopyFrom(const CGOpenWelfare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOpenWelfare::IsInitialized() const {

  return true;
}

void CGOpenWelfare::Swap(CGOpenWelfare* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGOpenWelfare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGOpenWelfare_descriptor_;
  metadata.reflection = CGOpenWelfare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCOpenOnLineWelfareBack::kOnlinetimeFieldNumber;
#endif  // !_MSC_VER

GCOpenOnLineWelfareBack::GCOpenOnLineWelfareBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCOpenOnLineWelfareBack)
}

void GCOpenOnLineWelfareBack::InitAsDefaultInstance() {
}

GCOpenOnLineWelfareBack::GCOpenOnLineWelfareBack(const GCOpenOnLineWelfareBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCOpenOnLineWelfareBack)
}

void GCOpenOnLineWelfareBack::SharedCtor() {
  _cached_size_ = 0;
  onlinetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCOpenOnLineWelfareBack::~GCOpenOnLineWelfareBack() {
  // @@protoc_insertion_point(destructor:GCOpenOnLineWelfareBack)
  SharedDtor();
}

void GCOpenOnLineWelfareBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCOpenOnLineWelfareBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCOpenOnLineWelfareBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCOpenOnLineWelfareBack_descriptor_;
}

const GCOpenOnLineWelfareBack& GCOpenOnLineWelfareBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCOpenOnLineWelfareBack* GCOpenOnLineWelfareBack::default_instance_ = NULL;

GCOpenOnLineWelfareBack* GCOpenOnLineWelfareBack::New() const {
  return new GCOpenOnLineWelfareBack;
}

void GCOpenOnLineWelfareBack::Clear() {
  onlinetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCOpenOnLineWelfareBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCOpenOnLineWelfareBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 onlinetime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCOpenOnLineWelfareBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCOpenOnLineWelfareBack)
  return false;
#undef DO_
}

void GCOpenOnLineWelfareBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCOpenOnLineWelfareBack)
  // optional int64 onlinetime = 1;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->onlinetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCOpenOnLineWelfareBack)
}

::google::protobuf::uint8* GCOpenOnLineWelfareBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCOpenOnLineWelfareBack)
  // optional int64 onlinetime = 1;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->onlinetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCOpenOnLineWelfareBack)
  return target;
}

int GCOpenOnLineWelfareBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 onlinetime = 1;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->onlinetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCOpenOnLineWelfareBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCOpenOnLineWelfareBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCOpenOnLineWelfareBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCOpenOnLineWelfareBack::MergeFrom(const GCOpenOnLineWelfareBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCOpenOnLineWelfareBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCOpenOnLineWelfareBack::CopyFrom(const GCOpenOnLineWelfareBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCOpenOnLineWelfareBack::IsInitialized() const {

  return true;
}

void GCOpenOnLineWelfareBack::Swap(GCOpenOnLineWelfareBack* other) {
  if (other != this) {
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCOpenOnLineWelfareBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCOpenOnLineWelfareBack_descriptor_;
  metadata.reflection = GCOpenOnLineWelfareBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetWelfareReward::kWelfareTypeFieldNumber;
const int CGGetWelfareReward::kTemIdFieldNumber;
const int CGGetWelfareReward::kSprintTypeFieldNumber;
#endif  // !_MSC_VER

CGGetWelfareReward::CGGetWelfareReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetWelfareReward)
}

void CGGetWelfareReward::InitAsDefaultInstance() {
}

CGGetWelfareReward::CGGetWelfareReward(const CGGetWelfareReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetWelfareReward)
}

void CGGetWelfareReward::SharedCtor() {
  _cached_size_ = 0;
  welfaretype_ = 0;
  temid_ = 0;
  sprinttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetWelfareReward::~CGGetWelfareReward() {
  // @@protoc_insertion_point(destructor:CGGetWelfareReward)
  SharedDtor();
}

void CGGetWelfareReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetWelfareReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetWelfareReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetWelfareReward_descriptor_;
}

const CGGetWelfareReward& CGGetWelfareReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

CGGetWelfareReward* CGGetWelfareReward::default_instance_ = NULL;

CGGetWelfareReward* CGGetWelfareReward::New() const {
  return new CGGetWelfareReward;
}

void CGGetWelfareReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetWelfareReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(welfaretype_, sprinttype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetWelfareReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetWelfareReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 welfareType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &welfaretype_)));
          set_has_welfaretype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_temId;
        break;
      }

      // optional int32 temId = 2;
      case 2: {
        if (tag == 16) {
         parse_temId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temid_)));
          set_has_temid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sprintType;
        break;
      }

      // optional int32 sprintType = 3;
      case 3: {
        if (tag == 24) {
         parse_sprintType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sprinttype_)));
          set_has_sprinttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetWelfareReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetWelfareReward)
  return false;
#undef DO_
}

void CGGetWelfareReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetWelfareReward)
  // optional int32 welfareType = 1;
  if (has_welfaretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->welfaretype(), output);
  }

  // optional int32 temId = 2;
  if (has_temid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->temid(), output);
  }

  // optional int32 sprintType = 3;
  if (has_sprinttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sprinttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetWelfareReward)
}

::google::protobuf::uint8* CGGetWelfareReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetWelfareReward)
  // optional int32 welfareType = 1;
  if (has_welfaretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->welfaretype(), target);
  }

  // optional int32 temId = 2;
  if (has_temid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->temid(), target);
  }

  // optional int32 sprintType = 3;
  if (has_sprinttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sprinttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetWelfareReward)
  return target;
}

int CGGetWelfareReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 welfareType = 1;
    if (has_welfaretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->welfaretype());
    }

    // optional int32 temId = 2;
    if (has_temid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->temid());
    }

    // optional int32 sprintType = 3;
    if (has_sprinttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sprinttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetWelfareReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetWelfareReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetWelfareReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetWelfareReward::MergeFrom(const CGGetWelfareReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_welfaretype()) {
      set_welfaretype(from.welfaretype());
    }
    if (from.has_temid()) {
      set_temid(from.temid());
    }
    if (from.has_sprinttype()) {
      set_sprinttype(from.sprinttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetWelfareReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetWelfareReward::CopyFrom(const CGGetWelfareReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetWelfareReward::IsInitialized() const {

  return true;
}

void CGGetWelfareReward::Swap(CGGetWelfareReward* other) {
  if (other != this) {
    std::swap(welfaretype_, other->welfaretype_);
    std::swap(temid_, other->temid_);
    std::swap(sprinttype_, other->sprinttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetWelfareReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetWelfareReward_descriptor_;
  metadata.reflection = CGGetWelfareReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetWelfareRewardBack::kWelfareTypeFieldNumber;
const int GCGetWelfareRewardBack::kWelfareStructFieldNumber;
#endif  // !_MSC_VER

GCGetWelfareRewardBack::GCGetWelfareRewardBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetWelfareRewardBack)
}

void GCGetWelfareRewardBack::InitAsDefaultInstance() {
}

GCGetWelfareRewardBack::GCGetWelfareRewardBack(const GCGetWelfareRewardBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetWelfareRewardBack)
}

void GCGetWelfareRewardBack::SharedCtor() {
  _cached_size_ = 0;
  welfaretype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetWelfareRewardBack::~GCGetWelfareRewardBack() {
  // @@protoc_insertion_point(destructor:GCGetWelfareRewardBack)
  SharedDtor();
}

void GCGetWelfareRewardBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetWelfareRewardBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetWelfareRewardBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetWelfareRewardBack_descriptor_;
}

const GCGetWelfareRewardBack& GCGetWelfareRewardBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCGetWelfareRewardBack* GCGetWelfareRewardBack::default_instance_ = NULL;

GCGetWelfareRewardBack* GCGetWelfareRewardBack::New() const {
  return new GCGetWelfareRewardBack;
}

void GCGetWelfareRewardBack::Clear() {
  welfaretype_ = 0;
  welfarestruct_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetWelfareRewardBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetWelfareRewardBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 welfareType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &welfaretype_)));
          set_has_welfaretype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_welfareStruct;
        break;
      }

      // repeated .WelfareStruct welfareStruct = 2;
      case 2: {
        if (tag == 18) {
         parse_welfareStruct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_welfarestruct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_welfareStruct;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetWelfareRewardBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetWelfareRewardBack)
  return false;
#undef DO_
}

void GCGetWelfareRewardBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetWelfareRewardBack)
  // optional int32 welfareType = 1;
  if (has_welfaretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->welfaretype(), output);
  }

  // repeated .WelfareStruct welfareStruct = 2;
  for (int i = 0; i < this->welfarestruct_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->welfarestruct(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetWelfareRewardBack)
}

::google::protobuf::uint8* GCGetWelfareRewardBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetWelfareRewardBack)
  // optional int32 welfareType = 1;
  if (has_welfaretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->welfaretype(), target);
  }

  // repeated .WelfareStruct welfareStruct = 2;
  for (int i = 0; i < this->welfarestruct_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->welfarestruct(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetWelfareRewardBack)
  return target;
}

int GCGetWelfareRewardBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 welfareType = 1;
    if (has_welfaretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->welfaretype());
    }

  }
  // repeated .WelfareStruct welfareStruct = 2;
  total_size += 1 * this->welfarestruct_size();
  for (int i = 0; i < this->welfarestruct_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->welfarestruct(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetWelfareRewardBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetWelfareRewardBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetWelfareRewardBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetWelfareRewardBack::MergeFrom(const GCGetWelfareRewardBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  welfarestruct_.MergeFrom(from.welfarestruct_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_welfaretype()) {
      set_welfaretype(from.welfaretype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetWelfareRewardBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetWelfareRewardBack::CopyFrom(const GCGetWelfareRewardBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetWelfareRewardBack::IsInitialized() const {

  return true;
}

void GCGetWelfareRewardBack::Swap(GCGetWelfareRewardBack* other) {
  if (other != this) {
    std::swap(welfaretype_, other->welfaretype_);
    welfarestruct_.Swap(&other->welfarestruct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetWelfareRewardBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetWelfareRewardBack_descriptor_;
  metadata.reflection = GCGetWelfareRewardBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetLevelRewardOver::kIdFieldNumber;
#endif  // !_MSC_VER

CGGetLevelRewardOver::CGGetLevelRewardOver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetLevelRewardOver)
}

void CGGetLevelRewardOver::InitAsDefaultInstance() {
}

CGGetLevelRewardOver::CGGetLevelRewardOver(const CGGetLevelRewardOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetLevelRewardOver)
}

void CGGetLevelRewardOver::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetLevelRewardOver::~CGGetLevelRewardOver() {
  // @@protoc_insertion_point(destructor:CGGetLevelRewardOver)
  SharedDtor();
}

void CGGetLevelRewardOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetLevelRewardOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetLevelRewardOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetLevelRewardOver_descriptor_;
}

const CGGetLevelRewardOver& CGGetLevelRewardOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

CGGetLevelRewardOver* CGGetLevelRewardOver::default_instance_ = NULL;

CGGetLevelRewardOver* CGGetLevelRewardOver::New() const {
  return new CGGetLevelRewardOver;
}

void CGGetLevelRewardOver::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetLevelRewardOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetLevelRewardOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetLevelRewardOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetLevelRewardOver)
  return false;
#undef DO_
}

void CGGetLevelRewardOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetLevelRewardOver)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetLevelRewardOver)
}

::google::protobuf::uint8* CGGetLevelRewardOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetLevelRewardOver)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetLevelRewardOver)
  return target;
}

int CGGetLevelRewardOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetLevelRewardOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetLevelRewardOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetLevelRewardOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetLevelRewardOver::MergeFrom(const CGGetLevelRewardOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetLevelRewardOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetLevelRewardOver::CopyFrom(const CGGetLevelRewardOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetLevelRewardOver::IsInitialized() const {

  return true;
}

void CGGetLevelRewardOver::Swap(CGGetLevelRewardOver* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetLevelRewardOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetLevelRewardOver_descriptor_;
  metadata.reflection = CGGetLevelRewardOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetLevelRewardOverBack::kFlagFieldNumber;
const int GCGetLevelRewardOverBack::kWelfareStructFieldNumber;
#endif  // !_MSC_VER

GCGetLevelRewardOverBack::GCGetLevelRewardOverBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetLevelRewardOverBack)
}

void GCGetLevelRewardOverBack::InitAsDefaultInstance() {
}

GCGetLevelRewardOverBack::GCGetLevelRewardOverBack(const GCGetLevelRewardOverBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetLevelRewardOverBack)
}

void GCGetLevelRewardOverBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetLevelRewardOverBack::~GCGetLevelRewardOverBack() {
  // @@protoc_insertion_point(destructor:GCGetLevelRewardOverBack)
  SharedDtor();
}

void GCGetLevelRewardOverBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetLevelRewardOverBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetLevelRewardOverBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetLevelRewardOverBack_descriptor_;
}

const GCGetLevelRewardOverBack& GCGetLevelRewardOverBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCGetLevelRewardOverBack* GCGetLevelRewardOverBack::default_instance_ = NULL;

GCGetLevelRewardOverBack* GCGetLevelRewardOverBack::New() const {
  return new GCGetLevelRewardOverBack;
}

void GCGetLevelRewardOverBack::Clear() {
  flag_ = 0;
  welfarestruct_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetLevelRewardOverBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetLevelRewardOverBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_welfareStruct;
        break;
      }

      // repeated .WelfareStruct welfareStruct = 2;
      case 2: {
        if (tag == 18) {
         parse_welfareStruct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_welfarestruct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_welfareStruct;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetLevelRewardOverBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetLevelRewardOverBack)
  return false;
#undef DO_
}

void GCGetLevelRewardOverBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetLevelRewardOverBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // repeated .WelfareStruct welfareStruct = 2;
  for (int i = 0; i < this->welfarestruct_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->welfarestruct(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetLevelRewardOverBack)
}

::google::protobuf::uint8* GCGetLevelRewardOverBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetLevelRewardOverBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // repeated .WelfareStruct welfareStruct = 2;
  for (int i = 0; i < this->welfarestruct_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->welfarestruct(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetLevelRewardOverBack)
  return target;
}

int GCGetLevelRewardOverBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  // repeated .WelfareStruct welfareStruct = 2;
  total_size += 1 * this->welfarestruct_size();
  for (int i = 0; i < this->welfarestruct_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->welfarestruct(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetLevelRewardOverBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetLevelRewardOverBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetLevelRewardOverBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetLevelRewardOverBack::MergeFrom(const GCGetLevelRewardOverBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  welfarestruct_.MergeFrom(from.welfarestruct_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetLevelRewardOverBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetLevelRewardOverBack::CopyFrom(const GCGetLevelRewardOverBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetLevelRewardOverBack::IsInitialized() const {

  return true;
}

void GCGetLevelRewardOverBack::Swap(GCGetLevelRewardOverBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    welfarestruct_.Swap(&other->welfarestruct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetLevelRewardOverBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetLevelRewardOverBack_descriptor_;
  metadata.reflection = GCGetLevelRewardOverBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPushContinuousLandDayNum::kDayNumFieldNumber;
#endif  // !_MSC_VER

GCPushContinuousLandDayNum::GCPushContinuousLandDayNum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPushContinuousLandDayNum)
}

void GCPushContinuousLandDayNum::InitAsDefaultInstance() {
}

GCPushContinuousLandDayNum::GCPushContinuousLandDayNum(const GCPushContinuousLandDayNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPushContinuousLandDayNum)
}

void GCPushContinuousLandDayNum::SharedCtor() {
  _cached_size_ = 0;
  daynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPushContinuousLandDayNum::~GCPushContinuousLandDayNum() {
  // @@protoc_insertion_point(destructor:GCPushContinuousLandDayNum)
  SharedDtor();
}

void GCPushContinuousLandDayNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPushContinuousLandDayNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPushContinuousLandDayNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPushContinuousLandDayNum_descriptor_;
}

const GCPushContinuousLandDayNum& GCPushContinuousLandDayNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCPushContinuousLandDayNum* GCPushContinuousLandDayNum::default_instance_ = NULL;

GCPushContinuousLandDayNum* GCPushContinuousLandDayNum::New() const {
  return new GCPushContinuousLandDayNum;
}

void GCPushContinuousLandDayNum::Clear() {
  daynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPushContinuousLandDayNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPushContinuousLandDayNum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dayNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daynum_)));
          set_has_daynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPushContinuousLandDayNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPushContinuousLandDayNum)
  return false;
#undef DO_
}

void GCPushContinuousLandDayNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPushContinuousLandDayNum)
  // optional int32 dayNum = 1;
  if (has_daynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->daynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPushContinuousLandDayNum)
}

::google::protobuf::uint8* GCPushContinuousLandDayNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPushContinuousLandDayNum)
  // optional int32 dayNum = 1;
  if (has_daynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->daynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPushContinuousLandDayNum)
  return target;
}

int GCPushContinuousLandDayNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dayNum = 1;
    if (has_daynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPushContinuousLandDayNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPushContinuousLandDayNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPushContinuousLandDayNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPushContinuousLandDayNum::MergeFrom(const GCPushContinuousLandDayNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daynum()) {
      set_daynum(from.daynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPushContinuousLandDayNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPushContinuousLandDayNum::CopyFrom(const GCPushContinuousLandDayNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPushContinuousLandDayNum::IsInitialized() const {

  return true;
}

void GCPushContinuousLandDayNum::Swap(GCPushContinuousLandDayNum* other) {
  if (other != this) {
    std::swap(daynum_, other->daynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPushContinuousLandDayNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPushContinuousLandDayNum_descriptor_;
  metadata.reflection = GCPushContinuousLandDayNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGContinuousLandOver::CGContinuousLandOver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGContinuousLandOver)
}

void CGContinuousLandOver::InitAsDefaultInstance() {
}

CGContinuousLandOver::CGContinuousLandOver(const CGContinuousLandOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGContinuousLandOver)
}

void CGContinuousLandOver::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGContinuousLandOver::~CGContinuousLandOver() {
  // @@protoc_insertion_point(destructor:CGContinuousLandOver)
  SharedDtor();
}

void CGContinuousLandOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGContinuousLandOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGContinuousLandOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGContinuousLandOver_descriptor_;
}

const CGContinuousLandOver& CGContinuousLandOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

CGContinuousLandOver* CGContinuousLandOver::default_instance_ = NULL;

CGContinuousLandOver* CGContinuousLandOver::New() const {
  return new CGContinuousLandOver;
}

void CGContinuousLandOver::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGContinuousLandOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGContinuousLandOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGContinuousLandOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGContinuousLandOver)
  return false;
#undef DO_
}

void CGContinuousLandOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGContinuousLandOver)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGContinuousLandOver)
}

::google::protobuf::uint8* CGContinuousLandOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGContinuousLandOver)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGContinuousLandOver)
  return target;
}

int CGContinuousLandOver::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGContinuousLandOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGContinuousLandOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGContinuousLandOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGContinuousLandOver::MergeFrom(const CGContinuousLandOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGContinuousLandOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGContinuousLandOver::CopyFrom(const CGContinuousLandOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGContinuousLandOver::IsInitialized() const {

  return true;
}

void CGContinuousLandOver::Swap(CGContinuousLandOver* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGContinuousLandOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGContinuousLandOver_descriptor_;
  metadata.reflection = CGContinuousLandOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCContinuousLandOverBack::kFlagFieldNumber;
const int GCContinuousLandOverBack::kWelfareStructFieldNumber;
#endif  // !_MSC_VER

GCContinuousLandOverBack::GCContinuousLandOverBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCContinuousLandOverBack)
}

void GCContinuousLandOverBack::InitAsDefaultInstance() {
}

GCContinuousLandOverBack::GCContinuousLandOverBack(const GCContinuousLandOverBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCContinuousLandOverBack)
}

void GCContinuousLandOverBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCContinuousLandOverBack::~GCContinuousLandOverBack() {
  // @@protoc_insertion_point(destructor:GCContinuousLandOverBack)
  SharedDtor();
}

void GCContinuousLandOverBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCContinuousLandOverBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCContinuousLandOverBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCContinuousLandOverBack_descriptor_;
}

const GCContinuousLandOverBack& GCContinuousLandOverBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCContinuousLandOverBack* GCContinuousLandOverBack::default_instance_ = NULL;

GCContinuousLandOverBack* GCContinuousLandOverBack::New() const {
  return new GCContinuousLandOverBack;
}

void GCContinuousLandOverBack::Clear() {
  flag_ = 0;
  welfarestruct_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCContinuousLandOverBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCContinuousLandOverBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_welfareStruct;
        break;
      }

      // repeated .WelfareStruct welfareStruct = 2;
      case 2: {
        if (tag == 18) {
         parse_welfareStruct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_welfarestruct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_welfareStruct;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCContinuousLandOverBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCContinuousLandOverBack)
  return false;
#undef DO_
}

void GCContinuousLandOverBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCContinuousLandOverBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // repeated .WelfareStruct welfareStruct = 2;
  for (int i = 0; i < this->welfarestruct_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->welfarestruct(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCContinuousLandOverBack)
}

::google::protobuf::uint8* GCContinuousLandOverBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCContinuousLandOverBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // repeated .WelfareStruct welfareStruct = 2;
  for (int i = 0; i < this->welfarestruct_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->welfarestruct(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCContinuousLandOverBack)
  return target;
}

int GCContinuousLandOverBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  // repeated .WelfareStruct welfareStruct = 2;
  total_size += 1 * this->welfarestruct_size();
  for (int i = 0; i < this->welfarestruct_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->welfarestruct(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCContinuousLandOverBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCContinuousLandOverBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCContinuousLandOverBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCContinuousLandOverBack::MergeFrom(const GCContinuousLandOverBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  welfarestruct_.MergeFrom(from.welfarestruct_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCContinuousLandOverBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCContinuousLandOverBack::CopyFrom(const GCContinuousLandOverBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCContinuousLandOverBack::IsInitialized() const {

  return true;
}

void GCContinuousLandOverBack::Swap(GCContinuousLandOverBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    welfarestruct_.Swap(&other->welfarestruct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCContinuousLandOverBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCContinuousLandOverBack_descriptor_;
  metadata.reflection = GCContinuousLandOverBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGRequestGetReward::kTypeFieldNumber;
#endif  // !_MSC_VER

CGRequestGetReward::CGRequestGetReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGRequestGetReward)
}

void CGRequestGetReward::InitAsDefaultInstance() {
}

CGRequestGetReward::CGRequestGetReward(const CGRequestGetReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGRequestGetReward)
}

void CGRequestGetReward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGRequestGetReward::~CGRequestGetReward() {
  // @@protoc_insertion_point(destructor:CGRequestGetReward)
  SharedDtor();
}

void CGRequestGetReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGRequestGetReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGRequestGetReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGRequestGetReward_descriptor_;
}

const CGRequestGetReward& CGRequestGetReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

CGRequestGetReward* CGRequestGetReward::default_instance_ = NULL;

CGRequestGetReward* CGRequestGetReward::New() const {
  return new CGRequestGetReward;
}

void CGRequestGetReward::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGRequestGetReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGRequestGetReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGRequestGetReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGRequestGetReward)
  return false;
#undef DO_
}

void CGRequestGetReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGRequestGetReward)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGRequestGetReward)
}

::google::protobuf::uint8* CGRequestGetReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGRequestGetReward)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGRequestGetReward)
  return target;
}

int CGRequestGetReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGRequestGetReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGRequestGetReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGRequestGetReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGRequestGetReward::MergeFrom(const CGRequestGetReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGRequestGetReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGRequestGetReward::CopyFrom(const CGRequestGetReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGRequestGetReward::IsInitialized() const {

  return true;
}

void CGRequestGetReward::Swap(CGRequestGetReward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGRequestGetReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGRequestGetReward_descriptor_;
  metadata.reflection = CGRequestGetReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRequestGetRewardBack::kTypeFieldNumber;
const int GCRequestGetRewardBack::kFlagFieldNumber;
#endif  // !_MSC_VER

GCRequestGetRewardBack::GCRequestGetRewardBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRequestGetRewardBack)
}

void GCRequestGetRewardBack::InitAsDefaultInstance() {
}

GCRequestGetRewardBack::GCRequestGetRewardBack(const GCRequestGetRewardBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRequestGetRewardBack)
}

void GCRequestGetRewardBack::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRequestGetRewardBack::~GCRequestGetRewardBack() {
  // @@protoc_insertion_point(destructor:GCRequestGetRewardBack)
  SharedDtor();
}

void GCRequestGetRewardBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRequestGetRewardBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRequestGetRewardBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRequestGetRewardBack_descriptor_;
}

const GCRequestGetRewardBack& GCRequestGetRewardBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCRequestGetRewardBack* GCRequestGetRewardBack::default_instance_ = NULL;

GCRequestGetRewardBack* GCRequestGetRewardBack::New() const {
  return new GCRequestGetRewardBack;
}

void GCRequestGetRewardBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCRequestGetRewardBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRequestGetRewardBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRequestGetRewardBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRequestGetRewardBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRequestGetRewardBack)
  return false;
#undef DO_
}

void GCRequestGetRewardBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRequestGetRewardBack)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRequestGetRewardBack)
}

::google::protobuf::uint8* GCRequestGetRewardBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRequestGetRewardBack)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRequestGetRewardBack)
  return target;
}

int GCRequestGetRewardBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRequestGetRewardBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRequestGetRewardBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRequestGetRewardBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRequestGetRewardBack::MergeFrom(const GCRequestGetRewardBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRequestGetRewardBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRequestGetRewardBack::CopyFrom(const GCRequestGetRewardBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRequestGetRewardBack::IsInitialized() const {

  return true;
}

void GCRequestGetRewardBack::Swap(GCRequestGetRewardBack* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRequestGetRewardBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRequestGetRewardBack_descriptor_;
  metadata.reflection = GCRequestGetRewardBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGDailyShare::kTypeFieldNumber;
#endif  // !_MSC_VER

CGDailyShare::CGDailyShare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGDailyShare)
}

void CGDailyShare::InitAsDefaultInstance() {
}

CGDailyShare::CGDailyShare(const CGDailyShare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGDailyShare)
}

void CGDailyShare::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGDailyShare::~CGDailyShare() {
  // @@protoc_insertion_point(destructor:CGDailyShare)
  SharedDtor();
}

void CGDailyShare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGDailyShare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGDailyShare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGDailyShare_descriptor_;
}

const CGDailyShare& CGDailyShare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

CGDailyShare* CGDailyShare::default_instance_ = NULL;

CGDailyShare* CGDailyShare::New() const {
  return new CGDailyShare;
}

void CGDailyShare::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGDailyShare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGDailyShare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGDailyShare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGDailyShare)
  return false;
#undef DO_
}

void CGDailyShare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGDailyShare)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGDailyShare)
}

::google::protobuf::uint8* CGDailyShare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGDailyShare)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGDailyShare)
  return target;
}

int CGDailyShare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGDailyShare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGDailyShare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGDailyShare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGDailyShare::MergeFrom(const CGDailyShare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGDailyShare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGDailyShare::CopyFrom(const CGDailyShare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGDailyShare::IsInitialized() const {

  return true;
}

void CGDailyShare::Swap(CGDailyShare* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGDailyShare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGDailyShare_descriptor_;
  metadata.reflection = CGDailyShare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDailyShare::kTypeFieldNumber;
#endif  // !_MSC_VER

GCDailyShare::GCDailyShare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDailyShare)
}

void GCDailyShare::InitAsDefaultInstance() {
}

GCDailyShare::GCDailyShare(const GCDailyShare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDailyShare)
}

void GCDailyShare::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDailyShare::~GCDailyShare() {
  // @@protoc_insertion_point(destructor:GCDailyShare)
  SharedDtor();
}

void GCDailyShare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDailyShare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDailyShare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDailyShare_descriptor_;
}

const GCDailyShare& GCDailyShare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCDailyShare* GCDailyShare::default_instance_ = NULL;

GCDailyShare* GCDailyShare::New() const {
  return new GCDailyShare;
}

void GCDailyShare::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDailyShare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDailyShare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDailyShare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDailyShare)
  return false;
#undef DO_
}

void GCDailyShare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDailyShare)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDailyShare)
}

::google::protobuf::uint8* GCDailyShare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDailyShare)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDailyShare)
  return target;
}

int GCDailyShare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDailyShare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDailyShare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDailyShare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDailyShare::MergeFrom(const GCDailyShare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDailyShare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDailyShare::CopyFrom(const GCDailyShare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDailyShare::IsInitialized() const {

  return true;
}

void GCDailyShare::Swap(GCDailyShare* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDailyShare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDailyShare_descriptor_;
  metadata.reflection = GCDailyShare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetLoginReward::kTypeFieldNumber;
const int CGGetLoginReward::kIdFieldNumber;
#endif  // !_MSC_VER

CGGetLoginReward::CGGetLoginReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetLoginReward)
}

void CGGetLoginReward::InitAsDefaultInstance() {
}

CGGetLoginReward::CGGetLoginReward(const CGGetLoginReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetLoginReward)
}

void CGGetLoginReward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetLoginReward::~CGGetLoginReward() {
  // @@protoc_insertion_point(destructor:CGGetLoginReward)
  SharedDtor();
}

void CGGetLoginReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetLoginReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetLoginReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetLoginReward_descriptor_;
}

const CGGetLoginReward& CGGetLoginReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

CGGetLoginReward* CGGetLoginReward::default_instance_ = NULL;

CGGetLoginReward* CGGetLoginReward::New() const {
  return new CGGetLoginReward;
}

void CGGetLoginReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetLoginReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetLoginReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetLoginReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetLoginReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetLoginReward)
  return false;
#undef DO_
}

void CGGetLoginReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetLoginReward)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetLoginReward)
}

::google::protobuf::uint8* CGGetLoginReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetLoginReward)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetLoginReward)
  return target;
}

int CGGetLoginReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetLoginReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetLoginReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetLoginReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetLoginReward::MergeFrom(const CGGetLoginReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetLoginReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetLoginReward::CopyFrom(const CGGetLoginReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetLoginReward::IsInitialized() const {

  return true;
}

void CGGetLoginReward::Swap(CGGetLoginReward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetLoginReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetLoginReward_descriptor_;
  metadata.reflection = CGGetLoginReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetLoginReward::kTypeFieldNumber;
const int GCGetLoginReward::kFlagFieldNumber;
const int GCGetLoginReward::kWelfareStructFieldNumber;
#endif  // !_MSC_VER

GCGetLoginReward::GCGetLoginReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetLoginReward)
}

void GCGetLoginReward::InitAsDefaultInstance() {
  welfarestruct_ = const_cast< ::WelfareStruct*>(&::WelfareStruct::default_instance());
}

GCGetLoginReward::GCGetLoginReward(const GCGetLoginReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetLoginReward)
}

void GCGetLoginReward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  flag_ = 0;
  welfarestruct_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetLoginReward::~GCGetLoginReward() {
  // @@protoc_insertion_point(destructor:GCGetLoginReward)
  SharedDtor();
}

void GCGetLoginReward::SharedDtor() {
  if (this != default_instance_) {
    delete welfarestruct_;
  }
}

void GCGetLoginReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetLoginReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetLoginReward_descriptor_;
}

const GCGetLoginReward& GCGetLoginReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCGetLoginReward* GCGetLoginReward::default_instance_ = NULL;

GCGetLoginReward* GCGetLoginReward::New() const {
  return new GCGetLoginReward;
}

void GCGetLoginReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGetLoginReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, flag_);
    if (has_welfarestruct()) {
      if (welfarestruct_ != NULL) welfarestruct_->::WelfareStruct::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetLoginReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetLoginReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_welfareStruct;
        break;
      }

      // optional .WelfareStruct welfareStruct = 3;
      case 3: {
        if (tag == 26) {
         parse_welfareStruct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_welfarestruct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetLoginReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetLoginReward)
  return false;
#undef DO_
}

void GCGetLoginReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetLoginReward)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  // optional .WelfareStruct welfareStruct = 3;
  if (has_welfarestruct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->welfarestruct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetLoginReward)
}

::google::protobuf::uint8* GCGetLoginReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetLoginReward)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  // optional .WelfareStruct welfareStruct = 3;
  if (has_welfarestruct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->welfarestruct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetLoginReward)
  return target;
}

int GCGetLoginReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional .WelfareStruct welfareStruct = 3;
    if (has_welfarestruct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->welfarestruct());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetLoginReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetLoginReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetLoginReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetLoginReward::MergeFrom(const GCGetLoginReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_welfarestruct()) {
      mutable_welfarestruct()->::WelfareStruct::MergeFrom(from.welfarestruct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetLoginReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetLoginReward::CopyFrom(const GCGetLoginReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetLoginReward::IsInitialized() const {

  return true;
}

void GCGetLoginReward::Swap(GCGetLoginReward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(flag_, other->flag_);
    std::swap(welfarestruct_, other->welfarestruct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetLoginReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetLoginReward_descriptor_;
  metadata.reflection = GCGetLoginReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShareRewardInfo::kIdFieldNumber;
const int ShareRewardInfo::kGetTimeFieldNumber;
const int ShareRewardInfo::kStateFieldNumber;
#endif  // !_MSC_VER

ShareRewardInfo::ShareRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShareRewardInfo)
}

void ShareRewardInfo::InitAsDefaultInstance() {
}

ShareRewardInfo::ShareRewardInfo(const ShareRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShareRewardInfo)
}

void ShareRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  gettime_ = GOOGLE_LONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareRewardInfo::~ShareRewardInfo() {
  // @@protoc_insertion_point(destructor:ShareRewardInfo)
  SharedDtor();
}

void ShareRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShareRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareRewardInfo_descriptor_;
}

const ShareRewardInfo& ShareRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

ShareRewardInfo* ShareRewardInfo::default_instance_ = NULL;

ShareRewardInfo* ShareRewardInfo::New() const {
  return new ShareRewardInfo;
}

void ShareRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShareRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gettime_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShareRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_getTime;
        break;
      }

      // optional int64 getTime = 2;
      case 2: {
        if (tag == 16) {
         parse_getTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gettime_)));
          set_has_gettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShareRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShareRewardInfo)
  return false;
#undef DO_
}

void ShareRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShareRewardInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 getTime = 2;
  if (has_gettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gettime(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShareRewardInfo)
}

::google::protobuf::uint8* ShareRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShareRewardInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 getTime = 2;
  if (has_gettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gettime(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShareRewardInfo)
  return target;
}

int ShareRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 getTime = 2;
    if (has_gettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gettime());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareRewardInfo::MergeFrom(const ShareRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gettime()) {
      set_gettime(from.gettime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareRewardInfo::CopyFrom(const ShareRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareRewardInfo::IsInitialized() const {

  return true;
}

void ShareRewardInfo::Swap(ShareRewardInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gettime_, other->gettime_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareRewardInfo_descriptor_;
  metadata.reflection = ShareRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCShareRewardInfo::kRewardInfoListFieldNumber;
#endif  // !_MSC_VER

GCShareRewardInfo::GCShareRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCShareRewardInfo)
}

void GCShareRewardInfo::InitAsDefaultInstance() {
}

GCShareRewardInfo::GCShareRewardInfo(const GCShareRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCShareRewardInfo)
}

void GCShareRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCShareRewardInfo::~GCShareRewardInfo() {
  // @@protoc_insertion_point(destructor:GCShareRewardInfo)
  SharedDtor();
}

void GCShareRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCShareRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCShareRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCShareRewardInfo_descriptor_;
}

const GCShareRewardInfo& GCShareRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCShareRewardInfo* GCShareRewardInfo::default_instance_ = NULL;

GCShareRewardInfo* GCShareRewardInfo::New() const {
  return new GCShareRewardInfo;
}

void GCShareRewardInfo::Clear() {
  rewardinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCShareRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCShareRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ShareRewardInfo rewardInfoList = 1;
      case 1: {
        if (tag == 10) {
         parse_rewardInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardinfolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rewardInfoList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCShareRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCShareRewardInfo)
  return false;
#undef DO_
}

void GCShareRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCShareRewardInfo)
  // repeated .ShareRewardInfo rewardInfoList = 1;
  for (int i = 0; i < this->rewardinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCShareRewardInfo)
}

::google::protobuf::uint8* GCShareRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCShareRewardInfo)
  // repeated .ShareRewardInfo rewardInfoList = 1;
  for (int i = 0; i < this->rewardinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCShareRewardInfo)
  return target;
}

int GCShareRewardInfo::ByteSize() const {
  int total_size = 0;

  // repeated .ShareRewardInfo rewardInfoList = 1;
  total_size += 1 * this->rewardinfolist_size();
  for (int i = 0; i < this->rewardinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCShareRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCShareRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCShareRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCShareRewardInfo::MergeFrom(const GCShareRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardinfolist_.MergeFrom(from.rewardinfolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCShareRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCShareRewardInfo::CopyFrom(const GCShareRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCShareRewardInfo::IsInitialized() const {

  return true;
}

void GCShareRewardInfo::Swap(GCShareRewardInfo* other) {
  if (other != this) {
    rewardinfolist_.Swap(&other->rewardinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCShareRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCShareRewardInfo_descriptor_;
  metadata.reflection = GCShareRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetShareReward::kIdFieldNumber;
const int CGGetShareReward::kTypeFieldNumber;
#endif  // !_MSC_VER

CGGetShareReward::CGGetShareReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetShareReward)
}

void CGGetShareReward::InitAsDefaultInstance() {
}

CGGetShareReward::CGGetShareReward(const CGGetShareReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetShareReward)
}

void CGGetShareReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetShareReward::~CGGetShareReward() {
  // @@protoc_insertion_point(destructor:CGGetShareReward)
  SharedDtor();
}

void CGGetShareReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetShareReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetShareReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetShareReward_descriptor_;
}

const CGGetShareReward& CGGetShareReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

CGGetShareReward* CGGetShareReward::default_instance_ = NULL;

CGGetShareReward* CGGetShareReward::New() const {
  return new CGGetShareReward;
}

void CGGetShareReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetShareReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetShareReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetShareReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetShareReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetShareReward)
  return false;
#undef DO_
}

void CGGetShareReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetShareReward)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetShareReward)
}

::google::protobuf::uint8* CGGetShareReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetShareReward)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetShareReward)
  return target;
}

int CGGetShareReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetShareReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetShareReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetShareReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetShareReward::MergeFrom(const CGGetShareReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetShareReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetShareReward::CopyFrom(const CGGetShareReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetShareReward::IsInitialized() const {

  return true;
}

void CGGetShareReward::Swap(CGGetShareReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetShareReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetShareReward_descriptor_;
  metadata.reflection = CGGetShareReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetShareReward::kFlagFieldNumber;
const int GCGetShareReward::kRewardInfoFieldNumber;
#endif  // !_MSC_VER

GCGetShareReward::GCGetShareReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetShareReward)
}

void GCGetShareReward::InitAsDefaultInstance() {
  rewardinfo_ = const_cast< ::ShareRewardInfo*>(&::ShareRewardInfo::default_instance());
}

GCGetShareReward::GCGetShareReward(const GCGetShareReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetShareReward)
}

void GCGetShareReward::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  rewardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetShareReward::~GCGetShareReward() {
  // @@protoc_insertion_point(destructor:GCGetShareReward)
  SharedDtor();
}

void GCGetShareReward::SharedDtor() {
  if (this != default_instance_) {
    delete rewardinfo_;
  }
}

void GCGetShareReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetShareReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetShareReward_descriptor_;
}

const GCGetShareReward& GCGetShareReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCGetShareReward* GCGetShareReward::default_instance_ = NULL;

GCGetShareReward* GCGetShareReward::New() const {
  return new GCGetShareReward;
}

void GCGetShareReward::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    flag_ = 0;
    if (has_rewardinfo()) {
      if (rewardinfo_ != NULL) rewardinfo_->::ShareRewardInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetShareReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetShareReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rewardInfo;
        break;
      }

      // optional .ShareRewardInfo rewardInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_rewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetShareReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetShareReward)
  return false;
#undef DO_
}

void GCGetShareReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetShareReward)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional .ShareRewardInfo rewardInfo = 2;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetShareReward)
}

::google::protobuf::uint8* GCGetShareReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetShareReward)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional .ShareRewardInfo rewardInfo = 2;
  if (has_rewardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetShareReward)
  return target;
}

int GCGetShareReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional .ShareRewardInfo rewardInfo = 2;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewardinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetShareReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetShareReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetShareReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetShareReward::MergeFrom(const GCGetShareReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_rewardinfo()) {
      mutable_rewardinfo()->::ShareRewardInfo::MergeFrom(from.rewardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetShareReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetShareReward::CopyFrom(const GCGetShareReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetShareReward::IsInitialized() const {

  return true;
}

void GCGetShareReward::Swap(GCGetShareReward* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetShareReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetShareReward_descriptor_;
  metadata.reflection = GCGetShareReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCOnlineViewSts::kFlagFieldNumber;
#endif  // !_MSC_VER

GCOnlineViewSts::GCOnlineViewSts()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCOnlineViewSts)
}

void GCOnlineViewSts::InitAsDefaultInstance() {
}

GCOnlineViewSts::GCOnlineViewSts(const GCOnlineViewSts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCOnlineViewSts)
}

void GCOnlineViewSts::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCOnlineViewSts::~GCOnlineViewSts() {
  // @@protoc_insertion_point(destructor:GCOnlineViewSts)
  SharedDtor();
}

void GCOnlineViewSts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCOnlineViewSts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCOnlineViewSts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCOnlineViewSts_descriptor_;
}

const GCOnlineViewSts& GCOnlineViewSts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCOnlineViewSts* GCOnlineViewSts::default_instance_ = NULL;

GCOnlineViewSts* GCOnlineViewSts::New() const {
  return new GCOnlineViewSts;
}

void GCOnlineViewSts::Clear() {
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCOnlineViewSts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCOnlineViewSts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCOnlineViewSts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCOnlineViewSts)
  return false;
#undef DO_
}

void GCOnlineViewSts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCOnlineViewSts)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCOnlineViewSts)
}

::google::protobuf::uint8* GCOnlineViewSts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCOnlineViewSts)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCOnlineViewSts)
  return target;
}

int GCOnlineViewSts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCOnlineViewSts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCOnlineViewSts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCOnlineViewSts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCOnlineViewSts::MergeFrom(const GCOnlineViewSts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCOnlineViewSts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCOnlineViewSts::CopyFrom(const GCOnlineViewSts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCOnlineViewSts::IsInitialized() const {

  return true;
}

void GCOnlineViewSts::Swap(GCOnlineViewSts* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCOnlineViewSts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCOnlineViewSts_descriptor_;
  metadata.reflection = GCOnlineViewSts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGRwdOnLineGift::CGRwdOnLineGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGRwdOnLineGift)
}

void CGRwdOnLineGift::InitAsDefaultInstance() {
}

CGRwdOnLineGift::CGRwdOnLineGift(const CGRwdOnLineGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGRwdOnLineGift)
}

void CGRwdOnLineGift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGRwdOnLineGift::~CGRwdOnLineGift() {
  // @@protoc_insertion_point(destructor:CGRwdOnLineGift)
  SharedDtor();
}

void CGRwdOnLineGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGRwdOnLineGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGRwdOnLineGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGRwdOnLineGift_descriptor_;
}

const CGRwdOnLineGift& CGRwdOnLineGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

CGRwdOnLineGift* CGRwdOnLineGift::default_instance_ = NULL;

CGRwdOnLineGift* CGRwdOnLineGift::New() const {
  return new CGRwdOnLineGift;
}

void CGRwdOnLineGift::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGRwdOnLineGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGRwdOnLineGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGRwdOnLineGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGRwdOnLineGift)
  return false;
#undef DO_
}

void CGRwdOnLineGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGRwdOnLineGift)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGRwdOnLineGift)
}

::google::protobuf::uint8* CGRwdOnLineGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGRwdOnLineGift)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGRwdOnLineGift)
  return target;
}

int CGRwdOnLineGift::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGRwdOnLineGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGRwdOnLineGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGRwdOnLineGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGRwdOnLineGift::MergeFrom(const CGRwdOnLineGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGRwdOnLineGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGRwdOnLineGift::CopyFrom(const CGRwdOnLineGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGRwdOnLineGift::IsInitialized() const {

  return true;
}

void CGRwdOnLineGift::Swap(CGRwdOnLineGift* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGRwdOnLineGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGRwdOnLineGift_descriptor_;
  metadata.reflection = CGRwdOnLineGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRwdOnLineGift::kRwdsFieldNumber;
#endif  // !_MSC_VER

GCRwdOnLineGift::GCRwdOnLineGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRwdOnLineGift)
}

void GCRwdOnLineGift::InitAsDefaultInstance() {
}

GCRwdOnLineGift::GCRwdOnLineGift(const GCRwdOnLineGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRwdOnLineGift)
}

void GCRwdOnLineGift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRwdOnLineGift::~GCRwdOnLineGift() {
  // @@protoc_insertion_point(destructor:GCRwdOnLineGift)
  SharedDtor();
}

void GCRwdOnLineGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRwdOnLineGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRwdOnLineGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRwdOnLineGift_descriptor_;
}

const GCRwdOnLineGift& GCRwdOnLineGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCRwdOnLineGift* GCRwdOnLineGift::default_instance_ = NULL;

GCRwdOnLineGift* GCRwdOnLineGift::New() const {
  return new GCRwdOnLineGift;
}

void GCRwdOnLineGift::Clear() {
  rwds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRwdOnLineGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRwdOnLineGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WelfareStruct rwds = 1;
      case 1: {
        if (tag == 10) {
         parse_rwds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rwds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rwds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRwdOnLineGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRwdOnLineGift)
  return false;
#undef DO_
}

void GCRwdOnLineGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRwdOnLineGift)
  // repeated .WelfareStruct rwds = 1;
  for (int i = 0; i < this->rwds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rwds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRwdOnLineGift)
}

::google::protobuf::uint8* GCRwdOnLineGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRwdOnLineGift)
  // repeated .WelfareStruct rwds = 1;
  for (int i = 0; i < this->rwds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rwds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRwdOnLineGift)
  return target;
}

int GCRwdOnLineGift::ByteSize() const {
  int total_size = 0;

  // repeated .WelfareStruct rwds = 1;
  total_size += 1 * this->rwds_size();
  for (int i = 0; i < this->rwds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rwds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRwdOnLineGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRwdOnLineGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRwdOnLineGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRwdOnLineGift::MergeFrom(const GCRwdOnLineGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  rwds_.MergeFrom(from.rwds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRwdOnLineGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRwdOnLineGift::CopyFrom(const GCRwdOnLineGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRwdOnLineGift::IsInitialized() const {

  return true;
}

void GCRwdOnLineGift::Swap(GCRwdOnLineGift* other) {
  if (other != this) {
    rwds_.Swap(&other->rwds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRwdOnLineGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRwdOnLineGift_descriptor_;
  metadata.reflection = GCRwdOnLineGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDoubleExpmsg::kDungeonTypeFieldNumber;
const int GCDoubleExpmsg::kStsFieldNumber;
#endif  // !_MSC_VER

GCDoubleExpmsg::GCDoubleExpmsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDoubleExpmsg)
}

void GCDoubleExpmsg::InitAsDefaultInstance() {
}

GCDoubleExpmsg::GCDoubleExpmsg(const GCDoubleExpmsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDoubleExpmsg)
}

void GCDoubleExpmsg::SharedCtor() {
  _cached_size_ = 0;
  sts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDoubleExpmsg::~GCDoubleExpmsg() {
  // @@protoc_insertion_point(destructor:GCDoubleExpmsg)
  SharedDtor();
}

void GCDoubleExpmsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDoubleExpmsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDoubleExpmsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDoubleExpmsg_descriptor_;
}

const GCDoubleExpmsg& GCDoubleExpmsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareMessage_2eproto();
  return *default_instance_;
}

GCDoubleExpmsg* GCDoubleExpmsg::default_instance_ = NULL;

GCDoubleExpmsg* GCDoubleExpmsg::New() const {
  return new GCDoubleExpmsg;
}

void GCDoubleExpmsg::Clear() {
  sts_ = 0;
  dungeontype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDoubleExpmsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDoubleExpmsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 dungeonType = 1;
      case 1: {
        if (tag == 8) {
         parse_dungeonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_dungeontype())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dungeontype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_dungeonType;
        if (input->ExpectTag(16)) goto parse_sts;
        break;
      }

      // optional int32 sts = 2;
      case 2: {
        if (tag == 16) {
         parse_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDoubleExpmsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDoubleExpmsg)
  return false;
#undef DO_
}

void GCDoubleExpmsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDoubleExpmsg)
  // repeated int32 dungeonType = 1;
  for (int i = 0; i < this->dungeontype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->dungeontype(i), output);
  }

  // optional int32 sts = 2;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDoubleExpmsg)
}

::google::protobuf::uint8* GCDoubleExpmsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDoubleExpmsg)
  // repeated int32 dungeonType = 1;
  for (int i = 0; i < this->dungeontype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->dungeontype(i), target);
  }

  // optional int32 sts = 2;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDoubleExpmsg)
  return target;
}

int GCDoubleExpmsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 sts = 2;
    if (has_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sts());
    }

  }
  // repeated int32 dungeonType = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dungeontype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dungeontype(i));
    }
    total_size += 1 * this->dungeontype_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDoubleExpmsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDoubleExpmsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDoubleExpmsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDoubleExpmsg::MergeFrom(const GCDoubleExpmsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  dungeontype_.MergeFrom(from.dungeontype_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sts()) {
      set_sts(from.sts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDoubleExpmsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDoubleExpmsg::CopyFrom(const GCDoubleExpmsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDoubleExpmsg::IsInitialized() const {

  return true;
}

void GCDoubleExpmsg::Swap(GCDoubleExpmsg* other) {
  if (other != this) {
    dungeontype_.Swap(&other->dungeontype_);
    std::swap(sts_, other->sts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDoubleExpmsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDoubleExpmsg_descriptor_;
  metadata.reflection = GCDoubleExpmsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
