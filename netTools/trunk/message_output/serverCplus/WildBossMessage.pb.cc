// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WildBossMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WildBossMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WildBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WildBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCWildBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCWildBossInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WildBossMessage_2eproto() {
  protobuf_AddDesc_WildBossMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WildBossMessage.proto");
  GOOGLE_CHECK(file != NULL);
  WildBossInfo_descriptor_ = file->message_type(0);
  static const int WildBossInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildBossInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildBossInfo, gangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildBossInfo, status_),
  };
  WildBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WildBossInfo_descriptor_,
      WildBossInfo::default_instance_,
      WildBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WildBossInfo));
  GCWildBossInfo_descriptor_ = file->message_type(1);
  static const int GCWildBossInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWildBossInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWildBossInfo, wildbosskillinfo_),
  };
  GCWildBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCWildBossInfo_descriptor_,
      GCWildBossInfo::default_instance_,
      GCWildBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWildBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWildBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCWildBossInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WildBossMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WildBossInfo_descriptor_, &WildBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCWildBossInfo_descriptor_, &GCWildBossInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WildBossMessage_2eproto() {
  delete WildBossInfo::default_instance_;
  delete WildBossInfo_reflection_;
  delete GCWildBossInfo::default_instance_;
  delete GCWildBossInfo_reflection_;
}

void protobuf_AddDesc_WildBossMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025WildBossMessage.proto\"<\n\014WildBossInfo\022"
    "\n\n\002id\030\001 \001(\005\022\020\n\010gangName\030\002 \001(\t\022\016\n\006status\030"
    "\003 \001(\005\"H\n\016GCWildBossInfo\022\r\n\005state\030\001 \001(\005\022\'"
    "\n\020WildBossKillInfo\030\002 \003(\0132\r.WildBossInfoB"
    "\031\n\027com.mile.common.message", 186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WildBossMessage.proto", &protobuf_RegisterTypes);
  WildBossInfo::default_instance_ = new WildBossInfo();
  GCWildBossInfo::default_instance_ = new GCWildBossInfo();
  WildBossInfo::default_instance_->InitAsDefaultInstance();
  GCWildBossInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WildBossMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WildBossMessage_2eproto {
  StaticDescriptorInitializer_WildBossMessage_2eproto() {
    protobuf_AddDesc_WildBossMessage_2eproto();
  }
} static_descriptor_initializer_WildBossMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WildBossInfo::kIdFieldNumber;
const int WildBossInfo::kGangNameFieldNumber;
const int WildBossInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

WildBossInfo::WildBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WildBossInfo)
}

void WildBossInfo::InitAsDefaultInstance() {
}

WildBossInfo::WildBossInfo(const WildBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WildBossInfo)
}

void WildBossInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WildBossInfo::~WildBossInfo() {
  // @@protoc_insertion_point(destructor:WildBossInfo)
  SharedDtor();
}

void WildBossInfo::SharedDtor() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (this != default_instance_) {
  }
}

void WildBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WildBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WildBossInfo_descriptor_;
}

const WildBossInfo& WildBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WildBossMessage_2eproto();
  return *default_instance_;
}

WildBossInfo* WildBossInfo::default_instance_ = NULL;

WildBossInfo* WildBossInfo::New() const {
  return new WildBossInfo;
}

void WildBossInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WildBossInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, status_);
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WildBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WildBossInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gangName;
        break;
      }

      // optional string gangName = 2;
      case 2: {
        if (tag == 18) {
         parse_gangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WildBossInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WildBossInfo)
  return false;
#undef DO_
}

void WildBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WildBossInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string gangName = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gangname(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WildBossInfo)
}

::google::protobuf::uint8* WildBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WildBossInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string gangName = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gangname(), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WildBossInfo)
  return target;
}

int WildBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string gangName = 2;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WildBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WildBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WildBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WildBossInfo::MergeFrom(const WildBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WildBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildBossInfo::CopyFrom(const WildBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildBossInfo::IsInitialized() const {

  return true;
}

void WildBossInfo::Swap(WildBossInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gangname_, other->gangname_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WildBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WildBossInfo_descriptor_;
  metadata.reflection = WildBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCWildBossInfo::kStateFieldNumber;
const int GCWildBossInfo::kWildBossKillInfoFieldNumber;
#endif  // !_MSC_VER

GCWildBossInfo::GCWildBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCWildBossInfo)
}

void GCWildBossInfo::InitAsDefaultInstance() {
}

GCWildBossInfo::GCWildBossInfo(const GCWildBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCWildBossInfo)
}

void GCWildBossInfo::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCWildBossInfo::~GCWildBossInfo() {
  // @@protoc_insertion_point(destructor:GCWildBossInfo)
  SharedDtor();
}

void GCWildBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCWildBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCWildBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCWildBossInfo_descriptor_;
}

const GCWildBossInfo& GCWildBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WildBossMessage_2eproto();
  return *default_instance_;
}

GCWildBossInfo* GCWildBossInfo::default_instance_ = NULL;

GCWildBossInfo* GCWildBossInfo::New() const {
  return new GCWildBossInfo;
}

void GCWildBossInfo::Clear() {
  state_ = 0;
  wildbosskillinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCWildBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCWildBossInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_WildBossKillInfo;
        break;
      }

      // repeated .WildBossInfo WildBossKillInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_WildBossKillInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wildbosskillinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_WildBossKillInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCWildBossInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCWildBossInfo)
  return false;
#undef DO_
}

void GCWildBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCWildBossInfo)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // repeated .WildBossInfo WildBossKillInfo = 2;
  for (int i = 0; i < this->wildbosskillinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wildbosskillinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCWildBossInfo)
}

::google::protobuf::uint8* GCWildBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCWildBossInfo)
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // repeated .WildBossInfo WildBossKillInfo = 2;
  for (int i = 0; i < this->wildbosskillinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wildbosskillinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCWildBossInfo)
  return target;
}

int GCWildBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  // repeated .WildBossInfo WildBossKillInfo = 2;
  total_size += 1 * this->wildbosskillinfo_size();
  for (int i = 0; i < this->wildbosskillinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wildbosskillinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCWildBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCWildBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCWildBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCWildBossInfo::MergeFrom(const GCWildBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  wildbosskillinfo_.MergeFrom(from.wildbosskillinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCWildBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCWildBossInfo::CopyFrom(const GCWildBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCWildBossInfo::IsInitialized() const {

  return true;
}

void GCWildBossInfo::Swap(GCWildBossInfo* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    wildbosskillinfo_.Swap(&other->wildbosskillinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCWildBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCWildBossInfo_descriptor_;
  metadata.reflection = GCWildBossInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
