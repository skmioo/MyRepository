// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldBossMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WorldBossMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WorldBossPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGWorldBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGWorldBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCWorldBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCWorldBossInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WorldBossMessage_2eproto() {
  protobuf_AddDesc_WorldBossMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WorldBossMessage.proto");
  GOOGLE_CHECK(file != NULL);
  WorldBossPlayerInfo_descriptor_ = file->message_type(0);
  static const int WorldBossPlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossPlayerInfo, inspiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossPlayerInfo, freeinspire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossPlayerInfo, payinspire_),
  };
  WorldBossPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossPlayerInfo_descriptor_,
      WorldBossPlayerInfo::default_instance_,
      WorldBossPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossPlayerInfo));
  CGWorldBossInfo_descriptor_ = file->message_type(1);
  static const int CGWorldBossInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGWorldBossInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGWorldBossInfo, playerid_),
  };
  CGWorldBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGWorldBossInfo_descriptor_,
      CGWorldBossInfo::default_instance_,
      CGWorldBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGWorldBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGWorldBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGWorldBossInfo));
  GCWorldBossInfo_descriptor_ = file->message_type(2);
  static const int GCWorldBossInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWorldBossInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWorldBossInfo, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWorldBossInfo, bossid_),
  };
  GCWorldBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCWorldBossInfo_descriptor_,
      GCWorldBossInfo::default_instance_,
      GCWorldBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWorldBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWorldBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCWorldBossInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WorldBossMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossPlayerInfo_descriptor_, &WorldBossPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGWorldBossInfo_descriptor_, &CGWorldBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCWorldBossInfo_descriptor_, &GCWorldBossInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WorldBossMessage_2eproto() {
  delete WorldBossPlayerInfo::default_instance_;
  delete WorldBossPlayerInfo_reflection_;
  delete CGWorldBossInfo::default_instance_;
  delete CGWorldBossInfo_reflection_;
  delete GCWorldBossInfo::default_instance_;
  delete GCWorldBossInfo_reflection_;
}

void protobuf_AddDesc_WorldBossMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026WorldBossMessage.proto\"S\n\023WorldBossPla"
    "yerInfo\022\023\n\013inspireTime\030\001 \001(\003\022\023\n\013freeInsp"
    "ire\030\002 \001(\005\022\022\n\npayInspire\030\003 \001(\005\"1\n\017CGWorld"
    "BossInfo\022\014\n\004type\030\001 \001(\005\022\020\n\010playerId\030\002 \001(\003"
    "\"Y\n\017GCWorldBossInfo\022\014\n\004type\030\001 \001(\005\022(\n\npla"
    "yerInfo\030\002 \001(\0132\024.WorldBossPlayerInfo\022\016\n\006b"
    "ossID\030\003 \001(\005B\031\n\027com.mile.common.message", 278);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WorldBossMessage.proto", &protobuf_RegisterTypes);
  WorldBossPlayerInfo::default_instance_ = new WorldBossPlayerInfo();
  CGWorldBossInfo::default_instance_ = new CGWorldBossInfo();
  GCWorldBossInfo::default_instance_ = new GCWorldBossInfo();
  WorldBossPlayerInfo::default_instance_->InitAsDefaultInstance();
  CGWorldBossInfo::default_instance_->InitAsDefaultInstance();
  GCWorldBossInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WorldBossMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WorldBossMessage_2eproto {
  StaticDescriptorInitializer_WorldBossMessage_2eproto() {
    protobuf_AddDesc_WorldBossMessage_2eproto();
  }
} static_descriptor_initializer_WorldBossMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WorldBossPlayerInfo::kInspireTimeFieldNumber;
const int WorldBossPlayerInfo::kFreeInspireFieldNumber;
const int WorldBossPlayerInfo::kPayInspireFieldNumber;
#endif  // !_MSC_VER

WorldBossPlayerInfo::WorldBossPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorldBossPlayerInfo)
}

void WorldBossPlayerInfo::InitAsDefaultInstance() {
}

WorldBossPlayerInfo::WorldBossPlayerInfo(const WorldBossPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WorldBossPlayerInfo)
}

void WorldBossPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  inspiretime_ = GOOGLE_LONGLONG(0);
  freeinspire_ = 0;
  payinspire_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossPlayerInfo::~WorldBossPlayerInfo() {
  // @@protoc_insertion_point(destructor:WorldBossPlayerInfo)
  SharedDtor();
}

void WorldBossPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossPlayerInfo_descriptor_;
}

const WorldBossPlayerInfo& WorldBossPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBossMessage_2eproto();
  return *default_instance_;
}

WorldBossPlayerInfo* WorldBossPlayerInfo::default_instance_ = NULL;

WorldBossPlayerInfo* WorldBossPlayerInfo::New() const {
  return new WorldBossPlayerInfo;
}

void WorldBossPlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldBossPlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(inspiretime_, payinspire_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBossPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WorldBossPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 inspireTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inspiretime_)));
          set_has_inspiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_freeInspire;
        break;
      }

      // optional int32 freeInspire = 2;
      case 2: {
        if (tag == 16) {
         parse_freeInspire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeinspire_)));
          set_has_freeinspire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_payInspire;
        break;
      }

      // optional int32 payInspire = 3;
      case 3: {
        if (tag == 24) {
         parse_payInspire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payinspire_)));
          set_has_payinspire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WorldBossPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WorldBossPlayerInfo)
  return false;
#undef DO_
}

void WorldBossPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WorldBossPlayerInfo)
  // optional int64 inspireTime = 1;
  if (has_inspiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->inspiretime(), output);
  }

  // optional int32 freeInspire = 2;
  if (has_freeinspire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->freeinspire(), output);
  }

  // optional int32 payInspire = 3;
  if (has_payinspire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->payinspire(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WorldBossPlayerInfo)
}

::google::protobuf::uint8* WorldBossPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldBossPlayerInfo)
  // optional int64 inspireTime = 1;
  if (has_inspiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->inspiretime(), target);
  }

  // optional int32 freeInspire = 2;
  if (has_freeinspire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->freeinspire(), target);
  }

  // optional int32 payInspire = 3;
  if (has_payinspire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->payinspire(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldBossPlayerInfo)
  return target;
}

int WorldBossPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 inspireTime = 1;
    if (has_inspiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inspiretime());
    }

    // optional int32 freeInspire = 2;
    if (has_freeinspire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeinspire());
    }

    // optional int32 payInspire = 3;
    if (has_payinspire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payinspire());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBossPlayerInfo::MergeFrom(const WorldBossPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inspiretime()) {
      set_inspiretime(from.inspiretime());
    }
    if (from.has_freeinspire()) {
      set_freeinspire(from.freeinspire());
    }
    if (from.has_payinspire()) {
      set_payinspire(from.payinspire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBossPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBossPlayerInfo::CopyFrom(const WorldBossPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossPlayerInfo::IsInitialized() const {

  return true;
}

void WorldBossPlayerInfo::Swap(WorldBossPlayerInfo* other) {
  if (other != this) {
    std::swap(inspiretime_, other->inspiretime_);
    std::swap(freeinspire_, other->freeinspire_);
    std::swap(payinspire_, other->payinspire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBossPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossPlayerInfo_descriptor_;
  metadata.reflection = WorldBossPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGWorldBossInfo::kTypeFieldNumber;
const int CGWorldBossInfo::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGWorldBossInfo::CGWorldBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGWorldBossInfo)
}

void CGWorldBossInfo::InitAsDefaultInstance() {
}

CGWorldBossInfo::CGWorldBossInfo(const CGWorldBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGWorldBossInfo)
}

void CGWorldBossInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGWorldBossInfo::~CGWorldBossInfo() {
  // @@protoc_insertion_point(destructor:CGWorldBossInfo)
  SharedDtor();
}

void CGWorldBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGWorldBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGWorldBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGWorldBossInfo_descriptor_;
}

const CGWorldBossInfo& CGWorldBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBossMessage_2eproto();
  return *default_instance_;
}

CGWorldBossInfo* CGWorldBossInfo::default_instance_ = NULL;

CGWorldBossInfo* CGWorldBossInfo::New() const {
  return new CGWorldBossInfo;
}

void CGWorldBossInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGWorldBossInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGWorldBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGWorldBossInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional int64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGWorldBossInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGWorldBossInfo)
  return false;
#undef DO_
}

void CGWorldBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGWorldBossInfo)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGWorldBossInfo)
}

::google::protobuf::uint8* CGWorldBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGWorldBossInfo)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGWorldBossInfo)
  return target;
}

int CGWorldBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGWorldBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGWorldBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGWorldBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGWorldBossInfo::MergeFrom(const CGWorldBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGWorldBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGWorldBossInfo::CopyFrom(const CGWorldBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGWorldBossInfo::IsInitialized() const {

  return true;
}

void CGWorldBossInfo::Swap(CGWorldBossInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGWorldBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGWorldBossInfo_descriptor_;
  metadata.reflection = CGWorldBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCWorldBossInfo::kTypeFieldNumber;
const int GCWorldBossInfo::kPlayerInfoFieldNumber;
const int GCWorldBossInfo::kBossIDFieldNumber;
#endif  // !_MSC_VER

GCWorldBossInfo::GCWorldBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCWorldBossInfo)
}

void GCWorldBossInfo::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::WorldBossPlayerInfo*>(&::WorldBossPlayerInfo::default_instance());
}

GCWorldBossInfo::GCWorldBossInfo(const GCWorldBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCWorldBossInfo)
}

void GCWorldBossInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  playerinfo_ = NULL;
  bossid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCWorldBossInfo::~GCWorldBossInfo() {
  // @@protoc_insertion_point(destructor:GCWorldBossInfo)
  SharedDtor();
}

void GCWorldBossInfo::SharedDtor() {
  if (this != default_instance_) {
    delete playerinfo_;
  }
}

void GCWorldBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCWorldBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCWorldBossInfo_descriptor_;
}

const GCWorldBossInfo& GCWorldBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBossMessage_2eproto();
  return *default_instance_;
}

GCWorldBossInfo* GCWorldBossInfo::default_instance_ = NULL;

GCWorldBossInfo* GCWorldBossInfo::New() const {
  return new GCWorldBossInfo;
}

void GCWorldBossInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCWorldBossInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, bossid_);
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::WorldBossPlayerInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCWorldBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCWorldBossInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerInfo;
        break;
      }

      // optional .WorldBossPlayerInfo playerInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bossID;
        break;
      }

      // optional int32 bossID = 3;
      case 3: {
        if (tag == 24) {
         parse_bossID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCWorldBossInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCWorldBossInfo)
  return false;
#undef DO_
}

void GCWorldBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCWorldBossInfo)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .WorldBossPlayerInfo playerInfo = 2;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerinfo(), output);
  }

  // optional int32 bossID = 3;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCWorldBossInfo)
}

::google::protobuf::uint8* GCWorldBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCWorldBossInfo)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .WorldBossPlayerInfo playerInfo = 2;
  if (has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerinfo(), target);
  }

  // optional int32 bossID = 3;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCWorldBossInfo)
  return target;
}

int GCWorldBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .WorldBossPlayerInfo playerInfo = 2;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

    // optional int32 bossID = 3;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCWorldBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCWorldBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCWorldBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCWorldBossInfo::MergeFrom(const GCWorldBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::WorldBossPlayerInfo::MergeFrom(from.playerinfo());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCWorldBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCWorldBossInfo::CopyFrom(const GCWorldBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCWorldBossInfo::IsInitialized() const {

  return true;
}

void GCWorldBossInfo::Swap(GCWorldBossInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCWorldBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCWorldBossInfo_descriptor_;
  metadata.reflection = GCWorldBossInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
