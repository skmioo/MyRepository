// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldBossMessage.proto

#ifndef PROTOBUF_WorldBossMessage_2eproto__INCLUDED
#define PROTOBUF_WorldBossMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WorldBossMessage_2eproto();
void protobuf_AssignDesc_WorldBossMessage_2eproto();
void protobuf_ShutdownFile_WorldBossMessage_2eproto();

class WorldBossPlayerInfo;
class CGWorldBossInfo;
class GCWorldBossInfo;

// ===================================================================

class WorldBossPlayerInfo : public ::google::protobuf::Message {
 public:
  WorldBossPlayerInfo();
  virtual ~WorldBossPlayerInfo();

  WorldBossPlayerInfo(const WorldBossPlayerInfo& from);

  inline WorldBossPlayerInfo& operator=(const WorldBossPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBossPlayerInfo& default_instance();

  void Swap(WorldBossPlayerInfo* other);

  // implements Message ----------------------------------------------

  WorldBossPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBossPlayerInfo& from);
  void MergeFrom(const WorldBossPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 inspireTime = 1;
  inline bool has_inspiretime() const;
  inline void clear_inspiretime();
  static const int kInspireTimeFieldNumber = 1;
  inline ::google::protobuf::int64 inspiretime() const;
  inline void set_inspiretime(::google::protobuf::int64 value);

  // optional int32 freeInspire = 2;
  inline bool has_freeinspire() const;
  inline void clear_freeinspire();
  static const int kFreeInspireFieldNumber = 2;
  inline ::google::protobuf::int32 freeinspire() const;
  inline void set_freeinspire(::google::protobuf::int32 value);

  // optional int32 payInspire = 3;
  inline bool has_payinspire() const;
  inline void clear_payinspire();
  static const int kPayInspireFieldNumber = 3;
  inline ::google::protobuf::int32 payinspire() const;
  inline void set_payinspire(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WorldBossPlayerInfo)
 private:
  inline void set_has_inspiretime();
  inline void clear_has_inspiretime();
  inline void set_has_freeinspire();
  inline void clear_has_freeinspire();
  inline void set_has_payinspire();
  inline void clear_has_payinspire();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 inspiretime_;
  ::google::protobuf::int32 freeinspire_;
  ::google::protobuf::int32 payinspire_;
  friend void  protobuf_AddDesc_WorldBossMessage_2eproto();
  friend void protobuf_AssignDesc_WorldBossMessage_2eproto();
  friend void protobuf_ShutdownFile_WorldBossMessage_2eproto();

  void InitAsDefaultInstance();
  static WorldBossPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGWorldBossInfo : public ::google::protobuf::Message {
 public:
  CGWorldBossInfo();
  virtual ~CGWorldBossInfo();

  CGWorldBossInfo(const CGWorldBossInfo& from);

  inline CGWorldBossInfo& operator=(const CGWorldBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGWorldBossInfo& default_instance();

  void Swap(CGWorldBossInfo* other);

  // implements Message ----------------------------------------------

  CGWorldBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGWorldBossInfo& from);
  void MergeFrom(const CGWorldBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 playerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGWorldBossInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_WorldBossMessage_2eproto();
  friend void protobuf_AssignDesc_WorldBossMessage_2eproto();
  friend void protobuf_ShutdownFile_WorldBossMessage_2eproto();

  void InitAsDefaultInstance();
  static CGWorldBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCWorldBossInfo : public ::google::protobuf::Message {
 public:
  GCWorldBossInfo();
  virtual ~GCWorldBossInfo();

  GCWorldBossInfo(const GCWorldBossInfo& from);

  inline GCWorldBossInfo& operator=(const GCWorldBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCWorldBossInfo& default_instance();

  void Swap(GCWorldBossInfo* other);

  // implements Message ----------------------------------------------

  GCWorldBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCWorldBossInfo& from);
  void MergeFrom(const GCWorldBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .WorldBossPlayerInfo playerInfo = 2;
  inline bool has_playerinfo() const;
  inline void clear_playerinfo();
  static const int kPlayerInfoFieldNumber = 2;
  inline const ::WorldBossPlayerInfo& playerinfo() const;
  inline ::WorldBossPlayerInfo* mutable_playerinfo();
  inline ::WorldBossPlayerInfo* release_playerinfo();
  inline void set_allocated_playerinfo(::WorldBossPlayerInfo* playerinfo);

  // optional int32 bossID = 3;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIDFieldNumber = 3;
  inline ::google::protobuf::int32 bossid() const;
  inline void set_bossid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCWorldBossInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_playerinfo();
  inline void clear_has_playerinfo();
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::WorldBossPlayerInfo* playerinfo_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 bossid_;
  friend void  protobuf_AddDesc_WorldBossMessage_2eproto();
  friend void protobuf_AssignDesc_WorldBossMessage_2eproto();
  friend void protobuf_ShutdownFile_WorldBossMessage_2eproto();

  void InitAsDefaultInstance();
  static GCWorldBossInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// WorldBossPlayerInfo

// optional int64 inspireTime = 1;
inline bool WorldBossPlayerInfo::has_inspiretime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldBossPlayerInfo::set_has_inspiretime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldBossPlayerInfo::clear_has_inspiretime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldBossPlayerInfo::clear_inspiretime() {
  inspiretime_ = GOOGLE_LONGLONG(0);
  clear_has_inspiretime();
}
inline ::google::protobuf::int64 WorldBossPlayerInfo::inspiretime() const {
  // @@protoc_insertion_point(field_get:WorldBossPlayerInfo.inspireTime)
  return inspiretime_;
}
inline void WorldBossPlayerInfo::set_inspiretime(::google::protobuf::int64 value) {
  set_has_inspiretime();
  inspiretime_ = value;
  // @@protoc_insertion_point(field_set:WorldBossPlayerInfo.inspireTime)
}

// optional int32 freeInspire = 2;
inline bool WorldBossPlayerInfo::has_freeinspire() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldBossPlayerInfo::set_has_freeinspire() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldBossPlayerInfo::clear_has_freeinspire() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldBossPlayerInfo::clear_freeinspire() {
  freeinspire_ = 0;
  clear_has_freeinspire();
}
inline ::google::protobuf::int32 WorldBossPlayerInfo::freeinspire() const {
  // @@protoc_insertion_point(field_get:WorldBossPlayerInfo.freeInspire)
  return freeinspire_;
}
inline void WorldBossPlayerInfo::set_freeinspire(::google::protobuf::int32 value) {
  set_has_freeinspire();
  freeinspire_ = value;
  // @@protoc_insertion_point(field_set:WorldBossPlayerInfo.freeInspire)
}

// optional int32 payInspire = 3;
inline bool WorldBossPlayerInfo::has_payinspire() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldBossPlayerInfo::set_has_payinspire() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldBossPlayerInfo::clear_has_payinspire() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldBossPlayerInfo::clear_payinspire() {
  payinspire_ = 0;
  clear_has_payinspire();
}
inline ::google::protobuf::int32 WorldBossPlayerInfo::payinspire() const {
  // @@protoc_insertion_point(field_get:WorldBossPlayerInfo.payInspire)
  return payinspire_;
}
inline void WorldBossPlayerInfo::set_payinspire(::google::protobuf::int32 value) {
  set_has_payinspire();
  payinspire_ = value;
  // @@protoc_insertion_point(field_set:WorldBossPlayerInfo.payInspire)
}

// -------------------------------------------------------------------

// CGWorldBossInfo

// optional int32 type = 1;
inline bool CGWorldBossInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGWorldBossInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGWorldBossInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGWorldBossInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGWorldBossInfo::type() const {
  // @@protoc_insertion_point(field_get:CGWorldBossInfo.type)
  return type_;
}
inline void CGWorldBossInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGWorldBossInfo.type)
}

// optional int64 playerId = 2;
inline bool CGWorldBossInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGWorldBossInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGWorldBossInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGWorldBossInfo::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CGWorldBossInfo::playerid() const {
  // @@protoc_insertion_point(field_get:CGWorldBossInfo.playerId)
  return playerid_;
}
inline void CGWorldBossInfo::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGWorldBossInfo.playerId)
}

// -------------------------------------------------------------------

// GCWorldBossInfo

// optional int32 type = 1;
inline bool GCWorldBossInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCWorldBossInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCWorldBossInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCWorldBossInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCWorldBossInfo::type() const {
  // @@protoc_insertion_point(field_get:GCWorldBossInfo.type)
  return type_;
}
inline void GCWorldBossInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCWorldBossInfo.type)
}

// optional .WorldBossPlayerInfo playerInfo = 2;
inline bool GCWorldBossInfo::has_playerinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCWorldBossInfo::set_has_playerinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCWorldBossInfo::clear_has_playerinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCWorldBossInfo::clear_playerinfo() {
  if (playerinfo_ != NULL) playerinfo_->::WorldBossPlayerInfo::Clear();
  clear_has_playerinfo();
}
inline const ::WorldBossPlayerInfo& GCWorldBossInfo::playerinfo() const {
  // @@protoc_insertion_point(field_get:GCWorldBossInfo.playerInfo)
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
}
inline ::WorldBossPlayerInfo* GCWorldBossInfo::mutable_playerinfo() {
  set_has_playerinfo();
  if (playerinfo_ == NULL) playerinfo_ = new ::WorldBossPlayerInfo;
  // @@protoc_insertion_point(field_mutable:GCWorldBossInfo.playerInfo)
  return playerinfo_;
}
inline ::WorldBossPlayerInfo* GCWorldBossInfo::release_playerinfo() {
  clear_has_playerinfo();
  ::WorldBossPlayerInfo* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
inline void GCWorldBossInfo::set_allocated_playerinfo(::WorldBossPlayerInfo* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    set_has_playerinfo();
  } else {
    clear_has_playerinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCWorldBossInfo.playerInfo)
}

// optional int32 bossID = 3;
inline bool GCWorldBossInfo::has_bossid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCWorldBossInfo::set_has_bossid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCWorldBossInfo::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCWorldBossInfo::clear_bossid() {
  bossid_ = 0;
  clear_has_bossid();
}
inline ::google::protobuf::int32 GCWorldBossInfo::bossid() const {
  // @@protoc_insertion_point(field_get:GCWorldBossInfo.bossID)
  return bossid_;
}
inline void GCWorldBossInfo::set_bossid(::google::protobuf::int32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:GCWorldBossInfo.bossID)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WorldBossMessage_2eproto__INCLUDED
