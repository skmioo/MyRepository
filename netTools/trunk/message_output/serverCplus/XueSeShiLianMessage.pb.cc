// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XueSeShiLianMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "XueSeShiLianMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGEnterOrExitSXSL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEnterOrExitSXSL_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPickCaoYao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPickCaoYao_reflection_ = NULL;
const ::google::protobuf::Descriptor* XueSeShiLianRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XueSeShiLianRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCXueSeShiLian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCXueSeShiLian_reflection_ = NULL;
const ::google::protobuf::Descriptor* LingMaiCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LingMaiCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetLingMaiView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetLingMaiView_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetLingMaiView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetLingMaiView_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGEnterOrExitLingMai_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEnterOrExitLingMai_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetLingMaiRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetLingMaiRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* LingMaiRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LingMaiRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCLingMaiRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCLingMaiRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCLingMaiMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCLingMaiMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_XueSeShiLianMessage_2eproto() {
  protobuf_AddDesc_XueSeShiLianMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "XueSeShiLianMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGEnterOrExitSXSL_descriptor_ = file->message_type(0);
  static const int CGEnterOrExitSXSL_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterOrExitSXSL, type_),
  };
  CGEnterOrExitSXSL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEnterOrExitSXSL_descriptor_,
      CGEnterOrExitSXSL::default_instance_,
      CGEnterOrExitSXSL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterOrExitSXSL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterOrExitSXSL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEnterOrExitSXSL));
  CGPickCaoYao_descriptor_ = file->message_type(1);
  static const int CGPickCaoYao_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPickCaoYao, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPickCaoYao, type_),
  };
  CGPickCaoYao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPickCaoYao_descriptor_,
      CGPickCaoYao::default_instance_,
      CGPickCaoYao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPickCaoYao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPickCaoYao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPickCaoYao));
  XueSeShiLianRank_descriptor_ = file->message_type(2);
  static const int XueSeShiLianRank_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueSeShiLianRank, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueSeShiLianRank, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueSeShiLianRank, playerlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueSeShiLianRank, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueSeShiLianRank, sorce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueSeShiLianRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueSeShiLianRank, sex_),
  };
  XueSeShiLianRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XueSeShiLianRank_descriptor_,
      XueSeShiLianRank::default_instance_,
      XueSeShiLianRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueSeShiLianRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueSeShiLianRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XueSeShiLianRank));
  GCXueSeShiLian_descriptor_ = file->message_type(3);
  static const int GCXueSeShiLian_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCXueSeShiLian, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCXueSeShiLian, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCXueSeShiLian, sorce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCXueSeShiLian, ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCXueSeShiLian, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCXueSeShiLian, enternexttime_),
  };
  GCXueSeShiLian_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCXueSeShiLian_descriptor_,
      GCXueSeShiLian::default_instance_,
      GCXueSeShiLian_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCXueSeShiLian, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCXueSeShiLian, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCXueSeShiLian));
  LingMaiCity_descriptor_ = file->message_type(4);
  static const int LingMaiCity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingMaiCity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingMaiCity, gangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingMaiCity, gangname_),
  };
  LingMaiCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LingMaiCity_descriptor_,
      LingMaiCity::default_instance_,
      LingMaiCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingMaiCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingMaiCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LingMaiCity));
  CGGetLingMaiView_descriptor_ = file->message_type(5);
  static const int CGGetLingMaiView_offsets_[1] = {
  };
  CGGetLingMaiView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetLingMaiView_descriptor_,
      CGGetLingMaiView::default_instance_,
      CGGetLingMaiView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetLingMaiView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetLingMaiView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetLingMaiView));
  GCGetLingMaiView_descriptor_ = file->message_type(6);
  static const int GCGetLingMaiView_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetLingMaiView, occupycitylist_),
  };
  GCGetLingMaiView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetLingMaiView_descriptor_,
      GCGetLingMaiView::default_instance_,
      GCGetLingMaiView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetLingMaiView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetLingMaiView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetLingMaiView));
  CGEnterOrExitLingMai_descriptor_ = file->message_type(7);
  static const int CGEnterOrExitLingMai_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterOrExitLingMai, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterOrExitLingMai, cityid_),
  };
  CGEnterOrExitLingMai_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEnterOrExitLingMai_descriptor_,
      CGEnterOrExitLingMai::default_instance_,
      CGEnterOrExitLingMai_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterOrExitLingMai, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterOrExitLingMai, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEnterOrExitLingMai));
  CGGetLingMaiRank_descriptor_ = file->message_type(8);
  static const int CGGetLingMaiRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetLingMaiRank, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetLingMaiRank, cityid_),
  };
  CGGetLingMaiRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetLingMaiRank_descriptor_,
      CGGetLingMaiRank::default_instance_,
      CGGetLingMaiRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetLingMaiRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetLingMaiRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetLingMaiRank));
  LingMaiRank_descriptor_ = file->message_type(9);
  static const int LingMaiRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingMaiRank, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingMaiRank, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingMaiRank, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingMaiRank, num_),
  };
  LingMaiRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LingMaiRank_descriptor_,
      LingMaiRank::default_instance_,
      LingMaiRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingMaiRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingMaiRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LingMaiRank));
  GCLingMaiRank_descriptor_ = file->message_type(10);
  static const int GCLingMaiRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiRank, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiRank, ranks_),
  };
  GCLingMaiRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCLingMaiRank_descriptor_,
      GCLingMaiRank::default_instance_,
      GCLingMaiRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCLingMaiRank));
  GCLingMaiMsg_descriptor_ = file->message_type(11);
  static const int GCLingMaiMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiMsg, occupygangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiMsg, gangrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiMsg, gangsorce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiMsg, killmonsternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiMsg, killpersonnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiMsg, totalsorce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiMsg, mysorce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiMsg, mykillrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiMsg, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiMsg, occupycitylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiMsg, endtime_),
  };
  GCLingMaiMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCLingMaiMsg_descriptor_,
      GCLingMaiMsg::default_instance_,
      GCLingMaiMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLingMaiMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCLingMaiMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_XueSeShiLianMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEnterOrExitSXSL_descriptor_, &CGEnterOrExitSXSL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPickCaoYao_descriptor_, &CGPickCaoYao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XueSeShiLianRank_descriptor_, &XueSeShiLianRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCXueSeShiLian_descriptor_, &GCXueSeShiLian::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LingMaiCity_descriptor_, &LingMaiCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetLingMaiView_descriptor_, &CGGetLingMaiView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetLingMaiView_descriptor_, &GCGetLingMaiView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEnterOrExitLingMai_descriptor_, &CGEnterOrExitLingMai::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetLingMaiRank_descriptor_, &CGGetLingMaiRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LingMaiRank_descriptor_, &LingMaiRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCLingMaiRank_descriptor_, &GCLingMaiRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCLingMaiMsg_descriptor_, &GCLingMaiMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_XueSeShiLianMessage_2eproto() {
  delete CGEnterOrExitSXSL::default_instance_;
  delete CGEnterOrExitSXSL_reflection_;
  delete CGPickCaoYao::default_instance_;
  delete CGPickCaoYao_reflection_;
  delete XueSeShiLianRank::default_instance_;
  delete XueSeShiLianRank_reflection_;
  delete GCXueSeShiLian::default_instance_;
  delete GCXueSeShiLian_reflection_;
  delete LingMaiCity::default_instance_;
  delete LingMaiCity_reflection_;
  delete CGGetLingMaiView::default_instance_;
  delete CGGetLingMaiView_reflection_;
  delete GCGetLingMaiView::default_instance_;
  delete GCGetLingMaiView_reflection_;
  delete CGEnterOrExitLingMai::default_instance_;
  delete CGEnterOrExitLingMai_reflection_;
  delete CGGetLingMaiRank::default_instance_;
  delete CGGetLingMaiRank_reflection_;
  delete LingMaiRank::default_instance_;
  delete LingMaiRank_reflection_;
  delete GCLingMaiRank::default_instance_;
  delete GCLingMaiRank_reflection_;
  delete GCLingMaiMsg::default_instance_;
  delete GCLingMaiMsg_reflection_;
}

void protobuf_AddDesc_XueSeShiLianMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031XueSeShiLianMessage.proto\"!\n\021CGEnterOr"
    "ExitSXSL\022\014\n\004type\030\001 \001(\005\"+\n\014CGPickCaoYao\022\r"
    "\n\005objId\030\001 \001(\003\022\014\n\004type\030\002 \001(\005\"|\n\020XueSeShiL"
    "ianRank\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\020\n\010pla"
    "yerLv\030\003 \001(\005\022\022\n\nprofession\030\004 \001(\005\022\r\n\005sorce"
    "\030\005 \001(\005\022\014\n\004rank\030\006 \001(\005\022\013\n\003sex\030\007 \001(\005\"\205\001\n\016GC"
    "XueSeShiLian\022\014\n\004type\030\001 \001(\005\022\017\n\007endTime\030\002 "
    "\001(\003\022\r\n\005sorce\030\003 \001(\005\022 \n\005ranks\030\004 \003(\0132\021.XueS"
    "eShiLianRank\022\014\n\004rank\030\005 \001(\005\022\025\n\renterNextT"
    "ime\030\006 \001(\005\";\n\013LingMaiCity\022\n\n\002id\030\001 \001(\005\022\016\n\006"
    "gangId\030\002 \001(\003\022\020\n\010gangName\030\003 \001(\t\"\022\n\020CGGetL"
    "ingMaiView\"8\n\020GCGetLingMaiView\022$\n\016occupy"
    "CityList\030\001 \003(\0132\014.LingMaiCity\"4\n\024CGEnterO"
    "rExitLingMai\022\014\n\004type\030\001 \001(\005\022\016\n\006cityId\030\002 \001"
    "(\005\"0\n\020CGGetLingMaiRank\022\014\n\004type\030\001 \001(\005\022\016\n\006"
    "cityId\030\002 \001(\005\"D\n\013LingMaiRank\022\016\n\006rankId\030\001 "
    "\001(\005\022\n\n\002id\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\013\n\003num\030\004 \001"
    "(\005\":\n\rGCLingMaiRank\022\014\n\004type\030\001 \001(\005\022\033\n\005ran"
    "ks\030\002 \003(\0132\014.LingMaiRank\"\210\002\n\014GCLingMaiMsg\022"
    "\014\n\004type\030\001 \001(\005\022\026\n\016occupyGangName\030\002 \001(\t\022\020\n"
    "\010gangRank\030\003 \001(\005\022\021\n\tgangSorce\030\004 \001(\005\022\026\n\016ki"
    "llMonsterNum\030\005 \001(\005\022\025\n\rkillPersonNum\030\006 \001("
    "\005\022\022\n\ntotalSorce\030\007 \001(\005\022\017\n\007mySorce\030\010 \001(\005\022\022"
    "\n\nmyKillRank\030\t \001(\005\022\016\n\006cityId\030\n \001(\005\022$\n\016oc"
    "cupyCityList\030\013 \003(\0132\014.LingMaiCity\022\017\n\007endT"
    "ime\030\014 \001(\003B\031\n\027com.mile.common.message", 1036);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "XueSeShiLianMessage.proto", &protobuf_RegisterTypes);
  CGEnterOrExitSXSL::default_instance_ = new CGEnterOrExitSXSL();
  CGPickCaoYao::default_instance_ = new CGPickCaoYao();
  XueSeShiLianRank::default_instance_ = new XueSeShiLianRank();
  GCXueSeShiLian::default_instance_ = new GCXueSeShiLian();
  LingMaiCity::default_instance_ = new LingMaiCity();
  CGGetLingMaiView::default_instance_ = new CGGetLingMaiView();
  GCGetLingMaiView::default_instance_ = new GCGetLingMaiView();
  CGEnterOrExitLingMai::default_instance_ = new CGEnterOrExitLingMai();
  CGGetLingMaiRank::default_instance_ = new CGGetLingMaiRank();
  LingMaiRank::default_instance_ = new LingMaiRank();
  GCLingMaiRank::default_instance_ = new GCLingMaiRank();
  GCLingMaiMsg::default_instance_ = new GCLingMaiMsg();
  CGEnterOrExitSXSL::default_instance_->InitAsDefaultInstance();
  CGPickCaoYao::default_instance_->InitAsDefaultInstance();
  XueSeShiLianRank::default_instance_->InitAsDefaultInstance();
  GCXueSeShiLian::default_instance_->InitAsDefaultInstance();
  LingMaiCity::default_instance_->InitAsDefaultInstance();
  CGGetLingMaiView::default_instance_->InitAsDefaultInstance();
  GCGetLingMaiView::default_instance_->InitAsDefaultInstance();
  CGEnterOrExitLingMai::default_instance_->InitAsDefaultInstance();
  CGGetLingMaiRank::default_instance_->InitAsDefaultInstance();
  LingMaiRank::default_instance_->InitAsDefaultInstance();
  GCLingMaiRank::default_instance_->InitAsDefaultInstance();
  GCLingMaiMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_XueSeShiLianMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_XueSeShiLianMessage_2eproto {
  StaticDescriptorInitializer_XueSeShiLianMessage_2eproto() {
    protobuf_AddDesc_XueSeShiLianMessage_2eproto();
  }
} static_descriptor_initializer_XueSeShiLianMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGEnterOrExitSXSL::kTypeFieldNumber;
#endif  // !_MSC_VER

CGEnterOrExitSXSL::CGEnterOrExitSXSL()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGEnterOrExitSXSL)
}

void CGEnterOrExitSXSL::InitAsDefaultInstance() {
}

CGEnterOrExitSXSL::CGEnterOrExitSXSL(const CGEnterOrExitSXSL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGEnterOrExitSXSL)
}

void CGEnterOrExitSXSL::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEnterOrExitSXSL::~CGEnterOrExitSXSL() {
  // @@protoc_insertion_point(destructor:CGEnterOrExitSXSL)
  SharedDtor();
}

void CGEnterOrExitSXSL::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGEnterOrExitSXSL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEnterOrExitSXSL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEnterOrExitSXSL_descriptor_;
}

const CGEnterOrExitSXSL& CGEnterOrExitSXSL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XueSeShiLianMessage_2eproto();
  return *default_instance_;
}

CGEnterOrExitSXSL* CGEnterOrExitSXSL::default_instance_ = NULL;

CGEnterOrExitSXSL* CGEnterOrExitSXSL::New() const {
  return new CGEnterOrExitSXSL;
}

void CGEnterOrExitSXSL::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEnterOrExitSXSL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGEnterOrExitSXSL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGEnterOrExitSXSL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGEnterOrExitSXSL)
  return false;
#undef DO_
}

void CGEnterOrExitSXSL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGEnterOrExitSXSL)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGEnterOrExitSXSL)
}

::google::protobuf::uint8* CGEnterOrExitSXSL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGEnterOrExitSXSL)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGEnterOrExitSXSL)
  return target;
}

int CGEnterOrExitSXSL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEnterOrExitSXSL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEnterOrExitSXSL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEnterOrExitSXSL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEnterOrExitSXSL::MergeFrom(const CGEnterOrExitSXSL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEnterOrExitSXSL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEnterOrExitSXSL::CopyFrom(const CGEnterOrExitSXSL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEnterOrExitSXSL::IsInitialized() const {

  return true;
}

void CGEnterOrExitSXSL::Swap(CGEnterOrExitSXSL* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEnterOrExitSXSL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEnterOrExitSXSL_descriptor_;
  metadata.reflection = CGEnterOrExitSXSL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPickCaoYao::kObjIdFieldNumber;
const int CGPickCaoYao::kTypeFieldNumber;
#endif  // !_MSC_VER

CGPickCaoYao::CGPickCaoYao()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPickCaoYao)
}

void CGPickCaoYao::InitAsDefaultInstance() {
}

CGPickCaoYao::CGPickCaoYao(const CGPickCaoYao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPickCaoYao)
}

void CGPickCaoYao::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPickCaoYao::~CGPickCaoYao() {
  // @@protoc_insertion_point(destructor:CGPickCaoYao)
  SharedDtor();
}

void CGPickCaoYao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPickCaoYao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPickCaoYao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPickCaoYao_descriptor_;
}

const CGPickCaoYao& CGPickCaoYao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XueSeShiLianMessage_2eproto();
  return *default_instance_;
}

CGPickCaoYao* CGPickCaoYao::default_instance_ = NULL;

CGPickCaoYao* CGPickCaoYao::New() const {
  return new CGPickCaoYao;
}

void CGPickCaoYao::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGPickCaoYao*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(objid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPickCaoYao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPickCaoYao)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPickCaoYao)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPickCaoYao)
  return false;
#undef DO_
}

void CGPickCaoYao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPickCaoYao)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPickCaoYao)
}

::google::protobuf::uint8* CGPickCaoYao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPickCaoYao)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPickCaoYao)
  return target;
}

int CGPickCaoYao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPickCaoYao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPickCaoYao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPickCaoYao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPickCaoYao::MergeFrom(const CGPickCaoYao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPickCaoYao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPickCaoYao::CopyFrom(const CGPickCaoYao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPickCaoYao::IsInitialized() const {

  return true;
}

void CGPickCaoYao::Swap(CGPickCaoYao* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPickCaoYao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPickCaoYao_descriptor_;
  metadata.reflection = CGPickCaoYao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XueSeShiLianRank::kIdFieldNumber;
const int XueSeShiLianRank::kNameFieldNumber;
const int XueSeShiLianRank::kPlayerLvFieldNumber;
const int XueSeShiLianRank::kProfessionFieldNumber;
const int XueSeShiLianRank::kSorceFieldNumber;
const int XueSeShiLianRank::kRankFieldNumber;
const int XueSeShiLianRank::kSexFieldNumber;
#endif  // !_MSC_VER

XueSeShiLianRank::XueSeShiLianRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XueSeShiLianRank)
}

void XueSeShiLianRank::InitAsDefaultInstance() {
}

XueSeShiLianRank::XueSeShiLianRank(const XueSeShiLianRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XueSeShiLianRank)
}

void XueSeShiLianRank::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerlv_ = 0;
  profession_ = 0;
  sorce_ = 0;
  rank_ = 0;
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XueSeShiLianRank::~XueSeShiLianRank() {
  // @@protoc_insertion_point(destructor:XueSeShiLianRank)
  SharedDtor();
}

void XueSeShiLianRank::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void XueSeShiLianRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XueSeShiLianRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XueSeShiLianRank_descriptor_;
}

const XueSeShiLianRank& XueSeShiLianRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XueSeShiLianMessage_2eproto();
  return *default_instance_;
}

XueSeShiLianRank* XueSeShiLianRank::default_instance_ = NULL;

XueSeShiLianRank* XueSeShiLianRank::New() const {
  return new XueSeShiLianRank;
}

void XueSeShiLianRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<XueSeShiLianRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(playerlv_, sex_);
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XueSeShiLianRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XueSeShiLianRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerLv;
        break;
      }

      // optional int32 playerLv = 3;
      case 3: {
        if (tag == 24) {
         parse_playerLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlv_)));
          set_has_playerlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // optional int32 profession = 4;
      case 4: {
        if (tag == 32) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sorce;
        break;
      }

      // optional int32 sorce = 5;
      case 5: {
        if (tag == 40) {
         parse_sorce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sorce_)));
          set_has_sorce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rank;
        break;
      }

      // optional int32 rank = 6;
      case 6: {
        if (tag == 48) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional int32 sex = 7;
      case 7: {
        if (tag == 56) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XueSeShiLianRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XueSeShiLianRank)
  return false;
#undef DO_
}

void XueSeShiLianRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XueSeShiLianRank)
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 playerLv = 3;
  if (has_playerlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerlv(), output);
  }

  // optional int32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->profession(), output);
  }

  // optional int32 sorce = 5;
  if (has_sorce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sorce(), output);
  }

  // optional int32 rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rank(), output);
  }

  // optional int32 sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XueSeShiLianRank)
}

::google::protobuf::uint8* XueSeShiLianRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XueSeShiLianRank)
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 playerLv = 3;
  if (has_playerlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerlv(), target);
  }

  // optional int32 profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->profession(), target);
  }

  // optional int32 sorce = 5;
  if (has_sorce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sorce(), target);
  }

  // optional int32 rank = 6;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rank(), target);
  }

  // optional int32 sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XueSeShiLianRank)
  return target;
}

int XueSeShiLianRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 playerLv = 3;
    if (has_playerlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlv());
    }

    // optional int32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 sorce = 5;
    if (has_sorce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sorce());
    }

    // optional int32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 sex = 7;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XueSeShiLianRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XueSeShiLianRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XueSeShiLianRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XueSeShiLianRank::MergeFrom(const XueSeShiLianRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_playerlv()) {
      set_playerlv(from.playerlv());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_sorce()) {
      set_sorce(from.sorce());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XueSeShiLianRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XueSeShiLianRank::CopyFrom(const XueSeShiLianRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XueSeShiLianRank::IsInitialized() const {

  return true;
}

void XueSeShiLianRank::Swap(XueSeShiLianRank* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(playerlv_, other->playerlv_);
    std::swap(profession_, other->profession_);
    std::swap(sorce_, other->sorce_);
    std::swap(rank_, other->rank_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XueSeShiLianRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XueSeShiLianRank_descriptor_;
  metadata.reflection = XueSeShiLianRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCXueSeShiLian::kTypeFieldNumber;
const int GCXueSeShiLian::kEndTimeFieldNumber;
const int GCXueSeShiLian::kSorceFieldNumber;
const int GCXueSeShiLian::kRanksFieldNumber;
const int GCXueSeShiLian::kRankFieldNumber;
const int GCXueSeShiLian::kEnterNextTimeFieldNumber;
#endif  // !_MSC_VER

GCXueSeShiLian::GCXueSeShiLian()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCXueSeShiLian)
}

void GCXueSeShiLian::InitAsDefaultInstance() {
}

GCXueSeShiLian::GCXueSeShiLian(const GCXueSeShiLian& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCXueSeShiLian)
}

void GCXueSeShiLian::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  endtime_ = GOOGLE_LONGLONG(0);
  sorce_ = 0;
  rank_ = 0;
  enternexttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCXueSeShiLian::~GCXueSeShiLian() {
  // @@protoc_insertion_point(destructor:GCXueSeShiLian)
  SharedDtor();
}

void GCXueSeShiLian::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCXueSeShiLian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCXueSeShiLian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCXueSeShiLian_descriptor_;
}

const GCXueSeShiLian& GCXueSeShiLian::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XueSeShiLianMessage_2eproto();
  return *default_instance_;
}

GCXueSeShiLian* GCXueSeShiLian::default_instance_ = NULL;

GCXueSeShiLian* GCXueSeShiLian::New() const {
  return new GCXueSeShiLian;
}

void GCXueSeShiLian::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCXueSeShiLian*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(endtime_, sorce_);
    ZR_(rank_, enternexttime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCXueSeShiLian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCXueSeShiLian)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 2;
      case 2: {
        if (tag == 16) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sorce;
        break;
      }

      // optional int32 sorce = 3;
      case 3: {
        if (tag == 24) {
         parse_sorce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sorce_)));
          set_has_sorce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ranks;
        break;
      }

      // repeated .XueSeShiLianRank ranks = 4;
      case 4: {
        if (tag == 34) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ranks;
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }

      // optional int32 rank = 5;
      case 5: {
        if (tag == 40) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_enterNextTime;
        break;
      }

      // optional int32 enterNextTime = 6;
      case 6: {
        if (tag == 48) {
         parse_enterNextTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enternexttime_)));
          set_has_enternexttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCXueSeShiLian)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCXueSeShiLian)
  return false;
#undef DO_
}

void GCXueSeShiLian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCXueSeShiLian)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 endTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endtime(), output);
  }

  // optional int32 sorce = 3;
  if (has_sorce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sorce(), output);
  }

  // repeated .XueSeShiLianRank ranks = 4;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ranks(i), output);
  }

  // optional int32 rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }

  // optional int32 enterNextTime = 6;
  if (has_enternexttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->enternexttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCXueSeShiLian)
}

::google::protobuf::uint8* GCXueSeShiLian::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCXueSeShiLian)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 endTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endtime(), target);
  }

  // optional int32 sorce = 3;
  if (has_sorce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sorce(), target);
  }

  // repeated .XueSeShiLianRank ranks = 4;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ranks(i), target);
  }

  // optional int32 rank = 5;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }

  // optional int32 enterNextTime = 6;
  if (has_enternexttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->enternexttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCXueSeShiLian)
  return target;
}

int GCXueSeShiLian::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 endTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 sorce = 3;
    if (has_sorce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sorce());
    }

    // optional int32 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 enterNextTime = 6;
    if (has_enternexttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enternexttime());
    }

  }
  // repeated .XueSeShiLianRank ranks = 4;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCXueSeShiLian::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCXueSeShiLian* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCXueSeShiLian*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCXueSeShiLian::MergeFrom(const GCXueSeShiLian& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_sorce()) {
      set_sorce(from.sorce());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_enternexttime()) {
      set_enternexttime(from.enternexttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCXueSeShiLian::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCXueSeShiLian::CopyFrom(const GCXueSeShiLian& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCXueSeShiLian::IsInitialized() const {

  return true;
}

void GCXueSeShiLian::Swap(GCXueSeShiLian* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(endtime_, other->endtime_);
    std::swap(sorce_, other->sorce_);
    ranks_.Swap(&other->ranks_);
    std::swap(rank_, other->rank_);
    std::swap(enternexttime_, other->enternexttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCXueSeShiLian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCXueSeShiLian_descriptor_;
  metadata.reflection = GCXueSeShiLian_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LingMaiCity::kIdFieldNumber;
const int LingMaiCity::kGangIdFieldNumber;
const int LingMaiCity::kGangNameFieldNumber;
#endif  // !_MSC_VER

LingMaiCity::LingMaiCity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LingMaiCity)
}

void LingMaiCity::InitAsDefaultInstance() {
}

LingMaiCity::LingMaiCity(const LingMaiCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LingMaiCity)
}

void LingMaiCity::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  gangid_ = GOOGLE_LONGLONG(0);
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LingMaiCity::~LingMaiCity() {
  // @@protoc_insertion_point(destructor:LingMaiCity)
  SharedDtor();
}

void LingMaiCity::SharedDtor() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (this != default_instance_) {
  }
}

void LingMaiCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LingMaiCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LingMaiCity_descriptor_;
}

const LingMaiCity& LingMaiCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XueSeShiLianMessage_2eproto();
  return *default_instance_;
}

LingMaiCity* LingMaiCity::default_instance_ = NULL;

LingMaiCity* LingMaiCity::New() const {
  return new LingMaiCity;
}

void LingMaiCity::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0;
    gangid_ = GOOGLE_LONGLONG(0);
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LingMaiCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LingMaiCity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gangId;
        break;
      }

      // optional int64 gangId = 2;
      case 2: {
        if (tag == 16) {
         parse_gangId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gangid_)));
          set_has_gangid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gangName;
        break;
      }

      // optional string gangName = 3;
      case 3: {
        if (tag == 26) {
         parse_gangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LingMaiCity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LingMaiCity)
  return false;
#undef DO_
}

void LingMaiCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LingMaiCity)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 gangId = 2;
  if (has_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gangid(), output);
  }

  // optional string gangName = 3;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gangname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LingMaiCity)
}

::google::protobuf::uint8* LingMaiCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LingMaiCity)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 gangId = 2;
  if (has_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gangid(), target);
  }

  // optional string gangName = 3;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gangname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LingMaiCity)
  return target;
}

int LingMaiCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 gangId = 2;
    if (has_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gangid());
    }

    // optional string gangName = 3;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LingMaiCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LingMaiCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LingMaiCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LingMaiCity::MergeFrom(const LingMaiCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gangid()) {
      set_gangid(from.gangid());
    }
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LingMaiCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LingMaiCity::CopyFrom(const LingMaiCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LingMaiCity::IsInitialized() const {

  return true;
}

void LingMaiCity::Swap(LingMaiCity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gangid_, other->gangid_);
    std::swap(gangname_, other->gangname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LingMaiCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LingMaiCity_descriptor_;
  metadata.reflection = LingMaiCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGGetLingMaiView::CGGetLingMaiView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetLingMaiView)
}

void CGGetLingMaiView::InitAsDefaultInstance() {
}

CGGetLingMaiView::CGGetLingMaiView(const CGGetLingMaiView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetLingMaiView)
}

void CGGetLingMaiView::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetLingMaiView::~CGGetLingMaiView() {
  // @@protoc_insertion_point(destructor:CGGetLingMaiView)
  SharedDtor();
}

void CGGetLingMaiView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetLingMaiView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetLingMaiView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetLingMaiView_descriptor_;
}

const CGGetLingMaiView& CGGetLingMaiView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XueSeShiLianMessage_2eproto();
  return *default_instance_;
}

CGGetLingMaiView* CGGetLingMaiView::default_instance_ = NULL;

CGGetLingMaiView* CGGetLingMaiView::New() const {
  return new CGGetLingMaiView;
}

void CGGetLingMaiView::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetLingMaiView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetLingMaiView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetLingMaiView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetLingMaiView)
  return false;
#undef DO_
}

void CGGetLingMaiView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetLingMaiView)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetLingMaiView)
}

::google::protobuf::uint8* CGGetLingMaiView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetLingMaiView)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetLingMaiView)
  return target;
}

int CGGetLingMaiView::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetLingMaiView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetLingMaiView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetLingMaiView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetLingMaiView::MergeFrom(const CGGetLingMaiView& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetLingMaiView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetLingMaiView::CopyFrom(const CGGetLingMaiView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetLingMaiView::IsInitialized() const {

  return true;
}

void CGGetLingMaiView::Swap(CGGetLingMaiView* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetLingMaiView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetLingMaiView_descriptor_;
  metadata.reflection = CGGetLingMaiView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetLingMaiView::kOccupyCityListFieldNumber;
#endif  // !_MSC_VER

GCGetLingMaiView::GCGetLingMaiView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetLingMaiView)
}

void GCGetLingMaiView::InitAsDefaultInstance() {
}

GCGetLingMaiView::GCGetLingMaiView(const GCGetLingMaiView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetLingMaiView)
}

void GCGetLingMaiView::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetLingMaiView::~GCGetLingMaiView() {
  // @@protoc_insertion_point(destructor:GCGetLingMaiView)
  SharedDtor();
}

void GCGetLingMaiView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetLingMaiView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetLingMaiView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetLingMaiView_descriptor_;
}

const GCGetLingMaiView& GCGetLingMaiView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XueSeShiLianMessage_2eproto();
  return *default_instance_;
}

GCGetLingMaiView* GCGetLingMaiView::default_instance_ = NULL;

GCGetLingMaiView* GCGetLingMaiView::New() const {
  return new GCGetLingMaiView;
}

void GCGetLingMaiView::Clear() {
  occupycitylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetLingMaiView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetLingMaiView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LingMaiCity occupyCityList = 1;
      case 1: {
        if (tag == 10) {
         parse_occupyCityList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_occupycitylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_occupyCityList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetLingMaiView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetLingMaiView)
  return false;
#undef DO_
}

void GCGetLingMaiView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetLingMaiView)
  // repeated .LingMaiCity occupyCityList = 1;
  for (int i = 0; i < this->occupycitylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->occupycitylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetLingMaiView)
}

::google::protobuf::uint8* GCGetLingMaiView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetLingMaiView)
  // repeated .LingMaiCity occupyCityList = 1;
  for (int i = 0; i < this->occupycitylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->occupycitylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetLingMaiView)
  return target;
}

int GCGetLingMaiView::ByteSize() const {
  int total_size = 0;

  // repeated .LingMaiCity occupyCityList = 1;
  total_size += 1 * this->occupycitylist_size();
  for (int i = 0; i < this->occupycitylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->occupycitylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetLingMaiView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetLingMaiView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetLingMaiView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetLingMaiView::MergeFrom(const GCGetLingMaiView& from) {
  GOOGLE_CHECK_NE(&from, this);
  occupycitylist_.MergeFrom(from.occupycitylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetLingMaiView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetLingMaiView::CopyFrom(const GCGetLingMaiView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetLingMaiView::IsInitialized() const {

  return true;
}

void GCGetLingMaiView::Swap(GCGetLingMaiView* other) {
  if (other != this) {
    occupycitylist_.Swap(&other->occupycitylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetLingMaiView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetLingMaiView_descriptor_;
  metadata.reflection = GCGetLingMaiView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGEnterOrExitLingMai::kTypeFieldNumber;
const int CGEnterOrExitLingMai::kCityIdFieldNumber;
#endif  // !_MSC_VER

CGEnterOrExitLingMai::CGEnterOrExitLingMai()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGEnterOrExitLingMai)
}

void CGEnterOrExitLingMai::InitAsDefaultInstance() {
}

CGEnterOrExitLingMai::CGEnterOrExitLingMai(const CGEnterOrExitLingMai& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGEnterOrExitLingMai)
}

void CGEnterOrExitLingMai::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  cityid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEnterOrExitLingMai::~CGEnterOrExitLingMai() {
  // @@protoc_insertion_point(destructor:CGEnterOrExitLingMai)
  SharedDtor();
}

void CGEnterOrExitLingMai::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGEnterOrExitLingMai::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEnterOrExitLingMai::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEnterOrExitLingMai_descriptor_;
}

const CGEnterOrExitLingMai& CGEnterOrExitLingMai::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XueSeShiLianMessage_2eproto();
  return *default_instance_;
}

CGEnterOrExitLingMai* CGEnterOrExitLingMai::default_instance_ = NULL;

CGEnterOrExitLingMai* CGEnterOrExitLingMai::New() const {
  return new CGEnterOrExitLingMai;
}

void CGEnterOrExitLingMai::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGEnterOrExitLingMai*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, cityid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEnterOrExitLingMai::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGEnterOrExitLingMai)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cityId;
        break;
      }

      // optional int32 cityId = 2;
      case 2: {
        if (tag == 16) {
         parse_cityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGEnterOrExitLingMai)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGEnterOrExitLingMai)
  return false;
#undef DO_
}

void CGEnterOrExitLingMai::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGEnterOrExitLingMai)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 cityId = 2;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGEnterOrExitLingMai)
}

::google::protobuf::uint8* CGEnterOrExitLingMai::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGEnterOrExitLingMai)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 cityId = 2;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGEnterOrExitLingMai)
  return target;
}

int CGEnterOrExitLingMai::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 cityId = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEnterOrExitLingMai::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEnterOrExitLingMai* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEnterOrExitLingMai*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEnterOrExitLingMai::MergeFrom(const CGEnterOrExitLingMai& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEnterOrExitLingMai::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEnterOrExitLingMai::CopyFrom(const CGEnterOrExitLingMai& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEnterOrExitLingMai::IsInitialized() const {

  return true;
}

void CGEnterOrExitLingMai::Swap(CGEnterOrExitLingMai* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEnterOrExitLingMai::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEnterOrExitLingMai_descriptor_;
  metadata.reflection = CGEnterOrExitLingMai_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetLingMaiRank::kTypeFieldNumber;
const int CGGetLingMaiRank::kCityIdFieldNumber;
#endif  // !_MSC_VER

CGGetLingMaiRank::CGGetLingMaiRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetLingMaiRank)
}

void CGGetLingMaiRank::InitAsDefaultInstance() {
}

CGGetLingMaiRank::CGGetLingMaiRank(const CGGetLingMaiRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetLingMaiRank)
}

void CGGetLingMaiRank::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  cityid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetLingMaiRank::~CGGetLingMaiRank() {
  // @@protoc_insertion_point(destructor:CGGetLingMaiRank)
  SharedDtor();
}

void CGGetLingMaiRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetLingMaiRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetLingMaiRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetLingMaiRank_descriptor_;
}

const CGGetLingMaiRank& CGGetLingMaiRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XueSeShiLianMessage_2eproto();
  return *default_instance_;
}

CGGetLingMaiRank* CGGetLingMaiRank::default_instance_ = NULL;

CGGetLingMaiRank* CGGetLingMaiRank::New() const {
  return new CGGetLingMaiRank;
}

void CGGetLingMaiRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetLingMaiRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, cityid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetLingMaiRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetLingMaiRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cityId;
        break;
      }

      // optional int32 cityId = 2;
      case 2: {
        if (tag == 16) {
         parse_cityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetLingMaiRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetLingMaiRank)
  return false;
#undef DO_
}

void CGGetLingMaiRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetLingMaiRank)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 cityId = 2;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetLingMaiRank)
}

::google::protobuf::uint8* CGGetLingMaiRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetLingMaiRank)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 cityId = 2;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetLingMaiRank)
  return target;
}

int CGGetLingMaiRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 cityId = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetLingMaiRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetLingMaiRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetLingMaiRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetLingMaiRank::MergeFrom(const CGGetLingMaiRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetLingMaiRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetLingMaiRank::CopyFrom(const CGGetLingMaiRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetLingMaiRank::IsInitialized() const {

  return true;
}

void CGGetLingMaiRank::Swap(CGGetLingMaiRank* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetLingMaiRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetLingMaiRank_descriptor_;
  metadata.reflection = CGGetLingMaiRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LingMaiRank::kRankIdFieldNumber;
const int LingMaiRank::kIdFieldNumber;
const int LingMaiRank::kNameFieldNumber;
const int LingMaiRank::kNumFieldNumber;
#endif  // !_MSC_VER

LingMaiRank::LingMaiRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LingMaiRank)
}

void LingMaiRank::InitAsDefaultInstance() {
}

LingMaiRank::LingMaiRank(const LingMaiRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LingMaiRank)
}

void LingMaiRank::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rankid_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LingMaiRank::~LingMaiRank() {
  // @@protoc_insertion_point(destructor:LingMaiRank)
  SharedDtor();
}

void LingMaiRank::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LingMaiRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LingMaiRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LingMaiRank_descriptor_;
}

const LingMaiRank& LingMaiRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XueSeShiLianMessage_2eproto();
  return *default_instance_;
}

LingMaiRank* LingMaiRank::default_instance_ = NULL;

LingMaiRank* LingMaiRank::New() const {
  return new LingMaiRank;
}

void LingMaiRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LingMaiRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, num_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LingMaiRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LingMaiRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rankId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LingMaiRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LingMaiRank)
  return false;
#undef DO_
}

void LingMaiRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LingMaiRank)
  // optional int32 rankId = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rankid(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LingMaiRank)
}

::google::protobuf::uint8* LingMaiRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LingMaiRank)
  // optional int32 rankId = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rankid(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LingMaiRank)
  return target;
}

int LingMaiRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rankId = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankid());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LingMaiRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LingMaiRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LingMaiRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LingMaiRank::MergeFrom(const LingMaiRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LingMaiRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LingMaiRank::CopyFrom(const LingMaiRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LingMaiRank::IsInitialized() const {

  return true;
}

void LingMaiRank::Swap(LingMaiRank* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LingMaiRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LingMaiRank_descriptor_;
  metadata.reflection = LingMaiRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCLingMaiRank::kTypeFieldNumber;
const int GCLingMaiRank::kRanksFieldNumber;
#endif  // !_MSC_VER

GCLingMaiRank::GCLingMaiRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCLingMaiRank)
}

void GCLingMaiRank::InitAsDefaultInstance() {
}

GCLingMaiRank::GCLingMaiRank(const GCLingMaiRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCLingMaiRank)
}

void GCLingMaiRank::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCLingMaiRank::~GCLingMaiRank() {
  // @@protoc_insertion_point(destructor:GCLingMaiRank)
  SharedDtor();
}

void GCLingMaiRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCLingMaiRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCLingMaiRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCLingMaiRank_descriptor_;
}

const GCLingMaiRank& GCLingMaiRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XueSeShiLianMessage_2eproto();
  return *default_instance_;
}

GCLingMaiRank* GCLingMaiRank::default_instance_ = NULL;

GCLingMaiRank* GCLingMaiRank::New() const {
  return new GCLingMaiRank;
}

void GCLingMaiRank::Clear() {
  type_ = 0;
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCLingMaiRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCLingMaiRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ranks;
        break;
      }

      // repeated .LingMaiRank ranks = 2;
      case 2: {
        if (tag == 18) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ranks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCLingMaiRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCLingMaiRank)
  return false;
#undef DO_
}

void GCLingMaiRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCLingMaiRank)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .LingMaiRank ranks = 2;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCLingMaiRank)
}

::google::protobuf::uint8* GCLingMaiRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCLingMaiRank)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .LingMaiRank ranks = 2;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCLingMaiRank)
  return target;
}

int GCLingMaiRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .LingMaiRank ranks = 2;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCLingMaiRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCLingMaiRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCLingMaiRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCLingMaiRank::MergeFrom(const GCLingMaiRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCLingMaiRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCLingMaiRank::CopyFrom(const GCLingMaiRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLingMaiRank::IsInitialized() const {

  return true;
}

void GCLingMaiRank::Swap(GCLingMaiRank* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCLingMaiRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCLingMaiRank_descriptor_;
  metadata.reflection = GCLingMaiRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCLingMaiMsg::kTypeFieldNumber;
const int GCLingMaiMsg::kOccupyGangNameFieldNumber;
const int GCLingMaiMsg::kGangRankFieldNumber;
const int GCLingMaiMsg::kGangSorceFieldNumber;
const int GCLingMaiMsg::kKillMonsterNumFieldNumber;
const int GCLingMaiMsg::kKillPersonNumFieldNumber;
const int GCLingMaiMsg::kTotalSorceFieldNumber;
const int GCLingMaiMsg::kMySorceFieldNumber;
const int GCLingMaiMsg::kMyKillRankFieldNumber;
const int GCLingMaiMsg::kCityIdFieldNumber;
const int GCLingMaiMsg::kOccupyCityListFieldNumber;
const int GCLingMaiMsg::kEndTimeFieldNumber;
#endif  // !_MSC_VER

GCLingMaiMsg::GCLingMaiMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCLingMaiMsg)
}

void GCLingMaiMsg::InitAsDefaultInstance() {
}

GCLingMaiMsg::GCLingMaiMsg(const GCLingMaiMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCLingMaiMsg)
}

void GCLingMaiMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  occupygangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gangrank_ = 0;
  gangsorce_ = 0;
  killmonsternum_ = 0;
  killpersonnum_ = 0;
  totalsorce_ = 0;
  mysorce_ = 0;
  mykillrank_ = 0;
  cityid_ = 0;
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCLingMaiMsg::~GCLingMaiMsg() {
  // @@protoc_insertion_point(destructor:GCLingMaiMsg)
  SharedDtor();
}

void GCLingMaiMsg::SharedDtor() {
  if (occupygangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete occupygangname_;
  }
  if (this != default_instance_) {
  }
}

void GCLingMaiMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCLingMaiMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCLingMaiMsg_descriptor_;
}

const GCLingMaiMsg& GCLingMaiMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XueSeShiLianMessage_2eproto();
  return *default_instance_;
}

GCLingMaiMsg* GCLingMaiMsg::default_instance_ = NULL;

GCLingMaiMsg* GCLingMaiMsg::New() const {
  return new GCLingMaiMsg;
}

void GCLingMaiMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCLingMaiMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, mysorce_);
    if (has_occupygangname()) {
      if (occupygangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        occupygangname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 2816) {
    ZR_(endtime_, cityid_);
    mykillrank_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  occupycitylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCLingMaiMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCLingMaiMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_occupyGangName;
        break;
      }

      // optional string occupyGangName = 2;
      case 2: {
        if (tag == 18) {
         parse_occupyGangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_occupygangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->occupygangname().data(), this->occupygangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "occupygangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gangRank;
        break;
      }

      // optional int32 gangRank = 3;
      case 3: {
        if (tag == 24) {
         parse_gangRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangrank_)));
          set_has_gangrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gangSorce;
        break;
      }

      // optional int32 gangSorce = 4;
      case 4: {
        if (tag == 32) {
         parse_gangSorce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangsorce_)));
          set_has_gangsorce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_killMonsterNum;
        break;
      }

      // optional int32 killMonsterNum = 5;
      case 5: {
        if (tag == 40) {
         parse_killMonsterNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killmonsternum_)));
          set_has_killmonsternum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_killPersonNum;
        break;
      }

      // optional int32 killPersonNum = 6;
      case 6: {
        if (tag == 48) {
         parse_killPersonNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killpersonnum_)));
          set_has_killpersonnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_totalSorce;
        break;
      }

      // optional int32 totalSorce = 7;
      case 7: {
        if (tag == 56) {
         parse_totalSorce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalsorce_)));
          set_has_totalsorce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mySorce;
        break;
      }

      // optional int32 mySorce = 8;
      case 8: {
        if (tag == 64) {
         parse_mySorce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mysorce_)));
          set_has_mysorce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_myKillRank;
        break;
      }

      // optional int32 myKillRank = 9;
      case 9: {
        if (tag == 72) {
         parse_myKillRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mykillrank_)));
          set_has_mykillrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_cityId;
        break;
      }

      // optional int32 cityId = 10;
      case 10: {
        if (tag == 80) {
         parse_cityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_occupyCityList;
        break;
      }

      // repeated .LingMaiCity occupyCityList = 11;
      case 11: {
        if (tag == 90) {
         parse_occupyCityList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_occupycitylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_occupyCityList;
        if (input->ExpectTag(96)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 12;
      case 12: {
        if (tag == 96) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCLingMaiMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCLingMaiMsg)
  return false;
#undef DO_
}

void GCLingMaiMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCLingMaiMsg)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string occupyGangName = 2;
  if (has_occupygangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->occupygangname().data(), this->occupygangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "occupygangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->occupygangname(), output);
  }

  // optional int32 gangRank = 3;
  if (has_gangrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gangrank(), output);
  }

  // optional int32 gangSorce = 4;
  if (has_gangsorce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gangsorce(), output);
  }

  // optional int32 killMonsterNum = 5;
  if (has_killmonsternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->killmonsternum(), output);
  }

  // optional int32 killPersonNum = 6;
  if (has_killpersonnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->killpersonnum(), output);
  }

  // optional int32 totalSorce = 7;
  if (has_totalsorce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->totalsorce(), output);
  }

  // optional int32 mySorce = 8;
  if (has_mysorce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mysorce(), output);
  }

  // optional int32 myKillRank = 9;
  if (has_mykillrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mykillrank(), output);
  }

  // optional int32 cityId = 10;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cityid(), output);
  }

  // repeated .LingMaiCity occupyCityList = 11;
  for (int i = 0; i < this->occupycitylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->occupycitylist(i), output);
  }

  // optional int64 endTime = 12;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCLingMaiMsg)
}

::google::protobuf::uint8* GCLingMaiMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCLingMaiMsg)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string occupyGangName = 2;
  if (has_occupygangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->occupygangname().data(), this->occupygangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "occupygangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->occupygangname(), target);
  }

  // optional int32 gangRank = 3;
  if (has_gangrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gangrank(), target);
  }

  // optional int32 gangSorce = 4;
  if (has_gangsorce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gangsorce(), target);
  }

  // optional int32 killMonsterNum = 5;
  if (has_killmonsternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->killmonsternum(), target);
  }

  // optional int32 killPersonNum = 6;
  if (has_killpersonnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->killpersonnum(), target);
  }

  // optional int32 totalSorce = 7;
  if (has_totalsorce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->totalsorce(), target);
  }

  // optional int32 mySorce = 8;
  if (has_mysorce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mysorce(), target);
  }

  // optional int32 myKillRank = 9;
  if (has_mykillrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mykillrank(), target);
  }

  // optional int32 cityId = 10;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cityid(), target);
  }

  // repeated .LingMaiCity occupyCityList = 11;
  for (int i = 0; i < this->occupycitylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->occupycitylist(i), target);
  }

  // optional int64 endTime = 12;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCLingMaiMsg)
  return target;
}

int GCLingMaiMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string occupyGangName = 2;
    if (has_occupygangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->occupygangname());
    }

    // optional int32 gangRank = 3;
    if (has_gangrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangrank());
    }

    // optional int32 gangSorce = 4;
    if (has_gangsorce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangsorce());
    }

    // optional int32 killMonsterNum = 5;
    if (has_killmonsternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killmonsternum());
    }

    // optional int32 killPersonNum = 6;
    if (has_killpersonnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killpersonnum());
    }

    // optional int32 totalSorce = 7;
    if (has_totalsorce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalsorce());
    }

    // optional int32 mySorce = 8;
    if (has_mysorce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mysorce());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 myKillRank = 9;
    if (has_mykillrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mykillrank());
    }

    // optional int32 cityId = 10;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }

    // optional int64 endTime = 12;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  // repeated .LingMaiCity occupyCityList = 11;
  total_size += 1 * this->occupycitylist_size();
  for (int i = 0; i < this->occupycitylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->occupycitylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCLingMaiMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCLingMaiMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCLingMaiMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCLingMaiMsg::MergeFrom(const GCLingMaiMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  occupycitylist_.MergeFrom(from.occupycitylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_occupygangname()) {
      set_occupygangname(from.occupygangname());
    }
    if (from.has_gangrank()) {
      set_gangrank(from.gangrank());
    }
    if (from.has_gangsorce()) {
      set_gangsorce(from.gangsorce());
    }
    if (from.has_killmonsternum()) {
      set_killmonsternum(from.killmonsternum());
    }
    if (from.has_killpersonnum()) {
      set_killpersonnum(from.killpersonnum());
    }
    if (from.has_totalsorce()) {
      set_totalsorce(from.totalsorce());
    }
    if (from.has_mysorce()) {
      set_mysorce(from.mysorce());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mykillrank()) {
      set_mykillrank(from.mykillrank());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCLingMaiMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCLingMaiMsg::CopyFrom(const GCLingMaiMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLingMaiMsg::IsInitialized() const {

  return true;
}

void GCLingMaiMsg::Swap(GCLingMaiMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(occupygangname_, other->occupygangname_);
    std::swap(gangrank_, other->gangrank_);
    std::swap(gangsorce_, other->gangsorce_);
    std::swap(killmonsternum_, other->killmonsternum_);
    std::swap(killpersonnum_, other->killpersonnum_);
    std::swap(totalsorce_, other->totalsorce_);
    std::swap(mysorce_, other->mysorce_);
    std::swap(mykillrank_, other->mykillrank_);
    std::swap(cityid_, other->cityid_);
    occupycitylist_.Swap(&other->occupycitylist_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCLingMaiMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCLingMaiMsg_descriptor_;
  metadata.reflection = GCLingMaiMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
