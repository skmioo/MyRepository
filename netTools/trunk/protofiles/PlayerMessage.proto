
//@module=player,StartIndex=2100,classname=Player
option java_package = "com.mile.common.message";

import "InnerMessage.proto";
import "EquipMessage.proto";
import "SpiritBeastMessage.proto";
import "TalismanMessage.proto";

//----------------------角色VO定义----------------------

message GCCharacterFaceTo
{
	optional int64 objectId			= 1; //当前objectId
	optional int64 faceToObjectId	= 2; //面向的objectId
	optional Vector3Info faceToPos	= 3; //面向的方向（如果找不到faceToObjectId所代表的object，则读取此值）
}

//角色死亡
message GCPlayerDie
{
	optional int64 dietime = 1; //死亡时间
	optional int64 reborntiem = 2; //复活时间
	optional int64 killer = 3; //杀手,如果是宠物,则选其主人
	optional int32 kimbdNum = 4;//需要的绑金数量
}

//申请角色复活(只限主角)
message CGReqPlayerReborn
{
	optional int32 type = 1; //复活类型，1=buff复活 2=消费铜钱复活 3=消费道具 4=绑金复活
}

//返回角色复活
message GCPlayerReborn
{
	optional int32 result		= 1;	//复活结果，1成功
	optional int64 objectId		= 2; //当前objectId
}

//修改名字
message CGUpdatePlayerName
{
	optional string name	= 1;    //名称
}

message GCUpdatePlayerNameOK
{
	optional int32 flag = 1;    //1 成功 0 失败 
	optional string newname	= 2;    //新名称
}

//推送头像列表
message GCSendHeadIconList
{
	repeated int32 iconlist = 1;//头像id
}

//切换用户头像
message CGUpdatePlayerHeadIcon
{
	optional int32 iconid = 1;
}

message GCUpdateHeadIconOK
{
	optional int32 flag = 1;    //1 成功 0 失败 
	optional int32 headIcon	= 2;    //头像编号
}

//玩家重新连接服务器
message CGReLoginGameServer
{
	optional int64 	playerId	= 1;
	optional string uid		= 2;
	optional string platForm	= 3;	//平台类型
	optional int64 accountID	= 4;	//账户id(center-login生成)
	optional int32 	currSceneId	= 5;  //当前客户端场景ID
	optional string authKey		= 6;	//账号登陆验证
	optional int32 	sceneLoading	= 7;  //断连,还处于场景加载中, 未发送或收到过EnterSceneOk
}

//重连返回
message GCReLoginGameServer
{
	optional int32 result		= 1;	//登陆结果，验证失败0, 1成功, 3=封号， 4连接超时, 
	optional int64 eniqueID		= 2;	//EniqueID
}

//服务器刷新技能列表
message GCSendSkillList
{
	optional int64 	playerId	= 1;
	repeated SkillItemData skilldata = 2;//用户技能集合
	optional int32 isfirstlogin	= 3;  //是否第一次登录(1是 0否)
	optional SkillItemData shenQiSkilldata = 4;//神器技能
	optional int32 skillFlag = 5;//技能标示 0初始化, 1添加技能,2技能升级,3删除技能
}


//挂机设置
message CGPlayerHangup
{	
	optional int32 	open		= 1;  //挂机状态 1=开启, 0=关闭
	optional int32 	scope		= 2;  //挂机范围 0=全场景， 1=视野区， 2=定点范围
	optional int32 	autoRenorn	= 3;	//自动消耗金币复活
	optional int32	avoiBoss	= 4;    //自动躲避精英和BOSS
	optional int32	attackBack	= 5;    //遭受到玩家攻击时自动反击
	repeated int32	pickTypeIndexs	= 6;  //拾取类型的序号设置
	repeated int32 	pickQuality	= 7;  //拾取品质
	repeated int32 	autoSkills	= 8;  //自动释放技能
}

//服务器返回玩家挂机
message GCPlayerHangup
{
	optional int32 result		= 1; //1=挂机成功，0=挂机失败，失败时，保持挂机状态与服务器一致
	optional int32 	open		= 2;  //挂机状态
}


//玩家(宠物)转向消息
message CGSendRotate
{	
	optional int64 objectId		= 1; //当前objectId
	optional Vector3Info rotate	= 2;    //当前朝向
}

//玩家(宠物)转向消息
message GCSendRotate
{
	optional int64 objectId		= 1; //当前objectId
	optional Vector3Info rotate	= 2;    //当前朝向
}

//根据玩家id获取玩家信息
message CGGetPlaerInfoById
{
	optional int64 playerID = 1;	//玩家ID
	optional int32 type = 2;	//操作类型客户端用1排行榜2鲜花宝贝界面
}

//向客户端发送玩家信息
message GCSendPlayerInfoById
{
	optional CharacterInfo characterInfo = 1;	//玩家信息
	optional int32 type = 2;	//操作类型客户端用1排行榜2鲜花宝贝界面
}

//升级获得新技能
message GCLevelUpGetNewSkill
{
	repeated SkillItemData skilldata = 1;//用户技能集合
}

// 获取玩家和宠物模型数据
message CGGetPlayerAndPetInfo
{
	optional int64 playerID = 1;	//玩家ID
}

// 获取玩家和宠物模型数据
message GCSendPlayerAndPetInfo
{
	optional CharacterInfo characterInfo = 1;	//玩家信息
	optional PetInfo petInfo = 2;	//宠物信息(没有不传)
}

//请求切换角色
message CGChangePlayer
{

}

//请求切换角色返回结果
message GCChangePlayerResult
{
	optional int32 result = 1;	//0:失败;1:成功
}


//压力测试开始
message GCStressTestBegin
{
	optional int64 playerId = 1;//占位，并无用
}


//视野设置
message CGPlayerViewSetting
{	
	optional int32 	maxNum		= 1;  //视野最大玩家数量
}

//服务器返回视野设置
message GCPlayerViewSetting
{
	optional int32 result		= 1; //1=成功，0=失败
	optional int32 	maxNum		= 2;  //视野最大玩家数量
}


//请求退出登录
message CGQuitLogin
{

}

//请求退出登录返回
message GCQuitLoginBack
{
	optional int32 result		= 1; //1=成功，0=失败
}
//禁言到期时间
message GCMuteTime
{
	optional int32 flag = 1;//0 正常无禁言 1禁言中 2禁言动作 3解禁动作
	optional int32 muteTime = 2;//被禁言了几小时  
	optional int64 muteEndTime = 3;//禁言到期时间
}


//服务器强制退出
message GameForceLoginout
{
	optional int64 playerId		= 1;//玩家ID
	optional int32 noticeLoginSvr	= 2;//是否需要通知LoginSvr 
	optional int32 noticeGateSvr	= 3;//是否需要通知GateSvr 
	optional int32 reason		= 4;//退出原因
}

//迎头经验
message GCExpPlus
{
	optional int32 display		= 1;//1=显示, 0=不显示
	optional int32 worldLevel	= 2;//世界等级
}
//防沉迷开关
message GCNonageSts
{
    optional int32 sts		= 1;//1=开，0关
}
//客户端设置防沉迷状态
message CGNeedNonage
{
    optional int32 sts		= 1;//需要设置防沉迷，0，不需要
}
//累计在线时长
message GCOnLineTime
{

  optional int32 senconds		= 1;//累计在线分钟数
}

//境界升级
message CGAmbitLevelUp
{

}

message GCAmbitLevelUp
{
  optional int32 ambitLevel		= 1;//当前境界等级
  optional int32 ambitStatus	= 2;//是否可升级状态，1为可升级、0为不可
}


//刷新角色私有属性
message GCPrivatePlayerAttr
{
	repeated CharacterAttr charAttr		= 1;//用户属性集合
}
//防卡死
message CGUnLock
{
}

// 查看角色信息 客户端发起
message CGLookPlayerInfo
{
	optional int64 pid = 1;		// 要查看的角色pid
}

// 查看角色信息 服务器返回
message GCLookPlayerInfo
{
	optional CharacterInfo playerInfo = 1; // 角色信息
    repeated EquipSlots equipSlots = 2;	   // 装备信息
	repeated SpiritBeastInfo sbInfo = 3;   // 上阵中的灵兽信息
	repeated TalismanSlotsLook talisSlots = 4; // 法宝信息
}






